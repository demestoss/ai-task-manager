{
  "version": 3,
  "sources": ["../bundle-dCrEAK/checked-fetch.js", "../../../../../packages/db/src/schema.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/entity.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/column.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/table.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/pg-core/table.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/pg-core/primary-keys.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sql/expressions/conditions.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sql/expressions/select.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/relations.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/subquery.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/tracing-utils.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/drizzle-orm/version.js", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/tracing.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/view-common.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sql/sql.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/alias.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/column-builder.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sqlite-core/table.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sqlite-core/foreign-keys.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sqlite-core/unique-constraint.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sqlite-core/columns/common.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sqlite-core/columns/integer.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sqlite-core/columns/text.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/selection-proxy.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/query-promise.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/utils.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sqlite-core/query-builders/delete.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sqlite-core/query-builders/insert.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/errors.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sqlite-core/view-base.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sqlite-core/dialect.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/query-builders/query-builder.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sqlite-core/query-builders/select.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sqlite-core/query-builders/query-builder.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sqlite-core/query-builders/update.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sqlite-core/query-builders/query.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sqlite-core/query-builders/raw.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sqlite-core/db.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/logger.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/sqlite-core/session.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/libsql/session.ts", "../../../../../node_modules/.pnpm/drizzle-orm@0.29.3_@libsql+client@0.4.3_bun-types@1.0.25/node_modules/src/libsql/driver.ts", "../../../../../node_modules/.pnpm/@libsql+core@0.4.3/node_modules/@libsql/core/lib-esm/api.js", "../../../../../node_modules/.pnpm/@libsql+core@0.4.3/node_modules/@libsql/core/lib-esm/uri.js", "../../../../../node_modules/.pnpm/js-base64@3.7.6/node_modules/js-base64/base64.mjs", "../../../../../node_modules/.pnpm/@libsql+core@0.4.3/node_modules/@libsql/core/lib-esm/util.js", "../../../../../node_modules/.pnpm/@libsql+core@0.4.3/node_modules/@libsql/core/lib-esm/config.js", "../../../../../node_modules/.pnpm/@libsql+isomorphic-ws@0.1.5/node_modules/@libsql/isomorphic-ws/web.mjs", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/client.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/errors.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/encoding/json/decode.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/encoding/json/encode.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/encoding/protobuf/util.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/encoding/protobuf/decode.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/encoding/protobuf/encode.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/id_alloc.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/util.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/value.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/result.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/sql.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/queue.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/stmt.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/batch.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/describe.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/stream.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/cursor.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/ws/cursor.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/ws/stream.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/shared/json_encode.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/ws/json_encode.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/shared/protobuf_encode.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/ws/protobuf_encode.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/shared/json_decode.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/ws/json_decode.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/shared/protobuf_decode.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/ws/protobuf_decode.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/ws/client.js", "../../../../../node_modules/.pnpm/@libsql+isomorphic-fetch@0.1.12/node_modules/@libsql/isomorphic-fetch/web.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/queue_microtask.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/byte_queue.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/http/json_decode.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/http/protobuf_decode.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/http/cursor.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/http/json_encode.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/http/protobuf_encode.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/http/stream.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/http/client.js", "../../../../../node_modules/.pnpm/@libsql+hrana-client@0.5.6/node_modules/@libsql/hrana-client/lib-esm/index.js", "../../../../../node_modules/.pnpm/@libsql+client@0.4.3/node_modules/@libsql/client/lib-esm/hrana.js", "../../../../../node_modules/.pnpm/@libsql+client@0.4.3/node_modules/@libsql/client/lib-esm/sql_cache.js", "../../../../../node_modules/.pnpm/@libsql+client@0.4.3/node_modules/@libsql/client/lib-esm/ws.js", "../../../../../node_modules/.pnpm/@libsql+client@0.4.3/node_modules/@libsql/client/lib-esm/http.js", "../../../../../node_modules/.pnpm/@libsql+client@0.4.3/node_modules/@libsql/client/lib-esm/web.js", "../../../../../packages/db/src/database.ts", "../../../../../node_modules/.pnpm/zod@3.22.4/node_modules/zod/lib/index.mjs", "../../../../../packages/api/src/modules/task/model.ts", "../../../../../packages/api/src/modules/task/ask.ts", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/utils/url.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/utils/cookie.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/helper/cookie/index.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/utils/crypto.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/utils/buffer.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/validator/validator.js", "../../../../../node_modules/.pnpm/@hono+zod-validator@0.1.11_hono@3.12.10_zod@3.22.4/node_modules/@hono/zod-validator/dist/esm/index.js", "../../../../../packages/date-utils/src/index.ts", "../../../../../packages/api/src/errors/DataError.ts", "../../../../../packages/api/src/modules/task/queries.ts", "../../../../../packages/api/src/modules/finished-task/queries.ts", "../../../../../packages/api/src/modules/finished-task/service.ts", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/helper/html/index.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/utils/html.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/utils/stream.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/context.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/compose.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/http-exception.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/utils/body.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/request.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/router.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/hono-base.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/router/reg-exp-router/node.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/router/reg-exp-router/trie.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/router/reg-exp-router/router.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/router/smart-router/router.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/router/trie-router/node.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/router/trie-router/router.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/hono.js", "../../../../../packages/api/src/modules/finished-task/routes.ts", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/middleware/logger/index.js", "../../../../../packages/api/src/responder.ts", "../../../../../packages/api/src/modules/predicts/random-task.ts", "../../../../../packages/api/src/modules/task/service.ts", "../../../../../packages/api/src/modules/task/routes.ts", "../../../../../packages/api/src/errors/parseError.ts", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/middleware/pretty-json/index.js", "../../../../../node_modules/.pnpm/hono@3.12.10/node_modules/hono/dist/middleware/bearer-auth/index.js", "../../../../../packages/api/src/router.ts", "../../../src/index.ts", "../../../../../node_modules/.pnpm/wrangler@3.26.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-dCrEAK/middleware-insertion-facade.js", "../../../../../node_modules/.pnpm/wrangler@3.26.0/node_modules/wrangler/templates/middleware/common.ts", "../bundle-dCrEAK/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/dmitriy/personal/ai-task-manager/apps/server/.wrangler/tmp/dev-a2dL4Z",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t  );\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "import { integer, text } from 'drizzle-orm/sqlite-core';\nimport { sqliteTable } from 'drizzle-orm/sqlite-core';\n\nexport const tasks = sqliteTable('tasks', {\n\tid: text('id').primaryKey().unique(),\n\tname: text('name').notNull(),\n\tdescription: text('description', { mode: 'text' }),\n\tpriority: text('priority', {\n\t\tenum: ['useless', 'low', 'medium', 'high'],\n\t}),\n\tcategory: text('category', {\n\t\tenum: ['work', 'coding', 'reading', 'home', 'hobby', 'other']\n\t}),\n\tdueDate: integer('due_date'),\n\tresolutionDate: integer('resolution_date'),\n\tcreatedAt: integer('created_at').notNull(),\n\tdeletedAt: integer('deleted_at'),\n});\n\nexport type TaskDataModel = Omit<typeof tasks.$inferSelect, 'resolutionDate'>;\nexport type FinishedTaskDataModel = typeof tasks.$inferSelect;\n", "export const entityKind = Symbol.for('drizzle:entityKind');\nexport const hasOwnEntityKind = Symbol.for('drizzle:hasOwnEntityKind');\n\nexport interface DrizzleEntity {\n\t[entityKind]: string;\n}\n\nexport type DrizzleEntityClass<T> =\n\t& ((abstract new(...args: any[]) => T) | (new(...args: any[]) => T))\n\t& DrizzleEntity;\n\nexport function is<T extends DrizzleEntityClass<any>>(value: any, type: T): value is InstanceType<T> {\n\tif (!value || typeof value !== 'object') {\n\t\treturn false;\n\t}\n\n\tif (value instanceof type) { // eslint-disable-line no-instanceof/no-instanceof\n\t\treturn true;\n\t}\n\n\tif (!Object.prototype.hasOwnProperty.call(type, entityKind)) {\n\t\tthrow new Error(\n\t\t\t`Class \"${\n\t\t\t\ttype.name ?? '<unknown>'\n\t\t\t}\" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`,\n\t\t);\n\t}\n\n\tlet cls = value.constructor;\n\tif (cls) {\n\t\t// Traverse the prototype chain to find the entityKind\n\t\twhile (cls) {\n\t\t\tif (entityKind in cls && cls[entityKind] === type[entityKind]) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tcls = Object.getPrototypeOf(cls);\n\t\t}\n\t}\n\n\treturn false;\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, ColumnDataType } from './column-builder.ts';\nimport { entityKind } from './entity.ts';\nimport type { DriverValueMapper, SQL, SQLWrapper } from './sql/sql.ts';\nimport type { Table } from './table.ts';\nimport type { Update } from './utils.ts';\n\nexport interface ColumnBaseConfig<\n\tTDataType extends ColumnDataType,\n\tTColumnType extends string,\n> extends ColumnBuilderBaseConfig<TDataType, TColumnType> {\n\ttableName: string;\n\tnotNull: boolean;\n\thasDefault: boolean;\n}\n\nexport type ColumnTypeConfig<T extends ColumnBaseConfig<ColumnDataType, string>, TTypeConfig extends object> = T & {\n\tbrand: 'Column';\n\ttableName: T['tableName'];\n\tname: T['name'];\n\tdataType: T['dataType'];\n\tcolumnType: T['columnType'];\n\tdata: T['data'];\n\tdriverParam: T['driverParam'];\n\tnotNull: T['notNull'];\n\thasDefault: T['hasDefault'];\n\tenumValues: T['enumValues'];\n\tbaseColumn: T extends { baseColumn: infer U } ? U : unknown;\n} & TTypeConfig;\n\nexport type ColumnRuntimeConfig<TData, TRuntimeConfig extends object> = ColumnBuilderRuntimeConfig<\n\tTData,\n\tTRuntimeConfig\n>;\n\nexport interface Column<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTRuntimeConfig extends object = object,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTTypeConfig extends object = object,\n> extends DriverValueMapper<T['data'], T['driverParam']>, SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\n/*\n\t`Column` only accepts a full `ColumnConfig` as its generic.\n\tTo infer parts of the config, use `AnyColumn` that accepts a partial config.\n\tSee `GetColumnData` for example usage of inferring.\n*/\nexport abstract class Column<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n> implements DriverValueMapper<T['data'], T['driverParam']>, SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Column';\n\n\tdeclare readonly _: ColumnTypeConfig<T, TTypeConfig>;\n\n\treadonly name: string;\n\treadonly primary: boolean;\n\treadonly notNull: boolean;\n\treadonly default: T['data'] | SQL | undefined;\n\treadonly defaultFn: (() => T['data'] | SQL) | undefined;\n\treadonly hasDefault: boolean;\n\treadonly isUnique: boolean;\n\treadonly uniqueName: string | undefined;\n\treadonly uniqueType: string | undefined;\n\treadonly dataType: T['dataType'];\n\treadonly columnType: T['columnType'];\n\treadonly enumValues: T['enumValues'] = undefined;\n\n\tprotected config: ColumnRuntimeConfig<T['data'], TRuntimeConfig>;\n\n\tconstructor(\n\t\treadonly table: Table,\n\t\tconfig: ColumnRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tthis.config = config;\n\t\tthis.name = config.name;\n\t\tthis.notNull = config.notNull;\n\t\tthis.default = config.default;\n\t\tthis.defaultFn = config.defaultFn;\n\t\tthis.hasDefault = config.hasDefault;\n\t\tthis.primary = config.primaryKey;\n\t\tthis.isUnique = config.isUnique;\n\t\tthis.uniqueName = config.uniqueName;\n\t\tthis.uniqueType = config.uniqueType;\n\t\tthis.dataType = config.dataType as T['dataType'];\n\t\tthis.columnType = config.columnType;\n\t}\n\n\tabstract getSQLType(): string;\n\n\tmapFromDriverValue(value: unknown): unknown {\n\t\treturn value;\n\t}\n\n\tmapToDriverValue(value: unknown): unknown {\n\t\treturn value;\n\t}\n}\n\nexport type UpdateColConfig<\n\tT extends ColumnBaseConfig<ColumnDataType, string>,\n\tTUpdate extends Partial<ColumnBaseConfig<ColumnDataType, string>>,\n> = Update<T, TUpdate>;\n\nexport type AnyColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = Column<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n\nexport type GetColumnData<TColumn extends Column, TInferMode extends 'query' | 'raw' = 'query'> =\n\t// dprint-ignore\n\tTInferMode extends 'raw' // Raw mode\n\t\t? TColumn['_']['data'] // Just return the underlying type\n\t\t: TColumn['_']['notNull'] extends true // Query mode\n\t\t? TColumn['_']['data'] // Query mode, not null\n\t\t: TColumn['_']['data'] | null; // Query mode, nullable\n\nexport type InferColumnsDataTypes<TColumns extends Record<string, Column>> = {\n\t[Key in keyof TColumns]: GetColumnData<TColumns[Key], 'query'>;\n};\n", "import type { Column, GetColumnData } from './column.ts';\nimport { entityKind } from './entity.ts';\nimport type { OptionalKeyOnly, RequiredKeyOnly } from './operations.ts';\nimport type { SQLWrapper } from './sql/sql.ts';\nimport type { Simplify, Update } from './utils.ts';\n\nexport interface TableConfig<TColumn extends Column = Column<any>> {\n\tname: string;\n\tschema: string | undefined;\n\tcolumns: Record<string, TColumn>;\n\tdialect: string;\n}\n\nexport type UpdateTableConfig<T extends TableConfig, TUpdate extends Partial<TableConfig>> = Required<\n\tUpdate<T, TUpdate>\n>;\n\n/** @internal */\nexport const TableName = Symbol.for('drizzle:Name');\n\n/** @internal */\nexport const Schema = Symbol.for('drizzle:Schema');\n\n/** @internal */\nexport const Columns = Symbol.for('drizzle:Columns');\n\n/** @internal */\nexport const OriginalName = Symbol.for('drizzle:OriginalName');\n\n/** @internal */\nexport const BaseName = Symbol.for('drizzle:BaseName');\n\n/** @internal */\nexport const IsAlias = Symbol.for('drizzle:IsAlias');\n\n/** @internal */\nexport const ExtraConfigBuilder = Symbol.for('drizzle:ExtraConfigBuilder');\n\nconst IsDrizzleTable = Symbol.for('drizzle:IsDrizzleTable');\n\nexport interface Table<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tT extends TableConfig = TableConfig,\n> extends SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\n\nexport class Table<T extends TableConfig = TableConfig> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Table';\n\n\tdeclare readonly _: {\n\t\treadonly brand: 'Table';\n\t\treadonly config: T;\n\t\treadonly name: T['name'];\n\t\treadonly schema: T['schema'];\n\t\treadonly columns: T['columns'];\n\t\treadonly inferSelect: InferSelectModel<Table<T>>;\n\t\treadonly inferInsert: InferInsertModel<Table<T>>;\n\t};\n\n\tdeclare readonly $inferSelect: InferSelectModel<Table<T>>;\n\tdeclare readonly $inferInsert: InferInsertModel<Table<T>>;\n\n\t/** @internal */\n\tstatic readonly Symbol = {\n\t\tName: TableName as typeof TableName,\n\t\tSchema: Schema as typeof Schema,\n\t\tOriginalName: OriginalName as typeof OriginalName,\n\t\tColumns: Columns as typeof Columns,\n\t\tBaseName: BaseName as typeof BaseName,\n\t\tIsAlias: IsAlias as typeof IsAlias,\n\t\tExtraConfigBuilder: ExtraConfigBuilder as typeof ExtraConfigBuilder,\n\t};\n\n\t/**\n\t * @internal\n\t * Can be changed if the table is aliased.\n\t */\n\t[TableName]: string;\n\n\t/**\n\t * @internal\n\t * Used to store the original name of the table, before any aliasing.\n\t */\n\t[OriginalName]: string;\n\n\t/** @internal */\n\t[Schema]: string | undefined;\n\n\t/** @internal */\n\t[Columns]!: T['columns'];\n\n\t/**\n\t *  @internal\n\t * Used to store the table name before the transformation via the `tableCreator` functions.\n\t */\n\t[BaseName]: string;\n\n\t/** @internal */\n\t[IsAlias] = false;\n\n\t/** @internal */\n\t[ExtraConfigBuilder]: ((self: any) => Record<string, unknown>) | undefined = undefined;\n\n\t[IsDrizzleTable] = true;\n\n\tconstructor(name: string, schema: string | undefined, baseName: string) {\n\t\tthis[TableName] = this[OriginalName] = name;\n\t\tthis[Schema] = schema;\n\t\tthis[BaseName] = baseName;\n\t}\n}\n\nexport function isTable(table: unknown): table is Table {\n\treturn typeof table === 'object' && table !== null && IsDrizzleTable in table;\n}\n\n/**\n * Any table with a specified boundary.\n *\n * @example\n\t```ts\n\t// Any table with a specific name\n\ttype AnyUsersTable = AnyTable<{ name: 'users' }>;\n\t```\n *\n * To describe any table with any config, simply use `Table` without any type arguments, like this:\n *\n\t```ts\n\tfunction needsTable(table: Table) {\n\t\t...\n\t}\n\t```\n */\nexport type AnyTable<TPartial extends Partial<TableConfig>> = Table<UpdateTableConfig<TableConfig, TPartial>>;\n\nexport function getTableName<T extends Table>(table: T): T['_']['name'] {\n\treturn table[TableName];\n}\n\nexport type MapColumnName<TName extends string, TColumn extends Column, TDBColumNames extends boolean> =\n\tTDBColumNames extends true ? TColumn['_']['name']\n\t\t: TName;\n\nexport type InferModelFromColumns<\n\tTColumns extends Record<string, Column>,\n\tTInferMode extends 'select' | 'insert' = 'select',\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = Simplify<\n\tTInferMode extends 'insert' ? \n\t\t\t& {\n\t\t\t\t[\n\t\t\t\t\tKey in keyof TColumns & string as RequiredKeyOnly<\n\t\t\t\t\t\tMapColumnName<Key, TColumns[Key], TConfig['dbColumnNames']>,\n\t\t\t\t\t\tTColumns[Key]\n\t\t\t\t\t>\n\t\t\t\t]: GetColumnData<TColumns[Key], 'query'>;\n\t\t\t}\n\t\t\t& {\n\t\t\t\t[\n\t\t\t\t\tKey in keyof TColumns & string as OptionalKeyOnly<\n\t\t\t\t\t\tMapColumnName<Key, TColumns[Key], TConfig['dbColumnNames']>,\n\t\t\t\t\t\tTColumns[Key]\n\t\t\t\t\t>\n\t\t\t\t]?: GetColumnData<TColumns[Key], 'query'>;\n\t\t\t}\n\t\t: {\n\t\t\t[\n\t\t\t\tKey in keyof TColumns & string as MapColumnName<\n\t\t\t\t\tKey,\n\t\t\t\t\tTColumns[Key],\n\t\t\t\t\tTConfig['dbColumnNames']\n\t\t\t\t>\n\t\t\t]: GetColumnData<TColumns[Key], 'query'>;\n\t\t}\n>;\n\n/** @deprecated Use one of the alternatives: {@link InferSelectModel} / {@link InferInsertModel}, or `table.$inferSelect` / `table.$inferInsert`\n */\nexport type InferModel<\n\tTTable extends Table,\n\tTInferMode extends 'select' | 'insert' = 'select',\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = InferModelFromColumns<TTable['_']['columns'], TInferMode, TConfig>;\n\nexport type InferSelectModel<\n\tTTable extends Table,\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = InferModelFromColumns<TTable['_']['columns'], 'select', TConfig>;\n\nexport type InferInsertModel<\n\tTTable extends Table,\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = InferModelFromColumns<TTable['_']['columns'], 'insert', TConfig>;\n", "import type { BuildColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { Table, type TableConfig as TableConfigBase, type UpdateTableConfig } from '~/table.ts';\nimport type { CheckBuilder } from './checks.ts';\nimport type { PgColumn, PgColumnBuilder, PgColumnBuilderBase } from './columns/common.ts';\nimport type { ForeignKey, ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { AnyIndexBuilder } from './indexes.ts';\nimport type { PrimaryKeyBuilder } from './primary-keys.ts';\nimport type { UniqueConstraintBuilder } from './unique-constraint.ts';\n\nexport type PgTableExtraConfig = Record<\n\tstring,\n\t| AnyIndexBuilder\n\t| CheckBuilder\n\t| ForeignKeyBuilder\n\t| PrimaryKeyBuilder\n\t| UniqueConstraintBuilder\n>;\n\nexport type TableConfig = TableConfigBase<PgColumn>;\n\n/** @internal */\nexport const InlineForeignKeys = Symbol.for('drizzle:PgInlineForeignKeys');\n\nexport class PgTable<T extends TableConfig = TableConfig> extends Table<T> {\n\tstatic readonly [entityKind]: string = 'PgTable';\n\n\t/** @internal */\n\tstatic override readonly Symbol = Object.assign({}, Table.Symbol, {\n\t\tInlineForeignKeys: InlineForeignKeys as typeof InlineForeignKeys,\n\t});\n\n\t/**@internal */\n\t[InlineForeignKeys]: ForeignKey[] = [];\n\n\t/** @internal */\n\toverride [Table.Symbol.ExtraConfigBuilder]: ((self: Record<string, PgColumn>) => PgTableExtraConfig) | undefined =\n\t\tundefined;\n}\n\nexport type AnyPgTable<TPartial extends Partial<TableConfig> = {}> = PgTable<UpdateTableConfig<TableConfig, TPartial>>;\n\nexport type PgTableWithColumns<T extends TableConfig> =\n\t& PgTable<T>\n\t& {\n\t\t[Key in keyof T['columns']]: T['columns'][Key];\n\t};\n\n/** @internal */\nexport function pgTableWithSchema<\n\tTTableName extends string,\n\tTSchemaName extends string | undefined,\n\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n>(\n\tname: TTableName,\n\tcolumns: TColumnsMap,\n\textraConfig: ((self: BuildColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfig) | undefined,\n\tschema: TSchemaName,\n\tbaseName = name,\n): PgTableWithColumns<{\n\tname: TTableName;\n\tschema: TSchemaName;\n\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\tdialect: 'pg';\n}> {\n\tconst rawTable = new PgTable<{\n\t\tname: TTableName;\n\t\tschema: TSchemaName;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>(name, schema, baseName);\n\n\tconst builtColumns = Object.fromEntries(\n\t\tObject.entries(columns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as PgColumnBuilder;\n\t\t\tconst column = colBuilder.build(rawTable);\n\t\t\trawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\n\tconst table = Object.assign(rawTable, builtColumns);\n\n\ttable[Table.Symbol.Columns] = builtColumns;\n\n\tif (extraConfig) {\n\t\ttable[PgTable.Symbol.ExtraConfigBuilder] = extraConfig as any;\n\t}\n\n\treturn table;\n}\n\nexport interface PgTableFn<TSchema extends string | undefined = undefined> {\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfig,\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n}\n\nexport const pgTable: PgTableFn = (name, columns, extraConfig) => {\n\treturn pgTableWithSchema(name, columns, extraConfig, undefined);\n};\n\nexport function pgTableCreator(customizeTableName: (name: string) => string): PgTableFn {\n\treturn (name, columns, extraConfig) => {\n\t\treturn pgTableWithSchema(customizeTableName(name) as typeof name, columns, extraConfig, undefined, name);\n\t};\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { AnyPgColumn, PgColumn } from './columns/index.ts';\nimport { PgTable } from './table.ts';\n\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumn extends AnyPgColumn<{ tableName: TTableName }>,\n\tTColumns extends AnyPgColumn<{ tableName: TTableName }>[],\n>(config: { name?: string; columns: [TColumn, ...TColumns] }): PrimaryKeyBuilder;\n/**\n * @deprecated: Please use primaryKey({ columns: [] }) instead of this function\n * @param columns\n */\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumns extends AnyPgColumn<{ tableName: TTableName }>[],\n>(...columns: TColumns): PrimaryKeyBuilder;\nexport function primaryKey(...config: any) {\n\tif (config[0].columns) {\n\t\treturn new PrimaryKeyBuilder(config[0].columns, config[0].name);\n\t}\n\treturn new PrimaryKeyBuilder(config);\n}\n\nexport class PrimaryKeyBuilder {\n\tstatic readonly [entityKind]: string = 'PgPrimaryKeyBuilder';\n\n\t/** @internal */\n\tcolumns: PgColumn[];\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tcolumns: PgColumn[],\n\t\tname?: string,\n\t) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): PrimaryKey {\n\t\treturn new PrimaryKey(table, this.columns, this.name);\n\t}\n}\n\nexport class PrimaryKey {\n\tstatic readonly [entityKind]: string = 'PgPrimaryKey';\n\n\treadonly columns: AnyPgColumn<{}>[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: PgTable, columns: AnyPgColumn<{}>[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\tgetName(): string {\n\t\treturn this.name ?? `${this.table[PgTable.Symbol.Name]}_${this.columns.map((column) => column.name).join('_')}_pk`;\n\t}\n}\n", "import { type AnyColumn, Column, type GetColumnData } from '~/column.ts';\nimport { is } from '~/entity.ts';\nimport { Table } from '~/table.ts';\nimport {\n\tisDriverValueEncoder,\n\tisSQLWrapper,\n\tParam,\n\tPlaceholder,\n\tSQL,\n\tsql,\n\ttype SQLChunk,\n\ttype SQLWrapper,\n\tStringChunk,\n\tView,\n} from '../sql.ts';\n\nexport function bindIfParam(value: unknown, column: SQLWrapper): SQLChunk {\n\tif (\n\t\tisDriverValueEncoder(column)\n\t\t&& !isSQLWrapper(value)\n\t\t&& !is(value, Param)\n\t\t&& !is(value, Placeholder)\n\t\t&& !is(value, Column)\n\t\t&& !is(value, Table)\n\t\t&& !is(value, View)\n\t) {\n\t\treturn new Param(value, column);\n\t}\n\treturn value as SQLChunk;\n}\n\nexport interface BinaryOperator {\n\t<TColumn extends Column>(\n\t\tleft: TColumn,\n\t\tright: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\t): SQL;\n\t<T>(left: SQL.Aliased<T>, right: T | SQLWrapper): SQL;\n\t<T extends SQLWrapper>(\n\t\tleft: Exclude<T, SQL.Aliased | Column>,\n\t\tright: unknown,\n\t): SQL;\n}\n\n/**\n * Test that two values are equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is null, you may want to use\n * `isNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by Ford\n * db.select().from(cars)\n *   .where(eq(cars.make, 'Ford'))\n * ```\n *\n * @see isNull for a way to test equality to NULL.\n */\nexport const eq: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} = ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that two values are not equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is not null, you may want to use\n * `isNotNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars not made by Ford\n * db.select().from(cars)\n *   .where(ne(cars.make, 'Ford'))\n * ```\n *\n * @see isNotNull for a way to test whether a value is not null.\n */\nexport const ne: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} <> ${bindIfParam(right, left)}`;\n};\n\n/**\n * Combine a list of conditions with the `and` operator. Conditions\n * that are equal `undefined` are automatically ignored.\n *\n * ## Examples\n *\n * ```ts\n * db.select().from(cars)\n *   .where(\n *     and(\n *       eq(cars.make, 'Volvo'),\n *       eq(cars.year, 1950),\n *     )\n *   )\n * ```\n */\nexport function and(...conditions: (SQLWrapper | undefined)[]): SQL | undefined;\nexport function and(\n\t...unfilteredConditions: (SQLWrapper | undefined)[]\n): SQL | undefined {\n\tconst conditions = unfilteredConditions.filter(\n\t\t(c): c is Exclude<typeof c, undefined> => c !== undefined,\n\t);\n\n\tif (conditions.length === 0) {\n\t\treturn undefined;\n\t}\n\n\tif (conditions.length === 1) {\n\t\treturn new SQL(conditions);\n\t}\n\n\treturn new SQL([\n\t\tnew StringChunk('('),\n\t\tsql.join(conditions, new StringChunk(' and ')),\n\t\tnew StringChunk(')'),\n\t]);\n}\n\n/**\n * Combine a list of conditions with the `or` operator. Conditions\n * that are equal `undefined` are automatically ignored.\n *\n * ## Examples\n *\n * ```ts\n * db.select().from(cars)\n *   .where(\n *     or(\n *       eq(cars.make, 'GM'),\n *       eq(cars.make, 'Ford'),\n *     )\n *   )\n * ```\n */\nexport function or(...conditions: (SQLWrapper | undefined)[]): SQL | undefined;\nexport function or(\n\t...unfilteredConditions: (SQLWrapper | undefined)[]\n): SQL | undefined {\n\tconst conditions = unfilteredConditions.filter(\n\t\t(c): c is Exclude<typeof c, undefined> => c !== undefined,\n\t);\n\n\tif (conditions.length === 0) {\n\t\treturn undefined;\n\t}\n\n\tif (conditions.length === 1) {\n\t\treturn new SQL(conditions);\n\t}\n\n\treturn new SQL([\n\t\tnew StringChunk('('),\n\t\tsql.join(conditions, new StringChunk(' or ')),\n\t\tnew StringChunk(')'),\n\t]);\n}\n\n/**\n * Negate the meaning of an expression using the `not` keyword.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars _not_ made by GM or Ford.\n * db.select().from(cars)\n *   .where(not(inArray(cars.make, ['GM', 'Ford'])))\n * ```\n */\nexport function not(condition: SQLWrapper): SQL {\n\treturn sql`not ${condition}`;\n}\n\n/**\n * Test that the first expression passed is greater than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made after 2000.\n * db.select().from(cars)\n *   .where(gt(cars.year, 2000))\n * ```\n *\n * @see gte for greater-than-or-equal\n */\nexport const gt: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} > ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is greater than\n * or equal to the second expression. Use `gt` to\n * test whether an expression is strictly greater\n * than another.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made on or after 2000.\n * db.select().from(cars)\n *   .where(gte(cars.year, 2000))\n * ```\n *\n * @see gt for a strictly greater-than condition\n */\nexport const gte: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} >= ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is less than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lt(cars.year, 2000))\n * ```\n *\n * @see lte for greater-than-or-equal\n */\nexport const lt: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} < ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is less than\n * or equal to the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lte(cars.year, 2000))\n * ```\n *\n * @see lt for a strictly less-than condition\n */\nexport const lte: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} <= ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test whether the first parameter, a column or expression,\n * has a value from a list passed as the second argument.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by Ford or GM.\n * db.select().from(cars)\n *   .where(inArray(cars.make, ['Ford', 'GM']))\n * ```\n *\n * @see notInArray for the inverse of this test\n */\nexport function inArray<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function inArray<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function inArray<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function inArray(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('inArray requires at least one value');\n\t\t}\n\t\treturn sql`${column} in ${values.map((v) => bindIfParam(v, column))}`;\n\t}\n\n\treturn sql`${column} in ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test whether the first parameter, a column or expression,\n * has a value that is not present in a list passed as the\n * second argument.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by any company except Ford or GM.\n * db.select().from(cars)\n *   .where(notInArray(cars.make, ['Ford', 'GM']))\n * ```\n *\n * @see inArray for the inverse of this test\n */\nexport function notInArray<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('notInArray requires at least one value');\n\t\t}\n\t\treturn sql`${column} not in ${values.map((v) => bindIfParam(v, column))}`;\n\t}\n\n\treturn sql`${column} not in ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test whether an expression is NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have no discontinuedAt date.\n * db.select().from(cars)\n *   .where(isNull(cars.discontinuedAt))\n * ```\n *\n * @see isNotNull for the inverse of this test\n */\nexport function isNull(value: SQLWrapper): SQL {\n\treturn sql`${value} is null`;\n}\n\n/**\n * Test whether an expression is not NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have been discontinued.\n * db.select().from(cars)\n *   .where(isNotNull(cars.discontinuedAt))\n * ```\n *\n * @see isNull for the inverse of this test\n */\nexport function isNotNull(value: SQLWrapper): SQL {\n\treturn sql`${value} is not null`;\n}\n\n/**\n * Test whether a subquery evaluates to have any rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column has a match in a cities\n * // table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     exists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see notExists for the inverse of this test\n */\nexport function exists(subquery: SQLWrapper): SQL {\n\treturn sql`exists ${subquery}`;\n}\n\n/**\n * Test whether a subquery doesn't include any result\n * rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column doesn't match\n * // a row in the cities table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     notExists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see exists for the inverse of this test\n */\nexport function notExists(subquery: SQLWrapper): SQL {\n\treturn sql`not exists ${subquery}`;\n}\n\n/**\n * Test whether an expression is between two values. This\n * is an easier way to express range tests, which would be\n * expressed mathematically as `x <= a <= y` but in SQL\n * would have to be like `a >= x AND a <= y`.\n *\n * Between is inclusive of the endpoints: if `column`\n * is equal to `min` or `max`, it will be TRUE.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made between 1990 and 2000\n * db.select().from(cars)\n *   .where(between(cars.year, 1990, 2000))\n * ```\n *\n * @see notBetween for the inverse of this test\n */\nexport function between<T>(\n\tcolumn: SQL.Aliased,\n\tmin: T | SQLWrapper,\n\tmax: T | SQLWrapper,\n): SQL;\nexport function between<TColumn extends AnyColumn>(\n\tcolumn: TColumn,\n\tmin: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\tmax: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n): SQL;\nexport function between<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tmin: unknown,\n\tmax: unknown,\n): SQL;\nexport function between(column: SQLWrapper, min: unknown, max: unknown): SQL {\n\treturn sql`${column} between ${bindIfParam(min, column)} and ${\n\t\tbindIfParam(\n\t\t\tmax,\n\t\t\tcolumn,\n\t\t)\n\t}`;\n}\n\n/**\n * Test whether an expression is not between two values.\n *\n * This, like `between`, includes its endpoints, so if\n * the `column` is equal to `min` or `max`, in this case\n * it will evaluate to FALSE.\n *\n * ## Examples\n *\n * ```ts\n * // Exclude cars made in the 1970s\n * db.select().from(cars)\n *   .where(notBetween(cars.year, 1970, 1979))\n * ```\n *\n * @see between for the inverse of this test\n */\nexport function notBetween<T>(\n\tcolumn: SQL.Aliased,\n\tmin: T | SQLWrapper,\n\tmax: T | SQLWrapper,\n): SQL;\nexport function notBetween<TColumn extends AnyColumn>(\n\tcolumn: TColumn,\n\tmin: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\tmax: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n): SQL;\nexport function notBetween<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tmin: unknown,\n\tmax: unknown,\n): SQL;\nexport function notBetween(\n\tcolumn: SQLWrapper,\n\tmin: unknown,\n\tmax: unknown,\n): SQL {\n\treturn sql`${column} not between ${\n\t\tbindIfParam(\n\t\t\tmin,\n\t\t\tcolumn,\n\t\t)\n\t} and ${bindIfParam(max, column)}`;\n}\n\n/**\n * Compare a column to a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(like(cars.name, '%Turbo%'))\n * ```\n *\n * @see ilike for a case-insensitive version of this condition\n */\nexport function like(column: Column, value: string | SQLWrapper): SQL {\n\treturn sql`${column} like ${value}`;\n}\n\n/**\n * The inverse of like - this tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"ROver\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see like for the inverse condition\n * @see notIlike for a case-insensitive version of this condition\n */\nexport function notLike(column: Column, value: string | SQLWrapper): SQL {\n\treturn sql`${column} not like ${value}`;\n}\n\n/**\n * Case-insensitively compare a column to a pattern,\n * which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * Unlike like, this performs a case-insensitive comparison.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(ilike(cars.name, '%Turbo%'))\n * ```\n *\n * @see like for a case-sensitive version of this condition\n */\nexport function ilike(column: Column, value: string | SQLWrapper): SQL {\n\treturn sql`${column} ilike ${value}`;\n}\n\n/**\n * The inverse of ilike - this case-insensitively tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"Rover\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see ilike for the inverse condition\n * @see notLike for a case-sensitive version of this condition\n */\nexport function notIlike(column: Column, value: string | SQLWrapper): SQL {\n\treturn sql`${column} not ilike ${value}`;\n}\n\n/**\n * Test that a column or expression contains all elements of\n * the list passed as the second argument.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\" and \"ORM\".\n * db.select().from(posts)\n *   .where(arrayContains(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContained to find if an array contains all elements of a column or expression\n * @see arrayOverlaps to find if a column or expression contains any elements of an array\n */\nexport function arrayContains<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContains<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContains<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayContains(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayContains requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} @> ${array}`;\n\t}\n\n\treturn sql`${column} @> ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test that the list passed as the second argument contains\n * all elements of a column or expression.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\", \"ORM\" or both,\n * // but filtering posts that have additional tags.\n * db.select().from(posts)\n *   .where(arrayContained(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContains to find if a column or expression contains all elements of an array\n * @see arrayOverlaps to find if a column or expression contains any elements of an array\n */\nexport function arrayContained<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContained<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContained<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayContained(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayContained requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} <@ ${array}`;\n\t}\n\n\treturn sql`${column} <@ ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test that a column or expression contains any elements of\n * the list passed as the second argument.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\", \"ORM\" or both.\n * db.select().from(posts)\n *   .where(arrayOverlaps(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContains to find if a column or expression contains all elements of an array\n * @see arrayContained to find if an array contains all elements of a column or expression\n */\nexport function arrayOverlaps<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayOverlaps<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayOverlaps<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayOverlaps(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayOverlaps requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} && ${array}`;\n\t}\n\n\treturn sql`${column} && ${bindIfParam(values, column)}`;\n}\n", "import type { AnyColumn } from '../../column.ts';\nimport type { SQL, SQLWrapper } from '../sql.ts';\nimport { sql } from '../sql.ts';\n\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in ascending\n * order. By the SQL standard, ascending order is the\n * default, so it is not usually necessary to specify\n * ascending sort order.\n *\n * ## Examples\n *\n * ```ts\n * // Return cars, starting with the oldest models\n * // and going in ascending order to the newest.\n * db.select().from(cars)\n *   .orderBy(asc(cars.year));\n * ```\n *\n * @see desc to sort in descending order\n */\nexport function asc(column: AnyColumn | SQLWrapper): SQL {\n\treturn sql`${column} asc`;\n}\n\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in descending\n * order.\n *\n * ## Examples\n *\n * ```ts\n * // Select users, with the most recently created\n * // records coming first.\n * db.select().from(users)\n *   .orderBy(desc(users.createdAt));\n * ```\n *\n * @see asc to sort in ascending order\n */\nexport function desc(column: AnyColumn | SQLWrapper): SQL {\n\treturn sql`${column} desc`;\n}\n", "import { type AnyTable, type InferModelFromColumns, isTable, Table } from '~/table.ts';\nimport { type AnyColumn, Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport { PrimaryKeyBuilder } from './pg-core/primary-keys.ts';\nimport {\n\tand,\n\tasc,\n\tbetween,\n\tdesc,\n\teq,\n\texists,\n\tgt,\n\tgte,\n\tilike,\n\tinArray,\n\tisNotNull,\n\tisNull,\n\tlike,\n\tlt,\n\tlte,\n\tne,\n\tnot,\n\tnotBetween,\n\tnotExists,\n\tnotIlike,\n\tnotInArray,\n\tnotLike,\n\tor,\n} from './sql/expressions/index.ts';\nimport { type Placeholder, SQL, sql } from './sql/sql.ts';\nimport type { Assume, ColumnsWithTable, Equal, Simplify, ValueOrArray } from './utils.ts';\n\nexport abstract class Relation<TTableName extends string = string> {\n\tstatic readonly [entityKind]: string = 'Relation';\n\n\tdeclare readonly $brand: 'Relation';\n\treadonly referencedTableName: TTableName;\n\tfieldName!: string;\n\n\tconstructor(\n\t\treadonly sourceTable: Table,\n\t\treadonly referencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly relationName: string | undefined,\n\t) {\n\t\tthis.referencedTableName = referencedTable[Table.Symbol.Name] as TTableName;\n\t}\n\n\tabstract withFieldName(fieldName: string): Relation<TTableName>;\n}\n\nexport class Relations<\n\tTTableName extends string = string,\n\tTConfig extends Record<string, Relation> = Record<string, Relation>,\n> {\n\tstatic readonly [entityKind]: string = 'Relations';\n\n\tdeclare readonly $brand: 'Relations';\n\n\tconstructor(\n\t\treadonly table: AnyTable<{ name: TTableName }>,\n\t\treadonly config: (helpers: TableRelationsHelpers<TTableName>) => TConfig,\n\t) {}\n}\n\nexport class One<\n\tTTableName extends string = string,\n\tTIsNullable extends boolean = boolean,\n> extends Relation<TTableName> {\n\tstatic readonly [entityKind]: string = 'One';\n\n\tdeclare protected $relationBrand: 'One';\n\n\tconstructor(\n\t\tsourceTable: Table,\n\t\treferencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly config:\n\t\t\t| RelationConfig<\n\t\t\t\tTTableName,\n\t\t\t\tstring,\n\t\t\t\tAnyColumn<{ tableName: TTableName }>[]\n\t\t\t>\n\t\t\t| undefined,\n\t\treadonly isNullable: TIsNullable,\n\t) {\n\t\tsuper(sourceTable, referencedTable, config?.relationName);\n\t}\n\n\twithFieldName(fieldName: string): One<TTableName> {\n\t\tconst relation = new One(\n\t\t\tthis.sourceTable,\n\t\t\tthis.referencedTable,\n\t\t\tthis.config,\n\t\t\tthis.isNullable,\n\t\t);\n\t\trelation.fieldName = fieldName;\n\t\treturn relation;\n\t}\n}\n\nexport class Many<TTableName extends string> extends Relation<TTableName> {\n\tstatic readonly [entityKind]: string = 'Many';\n\n\tdeclare protected $relationBrand: 'Many';\n\n\tconstructor(\n\t\tsourceTable: Table,\n\t\treferencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly config: { relationName: string } | undefined,\n\t) {\n\t\tsuper(sourceTable, referencedTable, config?.relationName);\n\t}\n\n\twithFieldName(fieldName: string): Many<TTableName> {\n\t\tconst relation = new Many(\n\t\t\tthis.sourceTable,\n\t\t\tthis.referencedTable,\n\t\t\tthis.config,\n\t\t);\n\t\trelation.fieldName = fieldName;\n\t\treturn relation;\n\t}\n}\n\nexport type TableRelationsKeysOnly<\n\tTSchema extends Record<string, unknown>,\n\tTTableName extends string,\n\tK extends keyof TSchema,\n> = TSchema[K] extends Relations<TTableName> ? K : never;\n\nexport type ExtractTableRelationsFromSchema<\n\tTSchema extends Record<string, unknown>,\n\tTTableName extends string,\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TSchema as TableRelationsKeysOnly<\n\t\t\t\tTSchema,\n\t\t\t\tTTableName,\n\t\t\t\tK\n\t\t\t>\n\t\t]: TSchema[K] extends Relations<TTableName, infer TConfig> ? TConfig : never;\n\t}\n>;\n\nexport type ExtractObjectValues<T> = T[keyof T];\n\nexport type ExtractRelationsFromTableExtraConfigSchema<\n\tTConfig extends unknown[],\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TConfig as TConfig[K] extends Relations<any> ? K\n\t\t\t\t: never\n\t\t]: TConfig[K] extends Relations<infer TRelationConfig> ? TRelationConfig\n\t\t\t: never;\n\t}\n>;\n\nexport function getOperators() {\n\treturn {\n\t\tand,\n\t\tbetween,\n\t\teq,\n\t\texists,\n\t\tgt,\n\t\tgte,\n\t\tilike,\n\t\tinArray,\n\t\tisNull,\n\t\tisNotNull,\n\t\tlike,\n\t\tlt,\n\t\tlte,\n\t\tne,\n\t\tnot,\n\t\tnotBetween,\n\t\tnotExists,\n\t\tnotLike,\n\t\tnotIlike,\n\t\tnotInArray,\n\t\tor,\n\t\tsql,\n\t};\n}\n\nexport type Operators = ReturnType<typeof getOperators>;\n\nexport function getOrderByOperators() {\n\treturn {\n\t\tsql,\n\t\tasc,\n\t\tdesc,\n\t};\n}\n\nexport type OrderByOperators = ReturnType<typeof getOrderByOperators>;\n\nexport type FindTableByDBName<\n\tTSchema extends TablesRelationalConfig,\n\tTTableName extends string,\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TSchema as TSchema[K]['dbName'] extends TTableName ? K\n\t\t\t\t: never\n\t\t]: TSchema[K];\n\t}\n>;\n\nexport type DBQueryConfig<\n\tTRelationType extends 'one' | 'many' = 'one' | 'many',\n\tTIsRoot extends boolean = boolean,\n\tTSchema extends TablesRelationalConfig = TablesRelationalConfig,\n\tTTableConfig extends TableRelationalConfig = TableRelationalConfig,\n> =\n\t& {\n\t\tcolumns?: {\n\t\t\t[K in keyof TTableConfig['columns']]?: boolean;\n\t\t};\n\t\twith?: {\n\t\t\t[K in keyof TTableConfig['relations']]?:\n\t\t\t\t| true\n\t\t\t\t| DBQueryConfig<\n\t\t\t\t\tTTableConfig['relations'][K] extends One ? 'one' : 'many',\n\t\t\t\t\tfalse,\n\t\t\t\t\tTSchema,\n\t\t\t\t\tFindTableByDBName<\n\t\t\t\t\t\tTSchema,\n\t\t\t\t\t\tTTableConfig['relations'][K]['referencedTableName']\n\t\t\t\t\t>\n\t\t\t\t>;\n\t\t};\n\t\textras?:\n\t\t\t| Record<string, SQL.Aliased>\n\t\t\t| ((\n\t\t\t\tfields: Simplify<\n\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t>,\n\t\t\t\toperators: { sql: Operators['sql'] },\n\t\t\t) => Record<string, SQL.Aliased>);\n\t}\n\t& (TRelationType extends 'many' ? \n\t\t\t& {\n\t\t\t\twhere?:\n\t\t\t\t\t| SQL\n\t\t\t\t\t| undefined\n\t\t\t\t\t| ((\n\t\t\t\t\t\tfields: Simplify<\n\t\t\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t\t\t>,\n\t\t\t\t\t\toperators: Operators,\n\t\t\t\t\t) => SQL | undefined);\n\t\t\t\torderBy?:\n\t\t\t\t\t| ValueOrArray<AnyColumn | SQL>\n\t\t\t\t\t| ((\n\t\t\t\t\t\tfields: Simplify<\n\t\t\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t\t\t>,\n\t\t\t\t\t\toperators: OrderByOperators,\n\t\t\t\t\t) => ValueOrArray<AnyColumn | SQL>);\n\t\t\t\tlimit?: number | Placeholder;\n\t\t\t}\n\t\t\t& (TIsRoot extends true ? {\n\t\t\t\t\toffset?: number | Placeholder;\n\t\t\t\t}\n\t\t\t\t: {})\n\t\t: {});\n\nexport interface TableRelationalConfig {\n\ttsName: string;\n\tdbName: string;\n\tcolumns: Record<string, Column>;\n\trelations: Record<string, Relation>;\n\tprimaryKey: AnyColumn[];\n\tschema?: string;\n}\n\nexport type TablesRelationalConfig = Record<string, TableRelationalConfig>;\n\nexport interface RelationalSchemaConfig<\n\tTSchema extends TablesRelationalConfig,\n> {\n\tfullSchema: Record<string, unknown>;\n\tschema: TSchema;\n\ttableNamesMap: Record<string, string>;\n}\n\nexport type ExtractTablesWithRelations<\n\tTSchema extends Record<string, unknown>,\n> = {\n\t[\n\t\tK in keyof TSchema as TSchema[K] extends Table ? K\n\t\t\t: never\n\t]: TSchema[K] extends Table ? {\n\t\t\ttsName: K & string;\n\t\t\tdbName: TSchema[K]['_']['name'];\n\t\t\tcolumns: TSchema[K]['_']['columns'];\n\t\t\trelations: ExtractTableRelationsFromSchema<\n\t\t\t\tTSchema,\n\t\t\t\tTSchema[K]['_']['name']\n\t\t\t>;\n\t\t\tprimaryKey: AnyColumn[];\n\t\t}\n\t\t: never;\n};\n\nexport type ReturnTypeOrValue<T> = T extends (...args: any[]) => infer R ? R\n\t: T;\n\nexport type BuildRelationResult<\n\tTSchema extends TablesRelationalConfig,\n\tTInclude,\n\tTRelations extends Record<string, Relation>,\n> = {\n\t[\n\t\tK in\n\t\t\t& NonUndefinedKeysOnly<TInclude>\n\t\t\t& keyof TRelations\n\t]: TRelations[K] extends infer TRel extends Relation ? BuildQueryResult<\n\t\t\tTSchema,\n\t\t\tFindTableByDBName<TSchema, TRel['referencedTableName']>,\n\t\t\tAssume<TInclude[K], true | Record<string, unknown>>\n\t\t> extends infer TResult ? TRel extends One ? \n\t\t\t\t\t| TResult\n\t\t\t\t\t| (Equal<TRel['isNullable'], false> extends true ? null : never)\n\t\t\t: TResult[]\n\t\t: never\n\t\t: never;\n};\n\nexport type NonUndefinedKeysOnly<T> =\n\t& ExtractObjectValues<\n\t\t{\n\t\t\t[K in keyof T as T[K] extends undefined ? never : K]: K;\n\t\t}\n\t>\n\t& keyof T;\n\nexport type BuildQueryResult<\n\tTSchema extends TablesRelationalConfig,\n\tTTableConfig extends TableRelationalConfig,\n\tTFullSelection extends true | Record<string, unknown>,\n> = Equal<TFullSelection, true> extends true ? InferModelFromColumns<TTableConfig['columns']>\n\t: TFullSelection extends Record<string, unknown> ? Simplify<\n\t\t\t& (TFullSelection['columns'] extends Record<string, unknown> ? InferModelFromColumns<\n\t\t\t\t\t{\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tK in Equal<\n\t\t\t\t\t\t\t\tExclude<\n\t\t\t\t\t\t\t\t\tTFullSelection['columns'][\n\t\t\t\t\t\t\t\t\t\t& keyof TFullSelection['columns']\n\t\t\t\t\t\t\t\t\t\t& keyof TTableConfig['columns']\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tundefined\n\t\t\t\t\t\t\t\t>,\n\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t\t> extends true ? Exclude<\n\t\t\t\t\t\t\t\t\tkeyof TTableConfig['columns'],\n\t\t\t\t\t\t\t\t\tNonUndefinedKeysOnly<TFullSelection['columns']>\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t: \n\t\t\t\t\t\t\t\t\t& {\n\t\t\t\t\t\t\t\t\t\t[K in keyof TFullSelection['columns']]: Equal<\n\t\t\t\t\t\t\t\t\t\t\tTFullSelection['columns'][K],\n\t\t\t\t\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t\t\t\t\t> extends true ? K\n\t\t\t\t\t\t\t\t\t\t\t: never;\n\t\t\t\t\t\t\t\t\t}[keyof TFullSelection['columns']]\n\t\t\t\t\t\t\t\t\t& keyof TTableConfig['columns']\n\t\t\t\t\t\t]: TTableConfig['columns'][K];\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t: InferModelFromColumns<TTableConfig['columns']>)\n\t\t\t& (TFullSelection['extras'] extends\n\t\t\t\t| Record<string, unknown>\n\t\t\t\t| ((...args: any[]) => Record<string, unknown>) ? {\n\t\t\t\t\t[\n\t\t\t\t\t\tK in NonUndefinedKeysOnly<\n\t\t\t\t\t\t\tReturnTypeOrValue<TFullSelection['extras']>\n\t\t\t\t\t\t>\n\t\t\t\t\t]: Assume<\n\t\t\t\t\t\tReturnTypeOrValue<TFullSelection['extras']>[K],\n\t\t\t\t\t\tSQL.Aliased\n\t\t\t\t\t>['_']['type'];\n\t\t\t\t}\n\t\t\t\t: {})\n\t\t\t& (TFullSelection['with'] extends Record<string, unknown> ? BuildRelationResult<\n\t\t\t\t\tTSchema,\n\t\t\t\t\tTFullSelection['with'],\n\t\t\t\t\tTTableConfig['relations']\n\t\t\t\t>\n\t\t\t\t: {})\n\t\t>\n\t: never;\n\nexport interface RelationConfig<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends AnyColumn<{ tableName: TTableName }>[],\n> {\n\trelationName?: string;\n\tfields: TColumns;\n\treferences: ColumnsWithTable<TTableName, TForeignTableName, TColumns>;\n}\n\nexport function extractTablesRelationalConfig<\n\tTTables extends TablesRelationalConfig,\n>(\n\tschema: Record<string, unknown>,\n\tconfigHelpers: (table: Table) => any,\n): { tables: TTables; tableNamesMap: Record<string, string> } {\n\tif (\n\t\tObject.keys(schema).length === 1\n\t\t&& 'default' in schema\n\t\t&& !is(schema['default'], Table)\n\t) {\n\t\tschema = schema['default'] as Record<string, unknown>;\n\t}\n\n\t// table DB name -> schema table key\n\tconst tableNamesMap: Record<string, string> = {};\n\t// Table relations found before their tables - need to buffer them until we know the schema table key\n\tconst relationsBuffer: Record<\n\t\tstring,\n\t\t{ relations: Record<string, Relation>; primaryKey?: AnyColumn[] }\n\t> = {};\n\tconst tablesConfig: TablesRelationalConfig = {};\n\tfor (const [key, value] of Object.entries(schema)) {\n\t\tif (isTable(value)) {\n\t\t\tconst dbName = value[Table.Symbol.Name];\n\t\t\tconst bufferedRelations = relationsBuffer[dbName];\n\t\t\ttableNamesMap[dbName] = key;\n\t\t\ttablesConfig[key] = {\n\t\t\t\ttsName: key,\n\t\t\t\tdbName: value[Table.Symbol.Name],\n\t\t\t\tschema: value[Table.Symbol.Schema],\n\t\t\t\tcolumns: value[Table.Symbol.Columns],\n\t\t\t\trelations: bufferedRelations?.relations ?? {},\n\t\t\t\tprimaryKey: bufferedRelations?.primaryKey ?? [],\n\t\t\t};\n\n\t\t\t// Fill in primary keys\n\t\t\tfor (\n\t\t\t\tconst column of Object.values(\n\t\t\t\t\t(value as Table)[Table.Symbol.Columns],\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tif (column.primary) {\n\t\t\t\t\ttablesConfig[key]!.primaryKey.push(column);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst extraConfig = value[Table.Symbol.ExtraConfigBuilder]?.(value);\n\t\t\tif (extraConfig) {\n\t\t\t\tfor (const configEntry of Object.values(extraConfig)) {\n\t\t\t\t\tif (is(configEntry, PrimaryKeyBuilder)) {\n\t\t\t\t\t\ttablesConfig[key]!.primaryKey.push(...configEntry.columns);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (is(value, Relations)) {\n\t\t\tconst dbName: string = value.table[Table.Symbol.Name];\n\t\t\tconst tableName = tableNamesMap[dbName];\n\t\t\tconst relations: Record<string, Relation> = value.config(\n\t\t\t\tconfigHelpers(value.table),\n\t\t\t);\n\t\t\tlet primaryKey: AnyColumn[] | undefined;\n\n\t\t\tfor (const [relationName, relation] of Object.entries(relations)) {\n\t\t\t\tif (tableName) {\n\t\t\t\t\tconst tableConfig = tablesConfig[tableName]!;\n\t\t\t\t\ttableConfig.relations[relationName] = relation;\n\t\t\t\t\tif (primaryKey) {\n\t\t\t\t\t\ttableConfig.primaryKey.push(...primaryKey);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!(dbName in relationsBuffer)) {\n\t\t\t\t\t\trelationsBuffer[dbName] = {\n\t\t\t\t\t\t\trelations: {},\n\t\t\t\t\t\t\tprimaryKey,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\trelationsBuffer[dbName]!.relations[relationName] = relation;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { tables: tablesConfig as TTables, tableNamesMap };\n}\n\nexport function relations<\n\tTTableName extends string,\n\tTRelations extends Record<string, Relation<any>>,\n>(\n\ttable: AnyTable<{ name: TTableName }>,\n\trelations: (helpers: TableRelationsHelpers<TTableName>) => TRelations,\n): Relations<TTableName, TRelations> {\n\treturn new Relations<TTableName, TRelations>(\n\t\ttable,\n\t\t(helpers: TableRelationsHelpers<TTableName>) =>\n\t\t\tObject.fromEntries(\n\t\t\t\tObject.entries(relations(helpers)).map(([key, value]) => [\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue.withFieldName(key),\n\t\t\t\t]),\n\t\t\t) as TRelations,\n\t);\n}\n\nexport function createOne<TTableName extends string>(sourceTable: Table) {\n\treturn function one<\n\t\tTForeignTable extends Table,\n\t\tTColumns extends [\n\t\t\tAnyColumn<{ tableName: TTableName }>,\n\t\t\t...AnyColumn<{ tableName: TTableName }>[],\n\t\t],\n\t>(\n\t\ttable: TForeignTable,\n\t\tconfig?: RelationConfig<TTableName, TForeignTable['_']['name'], TColumns>,\n\t): One<\n\t\tTForeignTable['_']['name'],\n\t\tEqual<TColumns[number]['_']['notNull'], true>\n\t> {\n\t\treturn new One(\n\t\t\tsourceTable,\n\t\t\ttable,\n\t\t\tconfig,\n\t\t\t(config?.fields.reduce<boolean>((res, f) => res && f.notNull, true)\n\t\t\t\t?? false) as Equal<TColumns[number]['_']['notNull'], true>,\n\t\t);\n\t};\n}\n\nexport function createMany(sourceTable: Table) {\n\treturn function many<TForeignTable extends Table>(\n\t\treferencedTable: TForeignTable,\n\t\tconfig?: { relationName: string },\n\t): Many<TForeignTable['_']['name']> {\n\t\treturn new Many(sourceTable, referencedTable, config);\n\t};\n}\n\nexport interface NormalizedRelation {\n\tfields: AnyColumn[];\n\treferences: AnyColumn[];\n}\n\nexport function normalizeRelation(\n\tschema: TablesRelationalConfig,\n\ttableNamesMap: Record<string, string>,\n\trelation: Relation,\n): NormalizedRelation {\n\tif (is(relation, One) && relation.config) {\n\t\treturn {\n\t\t\tfields: relation.config.fields,\n\t\t\treferences: relation.config.references,\n\t\t};\n\t}\n\n\tconst referencedTableTsName = tableNamesMap[relation.referencedTable[Table.Symbol.Name]];\n\tif (!referencedTableTsName) {\n\t\tthrow new Error(\n\t\t\t`Table \"${relation.referencedTable[Table.Symbol.Name]}\" not found in schema`,\n\t\t);\n\t}\n\n\tconst referencedTableConfig = schema[referencedTableTsName];\n\tif (!referencedTableConfig) {\n\t\tthrow new Error(`Table \"${referencedTableTsName}\" not found in schema`);\n\t}\n\n\tconst sourceTable = relation.sourceTable;\n\tconst sourceTableTsName = tableNamesMap[sourceTable[Table.Symbol.Name]];\n\tif (!sourceTableTsName) {\n\t\tthrow new Error(\n\t\t\t`Table \"${sourceTable[Table.Symbol.Name]}\" not found in schema`,\n\t\t);\n\t}\n\n\tconst reverseRelations: Relation[] = [];\n\tfor (\n\t\tconst referencedTableRelation of Object.values(\n\t\t\treferencedTableConfig.relations,\n\t\t)\n\t) {\n\t\tif (\n\t\t\t(relation.relationName\n\t\t\t\t&& relation !== referencedTableRelation\n\t\t\t\t&& referencedTableRelation.relationName === relation.relationName)\n\t\t\t|| (!relation.relationName\n\t\t\t\t&& referencedTableRelation.referencedTable === relation.sourceTable)\n\t\t) {\n\t\t\treverseRelations.push(referencedTableRelation);\n\t\t}\n\t}\n\n\tif (reverseRelations.length > 1) {\n\t\tthrow relation.relationName\n\t\t\t? new Error(\n\t\t\t\t`There are multiple relations with name \"${relation.relationName}\" in table \"${referencedTableTsName}\"`,\n\t\t\t)\n\t\t\t: new Error(\n\t\t\t\t`There are multiple relations between \"${referencedTableTsName}\" and \"${\n\t\t\t\t\trelation.sourceTable[Table.Symbol.Name]\n\t\t\t\t}\". Please specify relation name`,\n\t\t\t);\n\t}\n\n\tif (\n\t\treverseRelations[0]\n\t\t&& is(reverseRelations[0], One)\n\t\t&& reverseRelations[0].config\n\t) {\n\t\treturn {\n\t\t\tfields: reverseRelations[0].config.references,\n\t\t\treferences: reverseRelations[0].config.fields,\n\t\t};\n\t}\n\n\tthrow new Error(\n\t\t`There is not enough information to infer relation \"${sourceTableTsName}.${relation.fieldName}\"`,\n\t);\n}\n\nexport function createTableRelationsHelpers<TTableName extends string>(\n\tsourceTable: AnyTable<{ name: TTableName }>,\n) {\n\treturn {\n\t\tone: createOne<TTableName>(sourceTable),\n\t\tmany: createMany(sourceTable),\n\t};\n}\n\nexport type TableRelationsHelpers<TTableName extends string> = ReturnType<\n\ttypeof createTableRelationsHelpers<TTableName>\n>;\n\nexport interface BuildRelationalQueryResult<\n\tTTable extends Table = Table,\n\tTColumn extends Column = Column,\n> {\n\ttableTsKey: string;\n\tselection: {\n\t\tdbKey: string;\n\t\ttsKey: string;\n\t\tfield: TColumn | SQL | SQL.Aliased;\n\t\trelationTableTsKey: string | undefined;\n\t\tisJson: boolean;\n\t\tisExtra?: boolean;\n\t\tselection: BuildRelationalQueryResult<TTable>['selection'];\n\t}[];\n\tsql: TTable | SQL;\n}\n\nexport function mapRelationalRow(\n\ttablesConfig: TablesRelationalConfig,\n\ttableConfig: TableRelationalConfig,\n\trow: unknown[],\n\tbuildQueryResultSelection: BuildRelationalQueryResult['selection'],\n\tmapColumnValue: (value: unknown) => unknown = (value) => value,\n): Record<string, unknown> {\n\tconst result: Record<string, unknown> = {};\n\n\tfor (\n\t\tconst [\n\t\t\tselectionItemIndex,\n\t\t\tselectionItem,\n\t\t] of buildQueryResultSelection.entries()\n\t) {\n\t\tif (selectionItem.isJson) {\n\t\t\tconst relation = tableConfig.relations[selectionItem.tsKey]!;\n\t\t\tconst rawSubRows = row[selectionItemIndex] as\n\t\t\t\t| unknown[]\n\t\t\t\t| null\n\t\t\t\t| [null]\n\t\t\t\t| string;\n\t\t\tconst subRows = typeof rawSubRows === 'string'\n\t\t\t\t? (JSON.parse(rawSubRows) as unknown[])\n\t\t\t\t: rawSubRows;\n\t\t\tresult[selectionItem.tsKey] = is(relation, One)\n\t\t\t\t? subRows\n\t\t\t\t\t&& mapRelationalRow(\n\t\t\t\t\t\ttablesConfig,\n\t\t\t\t\t\ttablesConfig[selectionItem.relationTableTsKey!]!,\n\t\t\t\t\t\tsubRows,\n\t\t\t\t\t\tselectionItem.selection,\n\t\t\t\t\t\tmapColumnValue,\n\t\t\t\t\t)\n\t\t\t\t: (subRows as unknown[][]).map((subRow) =>\n\t\t\t\t\tmapRelationalRow(\n\t\t\t\t\t\ttablesConfig,\n\t\t\t\t\t\ttablesConfig[selectionItem.relationTableTsKey!]!,\n\t\t\t\t\t\tsubRow,\n\t\t\t\t\t\tselectionItem.selection,\n\t\t\t\t\t\tmapColumnValue,\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t} else {\n\t\t\tconst value = mapColumnValue(row[selectionItemIndex]);\n\t\t\tconst field = selectionItem.field!;\n\t\t\tlet decoder;\n\t\t\tif (is(field, Column)) {\n\t\t\t\tdecoder = field;\n\t\t\t} else if (is(field, SQL)) {\n\t\t\t\tdecoder = field.decoder;\n\t\t\t} else {\n\t\t\t\tdecoder = field.sql.decoder;\n\t\t\t}\n\t\t\tresult[selectionItem.tsKey] = value === null ? null : decoder.mapFromDriverValue(value);\n\t\t}\n\t}\n\n\treturn result;\n}\n", "import { entityKind } from './entity.ts';\nimport type { SQL, SQLWrapper, ColumnsSelection } from './sql/sql.ts';\n\nexport const SubqueryConfig = Symbol.for('drizzle:SubqueryConfig');\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface Subquery<TAlias extends string = string, TSelectedFields = unknown> extends SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\nexport class Subquery<TAlias extends string = string, TSelectedFields = unknown> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Subquery';\n\n\tdeclare _: {\n\t\tbrand: 'Subquery';\n\t\tselectedFields: TSelectedFields;\n\t\talias: TAlias;\n\t};\n\n\t/** @internal */\n\t[SubqueryConfig]: {\n\t\tsql: SQL;\n\t\tselection: ColumnsSelection;\n\t\talias: string;\n\t\tisWith: boolean;\n\t};\n\n\tconstructor(sql: SQL, selection: Record<string, unknown>, alias: string, isWith = false) {\n\t\tthis[SubqueryConfig] = {\n\t\t\tsql,\n\t\t\tselection,\n\t\t\talias,\n\t\t\tisWith,\n\t\t};\n\t}\n\n\t// getSQL(): SQL<unknown> {\n\t// \treturn new SQL([this]);\n\t// }\n}\n\nexport class WithSubquery<TAlias extends string = string, TSelection = unknown> extends Subquery<TAlias, TSelection> {\n\tstatic readonly [entityKind]: string = 'WithSubquery';\n}", "export function iife<T extends unknown[], U>(fn: (...args: T) => U, ...args: T): U {\n\treturn fn(...args);\n}", "// package.json\nvar version = \"0.29.3\";\n\n// src/version.ts\nvar compatibilityVersion = 6;\nexport {\n  compatibilityVersion,\n  version as npmVersion\n};\n", "import type { Span, Tracer } from '@opentelemetry/api';\nimport { iife } from '~/tracing-utils.ts';\nimport { npmVersion } from '~/version.ts';\n\nlet otel: typeof import('@opentelemetry/api') | undefined;\nlet rawTracer: Tracer | undefined;\n// try {\n// \totel = await import('@opentelemetry/api');\n// } catch (err: any) {\n// \tif (err.code !== 'MODULE_NOT_FOUND' && err.code !== 'ERR_MODULE_NOT_FOUND') {\n// \t\tthrow err;\n// \t}\n// }\n\ntype SpanName =\n\t| 'drizzle.operation'\n\t| 'drizzle.prepareQuery'\n\t| 'drizzle.buildSQL'\n\t| 'drizzle.execute'\n\t| 'drizzle.driver.execute'\n\t| 'drizzle.mapResponse';\n\n/** @internal */\nexport const tracer = {\n\tstartActiveSpan<F extends (span?: Span) => unknown>(name: SpanName, fn: F): ReturnType<F> {\n\t\tif (!otel) {\n\t\t\treturn fn() as ReturnType<F>;\n\t\t}\n\n\t\tif (!rawTracer) {\n\t\t\trawTracer = otel.trace.getTracer('drizzle-orm', npmVersion);\n\t\t}\n\n\t\treturn iife(\n\t\t\t(otel, rawTracer) =>\n\t\t\t\trawTracer.startActiveSpan(\n\t\t\t\t\tname,\n\t\t\t\t\t((span: Span) => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treturn fn(span);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tspan.setStatus({\n\t\t\t\t\t\t\t\tcode: otel.SpanStatusCode.ERROR,\n\t\t\t\t\t\t\t\tmessage: e instanceof Error ? e.message : 'Unknown error', // eslint-disable-line no-instanceof/no-instanceof\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tspan.end();\n\t\t\t\t\t\t}\n\t\t\t\t\t}) as F,\n\t\t\t\t),\n\t\t\totel,\n\t\t\trawTracer,\n\t\t);\n\t},\n};\n", "export const ViewBaseConfig = Symbol.for('drizzle:ViewBaseConfig');\n", "import { entityKind, is } from '~/entity.ts';\nimport { Relation } from '~/relations.ts';\nimport { Subquery, SubqueryConfig } from '~/subquery.ts';\nimport { tracer } from '~/tracing.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { AnyColumn } from '../column.ts';\nimport { Column } from '../column.ts';\nimport { Table } from '../table.ts';\nimport type { SelectedFields } from '~/operations.ts';\n\n/**\n * This class is used to indicate a primitive param value that is used in `sql` tag.\n * It is only used on type level and is never instantiated at runtime.\n * If you see a value of this type in the code, its runtime value is actually the primitive param value.\n */\nexport class FakePrimitiveParam {\n\tstatic readonly [entityKind]: string = 'FakePrimitiveParam';\n}\n\nexport type Chunk =\n\t| string\n\t| Table\n\t| View\n\t| AnyColumn\n\t| Name\n\t| Param\n\t| Placeholder\n\t| SQL;\n\nexport interface BuildQueryConfig {\n\tescapeName(name: string): string;\n\tescapeParam(num: number, value: unknown): string;\n\tescapeString(str: string): string;\n\tprepareTyping?: (encoder: DriverValueEncoder<unknown, unknown>) => QueryTypingsValue;\n\tparamStartIndex?: { value: number };\n\tinlineParams?: boolean;\n}\n\nexport type QueryTypingsValue = 'json' | 'decimal' | 'time' | 'timestamp' | 'uuid' | 'date' | 'none';\n\nexport interface Query {\n\tsql: string;\n\tparams: unknown[];\n}\n\nexport interface QueryWithTypings extends Query {\n\ttypings?: QueryTypingsValue[];\n}\n\n/**\n * Any value that implements the `getSQL` method. The implementations include:\n * - `Table`\n * - `Column`\n * - `View`\n * - `Subquery`\n * - `SQL`\n * - `SQL.Aliased`\n * - `Placeholder`\n * - `Param`\n */\nexport interface SQLWrapper {\n\tgetSQL(): SQL;\n}\n\nexport function isSQLWrapper(value: unknown): value is SQLWrapper {\n\treturn typeof value === 'object' && value !== null && 'getSQL' in value\n\t\t&& typeof (value as any).getSQL === 'function';\n}\n\nfunction mergeQueries(queries: QueryWithTypings[]): QueryWithTypings {\n\tconst result: QueryWithTypings = { sql: '', params: [] };\n\tfor (const query of queries) {\n\t\tresult.sql += query.sql;\n\t\tresult.params.push(...query.params);\n\t\tif (query.typings?.length) {\n\t\t\tif (!result.typings) {\n\t\t\t\tresult.typings = [];\n\t\t\t}\n\t\t\tresult.typings.push(...query.typings);\n\t\t}\n\t}\n\treturn result;\n}\n\nexport class StringChunk implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'StringChunk';\n\n\treadonly value: string[];\n\n\tconstructor(value: string | string[]) {\n\t\tthis.value = Array.isArray(value) ? value : [value];\n\t}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\nexport class SQL<T = unknown> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'SQL';\n\n\tdeclare _: {\n\t\tbrand: 'SQL';\n\t\ttype: T;\n\t};\n\n\t/** @internal */\n\tdecoder: DriverValueDecoder<T, any> = noopDecoder;\n\tprivate shouldInlineParams = false;\n\n\tconstructor(readonly queryChunks: SQLChunk[]) {}\n\n\tappend(query: SQL): this {\n\t\tthis.queryChunks.push(...query.queryChunks);\n\t\treturn this;\n\t}\n\n\ttoQuery(config: BuildQueryConfig): QueryWithTypings {\n\t\treturn tracer.startActiveSpan('drizzle.buildSQL', (span) => {\n\t\t\tconst query = this.buildQueryFromSourceParams(this.queryChunks, config);\n\t\t\tspan?.setAttributes({\n\t\t\t\t'drizzle.query.text': query.sql,\n\t\t\t\t'drizzle.query.params': JSON.stringify(query.params),\n\t\t\t});\n\t\t\treturn query;\n\t\t});\n\t}\n\n\tbuildQueryFromSourceParams(chunks: SQLChunk[], _config: BuildQueryConfig): Query {\n\t\tconst config = Object.assign({}, _config, {\n\t\t\tinlineParams: _config.inlineParams || this.shouldInlineParams,\n\t\t\tparamStartIndex: _config.paramStartIndex || { value: 0 },\n\t\t});\n\n\t\tconst {\n\t\t\tescapeName,\n\t\t\tescapeParam,\n\t\t\tprepareTyping,\n\t\t\tinlineParams,\n\t\t\tparamStartIndex,\n\t\t} = config;\n\n\t\treturn mergeQueries(chunks.map((chunk): QueryWithTypings => {\n\t\t\tif (is(chunk, StringChunk)) {\n\t\t\t\treturn { sql: chunk.value.join(''), params: [] };\n\t\t\t}\n\n\t\t\tif (is(chunk, Name)) {\n\t\t\t\treturn { sql: escapeName(chunk.value), params: [] };\n\t\t\t}\n\n\t\t\tif (chunk === undefined) {\n\t\t\t\treturn { sql: '', params: [] };\n\t\t\t}\n\n\t\t\tif (Array.isArray(chunk)) {\n\t\t\t\tconst result: SQLChunk[] = [new StringChunk('(')];\n\t\t\t\tfor (const [i, p] of chunk.entries()) {\n\t\t\t\t\tresult.push(p);\n\t\t\t\t\tif (i < chunk.length - 1) {\n\t\t\t\t\t\tresult.push(new StringChunk(', '));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult.push(new StringChunk(')'));\n\t\t\t\treturn this.buildQueryFromSourceParams(result, config);\n\t\t\t}\n\n\t\t\tif (is(chunk, SQL)) {\n\t\t\t\treturn this.buildQueryFromSourceParams(chunk.queryChunks, {\n\t\t\t\t\t...config,\n\t\t\t\t\tinlineParams: inlineParams || chunk.shouldInlineParams,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (is(chunk, Table)) {\n\t\t\t\tconst schemaName = chunk[Table.Symbol.Schema];\n\t\t\t\tconst tableName = chunk[Table.Symbol.Name];\n\t\t\t\treturn {\n\t\t\t\t\tsql: schemaName === undefined\n\t\t\t\t\t\t? escapeName(tableName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(tableName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, Column)) {\n\t\t\t\treturn { sql: escapeName(chunk.table[Table.Symbol.Name]) + '.' + escapeName(chunk.name), params: [] };\n\t\t\t}\n\n\t\t\tif (is(chunk, View)) {\n\t\t\t\tconst schemaName = chunk[ViewBaseConfig].schema;\n\t\t\t\tconst viewName = chunk[ViewBaseConfig].name;\n\t\t\t\treturn {\n\t\t\t\t\tsql: schemaName === undefined\n\t\t\t\t\t\t? escapeName(viewName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(viewName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, Param)) {\n\t\t\t\tconst mappedValue = (chunk.value === null) ? null : chunk.encoder.mapToDriverValue(chunk.value);\n\n\t\t\t\tif (is(mappedValue, SQL)) {\n\t\t\t\t\treturn this.buildQueryFromSourceParams([mappedValue], config);\n\t\t\t\t}\n\n\t\t\t\tif (inlineParams) {\n\t\t\t\t\treturn { sql: this.mapInlineParam(mappedValue, config), params: [] };\n\t\t\t\t}\n\n\t\t\t\tlet typings: QueryTypingsValue[] | undefined;\n\t\t\t\tif (prepareTyping !== undefined) {\n\t\t\t\t\ttypings = [prepareTyping(chunk.encoder)];\n\t\t\t\t}\n\n\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, mappedValue), params: [mappedValue], typings };\n\t\t\t}\n\n\t\t\tif (is(chunk, Placeholder)) {\n\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk] };\n\t\t\t}\n\n\t\t\tif (is(chunk, SQL.Aliased) && chunk.fieldAlias !== undefined) {\n\t\t\t\treturn { sql: escapeName(chunk.fieldAlias), params: [] };\n\t\t\t}\n\n\t\t\tif (is(chunk, Subquery)) {\n\t\t\t\tif (chunk[SubqueryConfig].isWith) {\n\t\t\t\t\treturn { sql: escapeName(chunk[SubqueryConfig].alias), params: [] };\n\t\t\t\t}\n\t\t\t\treturn this.buildQueryFromSourceParams([\n\t\t\t\t\tnew StringChunk('('),\n\t\t\t\t\tchunk[SubqueryConfig].sql,\n\t\t\t\t\tnew StringChunk(') '),\n\t\t\t\t\tnew Name(chunk[SubqueryConfig].alias),\n\t\t\t\t], config);\n\t\t\t}\n\n\t\t\t// if (is(chunk, Placeholder)) {\n\t\t\t// \treturn {sql: escapeParam}\n\n\t\t\tif (isSQLWrapper(chunk)) {\n\t\t\t\treturn this.buildQueryFromSourceParams([\n\t\t\t\t\tnew StringChunk('('),\n\t\t\t\t\tchunk.getSQL(),\n\t\t\t\t\tnew StringChunk(')'),\n\t\t\t\t], config);\n\t\t\t}\n\n\t\t\tif (is(chunk, Relation)) {\n\t\t\t\treturn this.buildQueryFromSourceParams([\n\t\t\t\t\tchunk.sourceTable,\n\t\t\t\t\tnew StringChunk('.'),\n\t\t\t\t\tsql.identifier(chunk.fieldName),\n\t\t\t\t], config);\n\t\t\t}\n\n\t\t\tif (inlineParams) {\n\t\t\t\treturn { sql: this.mapInlineParam(chunk, config), params: [] };\n\t\t\t}\n\n\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk] };\n\t\t}));\n\t}\n\n\tprivate mapInlineParam(\n\t\tchunk: unknown,\n\t\t{ escapeString }: BuildQueryConfig,\n\t): string {\n\t\tif (chunk === null) {\n\t\t\treturn 'null';\n\t\t}\n\t\tif (typeof chunk === 'number' || typeof chunk === 'boolean') {\n\t\t\treturn chunk.toString();\n\t\t}\n\t\tif (typeof chunk === 'string') {\n\t\t\treturn escapeString(chunk);\n\t\t}\n\t\tif (typeof chunk === 'object') {\n\t\t\tconst mappedValueAsString = chunk.toString();\n\t\t\tif (mappedValueAsString === '[object Object]') {\n\t\t\t\treturn escapeString(JSON.stringify(chunk));\n\t\t\t}\n\t\t\treturn escapeString(mappedValueAsString);\n\t\t}\n\t\tthrow new Error('Unexpected param value: ' + chunk);\n\t}\n\n\tgetSQL(): SQL {\n\t\treturn this;\n\t}\n\n\tas(alias: string): SQL.Aliased<T>;\n\t/**\n\t * @deprecated\n\t * Use ``sql<DataType>`query`.as(alias)`` instead.\n\t */\n\tas<TData>(): SQL<TData>;\n\t/**\n\t * @deprecated\n\t * Use ``sql<DataType>`query`.as(alias)`` instead.\n\t */\n\tas<TData>(alias: string): SQL.Aliased<TData>;\n\tas(alias?: string): SQL<T> | SQL.Aliased<T> {\n\t\t// TODO: remove with deprecated overloads\n\t\tif (alias === undefined) {\n\t\t\treturn this;\n\t\t}\n\n\t\treturn new SQL.Aliased(this, alias);\n\t}\n\n\tmapWith<\n\t\tTDecoder extends\n\t\t\t| DriverValueDecoder<any, any>\n\t\t\t| DriverValueDecoder<any, any>['mapFromDriverValue'],\n\t>(decoder: TDecoder): SQL<GetDecoderResult<TDecoder>> {\n\t\tthis.decoder = typeof decoder === 'function' ? { mapFromDriverValue: decoder } : decoder;\n\t\treturn this as SQL<GetDecoderResult<TDecoder>>;\n\t}\n\n\tinlineParams(): this {\n\t\tthis.shouldInlineParams = true;\n\t\treturn this;\n\t}\n}\n\nexport type GetDecoderResult<T> = T extends Column ? T['_']['data'] : T extends\n\t| DriverValueDecoder<infer TData, any>\n\t| DriverValueDecoder<infer TData, any>['mapFromDriverValue'] ? TData\n: never;\n\n/**\n * Any DB name (table, column, index etc.)\n */\nexport class Name implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Name';\n\n\tprotected brand!: 'Name';\n\n\tconstructor(readonly value: string) {}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/**\n * Any DB name (table, column, index etc.)\n * @deprecated Use `sql.identifier` instead.\n */\nexport function name(value: string): Name {\n\treturn new Name(value);\n}\n\nexport interface DriverValueDecoder<TData, TDriverParam> {\n\tmapFromDriverValue(value: TDriverParam): TData;\n}\n\nexport interface DriverValueEncoder<TData, TDriverParam> {\n\tmapToDriverValue(value: TData): TDriverParam | SQL;\n}\n\nexport function isDriverValueEncoder(value: unknown): value is DriverValueEncoder<any, any> {\n\treturn typeof value === 'object' && value !== null && 'mapToDriverValue' in value\n\t\t&& typeof (value as any).mapToDriverValue === 'function';\n}\n\nexport const noopDecoder: DriverValueDecoder<any, any> = {\n\tmapFromDriverValue: (value) => value,\n};\n\nexport const noopEncoder: DriverValueEncoder<any, any> = {\n\tmapToDriverValue: (value) => value,\n};\n\nexport interface DriverValueMapper<TData, TDriverParam>\n\textends DriverValueDecoder<TData, TDriverParam>, DriverValueEncoder<TData, TDriverParam>\n{}\n\nexport const noopMapper: DriverValueMapper<any, any> = {\n\t...noopDecoder,\n\t...noopEncoder,\n};\n\n/** Parameter value that is optionally bound to an encoder (for example, a column). */\nexport class Param<TDataType = unknown, TDriverParamType = TDataType> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Param';\n\n\tprotected brand!: 'BoundParamValue';\n\n\t/**\n\t * @param value - Parameter value\n\t * @param encoder - Encoder to convert the value to a driver parameter\n\t */\n\tconstructor(\n\t\treadonly value: TDataType,\n\t\treadonly encoder: DriverValueEncoder<TDataType, TDriverParamType> = noopEncoder,\n\t) {}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/** @deprecated Use `sql.param` instead. */\nexport function param<TData, TDriver>(\n\tvalue: TData,\n\tencoder?: DriverValueEncoder<TData, TDriver>,\n): Param<TData, TDriver> {\n\treturn new Param(value, encoder);\n}\n\n/**\n * Anything that can be passed to the `` sql`...` `` tagged function.\n */\nexport type SQLChunk =\n\t| StringChunk\n\t| SQLChunk[]\n\t| SQLWrapper\n\t| SQL\n\t| Table\n\t| View\n\t| Subquery\n\t| AnyColumn\n\t| Param\n\t| Name\n\t| undefined\n\t| FakePrimitiveParam\n\t| Placeholder;\n\nexport function sql<T>(strings: TemplateStringsArray, ...params: any[]): SQL<T>;\n/*\n\tThe type of `params` is specified as `SQLSourceParam[]`, but that's slightly incorrect -\n\tin runtime, users won't pass `FakePrimitiveParam` instances as `params` - they will pass primitive values\n\twhich will be wrapped in `Param` using `buildChunksFromParam(...)`. That's why the overload\n\tspecify `params` as `any[]` and not as `SQLSourceParam[]`. This type is used to make our lives easier and\n\tthe type checker happy.\n*/\nexport function sql(strings: TemplateStringsArray, ...params: SQLChunk[]): SQL {\n\tconst queryChunks: SQLChunk[] = [];\n\tif (params.length > 0 || (strings.length > 0 && strings[0] !== '')) {\n\t\tqueryChunks.push(new StringChunk(strings[0]!));\n\t}\n\tfor (const [paramIndex, param] of params.entries()) {\n\t\tqueryChunks.push(param, new StringChunk(strings[paramIndex + 1]!));\n\t}\n\n\treturn new SQL(queryChunks);\n}\n\nexport namespace sql {\n\texport function empty(): SQL {\n\t\treturn new SQL([]);\n\t}\n\n\t/** @deprecated - use `sql.join()` */\n\texport function fromList(list: SQLChunk[]): SQL {\n\t\treturn new SQL(list);\n\t}\n\n\t/**\n\t * Convenience function to create an SQL query from a raw string.\n\t * @param str The raw SQL query string.\n\t */\n\texport function raw(str: string): SQL {\n\t\treturn new SQL([new StringChunk(str)]);\n\t}\n\n\t/**\n\t * Join a list of SQL chunks with a separator.\n\t * @example\n\t * ```ts\n\t * const query = sql.join([sql`a`, sql`b`, sql`c`]);\n\t * // sql`abc`\n\t * ```\n\t * @example\n\t * ```ts\n\t * const query = sql.join([sql`a`, sql`b`, sql`c`], sql`, `);\n\t * // sql`a, b, c`\n\t * ```\n\t */\n\texport function join(chunks: SQLChunk[], separator?: SQLChunk): SQL {\n\t\tconst result: SQLChunk[] = [];\n\t\tfor (const [i, chunk] of chunks.entries()) {\n\t\t\tif (i > 0 && separator !== undefined) {\n\t\t\t\tresult.push(separator);\n\t\t\t}\n\t\t\tresult.push(chunk);\n\t\t}\n\t\treturn new SQL(result);\n\t}\n\n\t/**\n\t * Create a SQL chunk that represents a DB identifier (table, column, index etc.).\n\t * When used in a query, the identifier will be escaped based on the DB engine.\n\t * For example, in PostgreSQL, identifiers are escaped with double quotes.\n\t *\n\t * **WARNING: This function does not offer any protection against SQL injections, so you must validate any user input beforehand.**\n\t *\n\t * @example ```ts\n\t * const query = sql`SELECT * FROM ${sql.identifier('my-table')}`;\n\t * // 'SELECT * FROM \"my-table\"'\n\t * ```\n\t */\n\texport function identifier(value: string): Name {\n\t\treturn new Name(value);\n\t}\n\n\texport function placeholder<TName extends string>(name: TName): Placeholder<TName> {\n\t\treturn new Placeholder(name);\n\t}\n\n\texport function param<TData, TDriver>(\n\t\tvalue: TData,\n\t\tencoder?: DriverValueEncoder<TData, TDriver>,\n\t): Param<TData, TDriver> {\n\t\treturn new Param(value, encoder);\n\t}\n}\n\nexport namespace SQL {\n\texport class Aliased<T = unknown> implements SQLWrapper {\n\t\tstatic readonly [entityKind]: string = 'SQL.Aliased';\n\n\t\tdeclare _: {\n\t\t\tbrand: 'SQL.Aliased';\n\t\t\ttype: T;\n\t\t};\n\n\t\t/** @internal */\n\t\tisSelectionField = false;\n\n\t\tconstructor(\n\t\t\treadonly sql: SQL,\n\t\t\treadonly fieldAlias: string,\n\t\t) {}\n\n\t\tgetSQL(): SQL {\n\t\t\treturn this.sql;\n\t\t}\n\n\t\t/** @internal */\n\t\tclone() {\n\t\t\treturn new Aliased(this.sql, this.fieldAlias);\n\t\t}\n\t}\n}\n\nexport class Placeholder<TName extends string = string, TValue = any> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Placeholder';\n\n\tdeclare protected: TValue;\n\n\tconstructor(readonly name: TName) {}\n\n\tgetSQL(): SQL {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/** @deprecated Use `sql.placeholder` instead. */\nexport function placeholder<TName extends string>(name: TName): Placeholder<TName> {\n\treturn new Placeholder(name);\n}\n\nexport function fillPlaceholders(params: unknown[], values: Record<string, unknown>): unknown[] {\n\treturn params.map((p) => {\n\t\tif (is(p, Placeholder)) {\n\t\t\tif (!(p.name in values)) {\n\t\t\t\tthrow new Error(`No value for placeholder \"${p.name}\" was provided`);\n\t\t\t}\n\t\t\treturn values[p.name];\n\t\t}\n\n\t\treturn p;\n\t});\n}\n\nexport type ColumnsSelection = Record<string, unknown>;\n\nexport abstract class View<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelection extends ColumnsSelection = ColumnsSelection,\n> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'View';\n\n\tdeclare _: {\n\t\tbrand: 'View';\n\t\tviewBrand: string;\n\t\tname: TName;\n\t\texisting: TExisting;\n\t\tselectedFields: TSelection;\n\t};\n\n\t/** @internal */\n\t[ViewBaseConfig]: {\n\t\tname: TName;\n\t\toriginalName: TName;\n\t\tschema: string | undefined;\n\t\tselectedFields: SelectedFields<AnyColumn, Table>;\n\t\tisExisting: TExisting;\n\t\tquery: TExisting extends true ? undefined : SQL;\n\t\tisAlias: boolean;\n\t};\n\n\tconstructor(\n\t\t{ name, schema, selectedFields, query }: {\n\t\t\tname: TName;\n\t\t\tschema: string | undefined;\n\t\t\tselectedFields: SelectedFields<AnyColumn, Table>;\n\t\t\tquery: SQL | undefined;\n\t\t},\n\t) {\n\t\tthis[ViewBaseConfig] = {\n\t\t\tname,\n\t\t\toriginalName: name,\n\t\t\tschema,\n\t\t\tselectedFields,\n\t\t\tquery: query as (TExisting extends true ? undefined : SQL),\n\t\t\tisExisting: !query as TExisting,\n\t\t\tisAlias: false,\n\t\t};\n\t}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\n// Defined separately from the Column class to resolve circular dependency\nColumn.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n\n// Defined separately from the Table class to resolve circular dependency\nTable.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n\n// Defined separately from the Column class to resolve circular dependency\nSubquery.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n", "import type { AnyColumn } from './column.ts';\nimport { Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport type { Relation } from './relations.ts';\nimport type { View} from './sql/sql.ts';\nimport { SQL, sql } from './sql/sql.ts';\nimport { Table } from './table.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\nexport class ColumnAliasProxyHandler<TColumn extends Column> implements ProxyHandler<TColumn> {\n\tstatic readonly [entityKind]: string = 'ColumnAliasProxyHandler';\n\n\tconstructor(private table: Table | View) {}\n\n\tget(columnObj: TColumn, prop: string | symbol): any {\n\t\tif (prop === 'table') {\n\t\t\treturn this.table;\n\t\t}\n\n\t\treturn columnObj[prop as keyof TColumn];\n\t}\n}\n\nexport class TableAliasProxyHandler<T extends Table | View> implements ProxyHandler<T> {\n\tstatic readonly [entityKind]: string = 'TableAliasProxyHandler';\n\n\tconstructor(private alias: string, private replaceOriginalName: boolean) {}\n\n\tget(target: T, prop: string | symbol): any {\n\t\tif (prop === Table.Symbol.IsAlias) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (prop === Table.Symbol.Name) {\n\t\t\treturn this.alias;\n\t\t}\n\n\t\tif (this.replaceOriginalName && prop === Table.Symbol.OriginalName) {\n\t\t\treturn this.alias;\n\t\t}\n\n\t\tif (prop === ViewBaseConfig) {\n\t\t\treturn {\n\t\t\t\t...target[ViewBaseConfig as keyof typeof target],\n\t\t\t\tname: this.alias,\n\t\t\t\tisAlias: true,\n\t\t\t};\n\t\t}\n\n\t\tif (prop === Table.Symbol.Columns) {\n\t\t\tconst columns = (target as Table)[Table.Symbol.Columns];\n\t\t\tif (!columns) {\n\t\t\t\treturn columns;\n\t\t\t}\n\n\t\t\tconst proxiedColumns: { [key: string]: any } = {};\n\n\t\t\tObject.keys(columns).map((key) => {\n\t\t\t\tproxiedColumns[key] = new Proxy(\n\t\t\t\t\tcolumns[key]!,\n\t\t\t\t\tnew ColumnAliasProxyHandler(new Proxy(target, this)),\n\t\t\t\t);\n\t\t\t});\n\n\t\t\treturn proxiedColumns;\n\t\t}\n\n\t\tconst value = target[prop as keyof typeof target];\n\t\tif (is(value, Column)) {\n\t\t\treturn new Proxy(value as AnyColumn, new ColumnAliasProxyHandler(new Proxy(target, this)));\n\t\t}\n\n\t\treturn value;\n\t}\n}\n\nexport class RelationTableAliasProxyHandler<T extends Relation> implements ProxyHandler<T> {\n\tstatic readonly [entityKind]: string = 'RelationTableAliasProxyHandler';\n\n\tconstructor(private alias: string) {}\n\n\tget(target: T, prop: string | symbol): any {\n\t\tif (prop === 'sourceTable') {\n\t\t\treturn aliasedTable(target.sourceTable, this.alias);\n\t\t}\n\n\t\treturn target[prop as keyof typeof target];\n\t}\n}\n\nexport function aliasedTable<T extends Table>(table: T, tableAlias: string): T {\n\treturn new Proxy(table, new TableAliasProxyHandler(tableAlias, false));\n}\n\nexport function aliasedRelation<T extends Relation>(relation: T, tableAlias: string): T {\n\treturn new Proxy(relation, new RelationTableAliasProxyHandler(tableAlias));\n}\n\nexport function aliasedTableColumn<T extends AnyColumn>(column: T, tableAlias: string): T {\n\treturn new Proxy(\n\t\tcolumn,\n\t\tnew ColumnAliasProxyHandler(new Proxy(column.table, new TableAliasProxyHandler(tableAlias, false))),\n\t);\n}\n\nexport function mapColumnsInAliasedSQLToAlias(query: SQL.Aliased, alias: string): SQL.Aliased {\n\treturn new SQL.Aliased(mapColumnsInSQLToAlias(query.sql, alias), query.fieldAlias);\n}\n\nexport function mapColumnsInSQLToAlias(query: SQL, alias: string): SQL {\n\treturn sql.join(query.queryChunks.map((c) => {\n\t\tif (is(c, Column)) {\n\t\t\treturn aliasedTableColumn(c, alias);\n\t\t}\n\t\tif (is(c, SQL)) {\n\t\t\treturn mapColumnsInSQLToAlias(c, alias);\n\t\t}\n\t\tif (is(c, SQL.Aliased)) {\n\t\t\treturn mapColumnsInAliasedSQLToAlias(c, alias);\n\t\t}\n\t\treturn c;\n\t}));\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { Column } from './column.ts';\nimport type { MySqlColumn } from './mysql-core/index.ts';\nimport type { PgColumn } from './pg-core/index.ts';\nimport type { SQL } from './sql/sql.ts';\nimport type { SQLiteColumn } from './sqlite-core/index.ts';\nimport type { Simplify } from './utils.ts';\n\nexport type ColumnDataType =\n\t| 'string'\n\t| 'number'\n\t| 'boolean'\n\t| 'array'\n\t| 'json'\n\t| 'date'\n\t| 'bigint'\n\t| 'custom'\n\t| 'buffer';\n\nexport type Dialect = 'pg' | 'mysql' | 'sqlite' | 'common';\n\nexport interface ColumnBuilderBaseConfig<TDataType extends ColumnDataType, TColumnType extends string> {\n\tname: string;\n\tdataType: TDataType;\n\tcolumnType: TColumnType;\n\tdata: unknown;\n\tdriverParam: unknown;\n\tenumValues: string[] | undefined;\n}\n\nexport type MakeColumnConfig<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTableName extends string,\n> = {\n\tname: T['name'];\n\ttableName: TTableName;\n\tdataType: T['dataType'];\n\tcolumnType: T['columnType'];\n\tdata: T extends { $type: infer U } ? U : T['data'];\n\tdriverParam: T['driverParam'];\n\tnotNull: T extends { notNull: true } ? true : false;\n\thasDefault: T extends { hasDefault: true } ? true : false;\n\tenumValues: T['enumValues'];\n\tbaseColumn: T extends { baseBuilder: infer U extends ColumnBuilderBase } ? BuildColumn<TTableName, U, 'common'>\n\t\t: never;\n} & {};\n\nexport type ColumnBuilderTypeConfig<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> = Simplify<\n\t& {\n\t\tbrand: 'ColumnBuilder';\n\t\tname: T['name'];\n\t\tdataType: T['dataType'];\n\t\tcolumnType: T['columnType'];\n\t\tdata: T['data'];\n\t\tdriverParam: T['driverParam'];\n\t\tnotNull: T extends { notNull: infer U } ? U : boolean;\n\t\thasDefault: T extends { hasDefault: infer U } ? U : boolean;\n\t\tenumValues: T['enumValues'];\n\t}\n\t& TTypeConfig\n>;\n\nexport type ColumnBuilderRuntimeConfig<TData, TRuntimeConfig extends object = object> = {\n\tname: string;\n\tnotNull: boolean;\n\tdefault: TData | SQL | undefined;\n\tdefaultFn: (() => TData | SQL) | undefined;\n\thasDefault: boolean;\n\tprimaryKey: boolean;\n\tisUnique: boolean;\n\tuniqueName: string | undefined;\n\tuniqueType: string | undefined;\n\tdataType: string;\n\tcolumnType: string;\n} & TRuntimeConfig;\n\nexport interface ColumnBuilderExtraConfig {\n\tprimaryKeyHasDefault?: boolean;\n}\n\nexport type NotNull<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tnotNull: true;\n\t};\n};\n\nexport type HasDefault<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\thasDefault: true;\n\t};\n};\n\nexport type $Type<T extends ColumnBuilderBase, TType> = T & {\n\t_: {\n\t\t$type: TType;\n\t};\n};\n\nexport interface ColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> {\n\t_: ColumnBuilderTypeConfig<T, TTypeConfig>;\n}\n\n// To understand how to use `ColumnBuilder` and `AnyColumnBuilder`, see `Column` and `AnyColumn` documentation.\nexport abstract class ColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = ColumnBuilderExtraConfig,\n> implements ColumnBuilderBase<T, TTypeConfig> {\n\tstatic readonly [entityKind]: string = 'ColumnBuilder';\n\n\tdeclare _: ColumnBuilderTypeConfig<T, TTypeConfig>;\n\n\tprotected config: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>;\n\n\tconstructor(name: T['name'], dataType: T['dataType'], columnType: T['columnType']) {\n\t\tthis.config = {\n\t\t\tname,\n\t\t\tnotNull: false,\n\t\t\tdefault: undefined,\n\t\t\thasDefault: false,\n\t\t\tprimaryKey: false,\n\t\t\tisUnique: false,\n\t\t\tuniqueName: undefined,\n\t\t\tuniqueType: undefined,\n\t\t\tdataType,\n\t\t\tcolumnType,\n\t\t} as ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>;\n\t}\n\n\t/**\n\t * Changes the data type of the column. Commonly used with `json` columns. Also, useful for branded types.\n\t *\n\t * @example\n\t * ```ts\n\t * const users = pgTable('users', {\n\t * \tid: integer('id').$type<UserId>().primaryKey(),\n\t * \tdetails: json('details').$type<UserDetails>().notNull(),\n\t * });\n\t * ```\n\t */\n\t$type<TType>(): $Type<this, TType> {\n\t\treturn this as $Type<this, TType>;\n\t}\n\n\t/**\n\t * Adds a `not null` clause to the column definition.\n\t *\n\t * Affects the `select` model of the table - columns *without* `not null` will be nullable on select.\n\t */\n\tnotNull(): NotNull<this> {\n\t\tthis.config.notNull = true;\n\t\treturn this as NotNull<this>;\n\t}\n\n\t/**\n\t * Adds a `default <value>` clause to the column definition.\n\t *\n\t * Affects the `insert` model of the table - columns *with* `default` are optional on insert.\n\t *\n\t * If you need to set a dynamic default value, use {@link $defaultFn} instead.\n\t */\n\tdefault(value: (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL): HasDefault<this> {\n\t\tthis.config.default = value;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasDefault<this>;\n\t}\n\n\t/**\n\t * Adds a dynamic default value to the column.\n\t * The function will be called when the row is inserted, and the returned value will be used as the column value.\n\t *\n\t * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n\t */\n\t$defaultFn(\n\t\tfn: () => (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL,\n\t): HasDefault<this> {\n\t\tthis.config.defaultFn = fn;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasDefault<this>;\n\t}\n\n\t/**\n\t * Alias for {@link $defaultFn}.\n\t */\n\t$default = this.$defaultFn;\n\n\t/**\n\t * Adds a `primary key` clause to the column definition. This implicitly makes the column `not null`.\n\t *\n\t * In SQLite, `integer primary key` implicitly makes the column auto-incrementing.\n\t */\n\tprimaryKey(): TExtraConfig['primaryKeyHasDefault'] extends true ? HasDefault<NotNull<this>> : NotNull<this> {\n\t\tthis.config.primaryKey = true;\n\t\tthis.config.notNull = true;\n\t\treturn this as TExtraConfig['primaryKeyHasDefault'] extends true ? HasDefault<NotNull<this>> : NotNull<this>;\n\t}\n}\n\nexport type BuildColumn<\n\tTTableName extends string,\n\tTBuilder extends ColumnBuilderBase,\n\tTDialect extends Dialect,\n> = TDialect extends 'pg' ? PgColumn<MakeColumnConfig<TBuilder['_'], TTableName>>\n\t: TDialect extends 'mysql' ? MySqlColumn<MakeColumnConfig<TBuilder['_'], TTableName>>\n\t: TDialect extends 'sqlite' ? SQLiteColumn<MakeColumnConfig<TBuilder['_'], TTableName>>\n\t: TDialect extends 'common' ? Column<MakeColumnConfig<TBuilder['_'], TTableName>>\n\t: never;\n\nexport type BuildColumns<\n\tTTableName extends string,\n\tTConfigMap extends Record<string, ColumnBuilderBase>,\n\tTDialect extends Dialect,\n> =\n\t& {\n\t\t[Key in keyof TConfigMap]: BuildColumn<TTableName, TConfigMap[Key], TDialect>;\n\t}\n\t& {};\n\nexport type ChangeColumnTableName<TColumn extends Column, TAlias extends string, TDialect extends Dialect> =\n\tTDialect extends 'pg' ? PgColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'mysql' ? MySqlColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'sqlite' ? SQLiteColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: never;\n", "import type { BuildColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { Table, type TableConfig as TableConfigBase, type UpdateTableConfig } from '~/table.ts';\nimport type { CheckBuilder } from './checks.ts';\nimport type { SQLiteColumn, SQLiteColumnBuilder, SQLiteColumnBuilderBase } from './columns/common.ts';\nimport type { ForeignKey, ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { IndexBuilder } from './indexes.ts';\nimport type { PrimaryKeyBuilder } from './primary-keys.ts';\nimport type { UniqueConstraintBuilder } from './unique-constraint.ts';\n\nexport type SQLiteTableExtraConfig = Record<\n\tstring,\n\t| IndexBuilder\n\t| CheckBuilder\n\t| ForeignKeyBuilder\n\t| PrimaryKeyBuilder\n\t| UniqueConstraintBuilder\n>;\n\nexport type TableConfig = TableConfigBase<SQLiteColumn<any>>;\n\n/** @internal */\nexport const InlineForeignKeys = Symbol.for('drizzle:SQLiteInlineForeignKeys');\n\nexport class SQLiteTable<T extends TableConfig = TableConfig> extends Table<T> {\n\tstatic readonly [entityKind]: string = 'SQLiteTable';\n\n\t/** @internal */\n\tstatic override readonly Symbol = Object.assign({}, Table.Symbol, {\n\t\tInlineForeignKeys: InlineForeignKeys as typeof InlineForeignKeys,\n\t});\n\n\t/** @internal */\n\toverride [Table.Symbol.Columns]!: NonNullable<T['columns']>;\n\n\t/** @internal */\n\t[InlineForeignKeys]: ForeignKey[] = [];\n\n\t/** @internal */\n\toverride [Table.Symbol.ExtraConfigBuilder]:\n\t\t| ((self: Record<string, SQLiteColumn>) => SQLiteTableExtraConfig)\n\t\t| undefined = undefined;\n}\n\nexport type AnySQLiteTable<TPartial extends Partial<TableConfig> = {}> = SQLiteTable<\n\tUpdateTableConfig<TableConfig, TPartial>\n>;\n\nexport type SQLiteTableWithColumns<T extends TableConfig> =\n\t& SQLiteTable<T>\n\t& {\n\t\t[Key in keyof T['columns']]: T['columns'][Key];\n\t};\n\nexport interface SQLiteTableFn<TSchema extends string | undefined = undefined> {\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfig,\n\t): SQLiteTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>;\n}\n\nfunction sqliteTableBase<\n\tTTableName extends string,\n\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\tTSchema extends string | undefined,\n>(\n\tname: TTableName,\n\tcolumns: TColumnsMap,\n\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfig,\n\tschema?: TSchema,\n\tbaseName = name,\n): SQLiteTableWithColumns<{\n\tname: TTableName;\n\tschema: TSchema;\n\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\tdialect: 'sqlite';\n}> {\n\tconst rawTable = new SQLiteTable<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>(name, schema, baseName);\n\n\tconst builtColumns = Object.fromEntries(\n\t\tObject.entries(columns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as SQLiteColumnBuilder;\n\t\t\tconst column = colBuilder.build(rawTable);\n\t\t\trawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\n\tconst table = Object.assign(rawTable, builtColumns);\n\n\ttable[Table.Symbol.Columns] = builtColumns;\n\n\tif (extraConfig) {\n\t\ttable[SQLiteTable.Symbol.ExtraConfigBuilder] = extraConfig as (\n\t\t\tself: Record<string, SQLiteColumn>,\n\t\t) => SQLiteTableExtraConfig;\n\t}\n\n\treturn table;\n}\n\nexport const sqliteTable: SQLiteTableFn = (name, columns, extraConfig) => {\n\treturn sqliteTableBase(name, columns, extraConfig);\n};\n\nexport function sqliteTableCreator(customizeTableName: (name: string) => string): SQLiteTableFn {\n\treturn (name, columns, extraConfig) => {\n\t\treturn sqliteTableBase(customizeTableName(name) as typeof name, columns, extraConfig, undefined, name);\n\t};\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { AnySQLiteColumn, SQLiteColumn } from './columns/index.ts';\nimport { SQLiteTable } from './table.ts';\n\nexport type UpdateDeleteAction = 'cascade' | 'restrict' | 'no action' | 'set null' | 'set default';\n\nexport type Reference = () => {\n\treadonly name?: string;\n\treadonly columns: SQLiteColumn[];\n\treadonly foreignTable: SQLiteTable;\n\treadonly foreignColumns: SQLiteColumn[];\n};\n\nexport class ForeignKeyBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteForeignKeyBuilder';\n\n\tdeclare _: {\n\t\tbrand: 'SQLiteForeignKeyBuilder';\n\t\tforeignTableName: 'TForeignTableName';\n\t};\n\n\t/** @internal */\n\treference: Reference;\n\n\t/** @internal */\n\t_onUpdate: UpdateDeleteAction | undefined;\n\n\t/** @internal */\n\t_onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(\n\t\tconfig: () => {\n\t\t\tname?: string;\n\t\t\tcolumns: SQLiteColumn[];\n\t\t\tforeignColumns: SQLiteColumn[];\n\t\t},\n\t\tactions?: {\n\t\t\tonUpdate?: UpdateDeleteAction;\n\t\t\tonDelete?: UpdateDeleteAction;\n\t\t} | undefined,\n\t) {\n\t\tthis.reference = () => {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn { name, columns, foreignTable: foreignColumns[0]!.table as SQLiteTable, foreignColumns };\n\t\t};\n\t\tif (actions) {\n\t\t\tthis._onUpdate = actions.onUpdate;\n\t\t\tthis._onDelete = actions.onDelete;\n\t\t}\n\t}\n\n\tonUpdate(action: UpdateDeleteAction): this {\n\t\tthis._onUpdate = action;\n\t\treturn this;\n\t}\n\n\tonDelete(action: UpdateDeleteAction): this {\n\t\tthis._onDelete = action;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): ForeignKey {\n\t\treturn new ForeignKey(table, this);\n\t}\n}\n\nexport class ForeignKey {\n\tstatic readonly [entityKind]: string = 'SQLiteForeignKey';\n\n\treadonly reference: Reference;\n\treadonly onUpdate: UpdateDeleteAction | undefined;\n\treadonly onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(readonly table: SQLiteTable, builder: ForeignKeyBuilder) {\n\t\tthis.reference = builder.reference;\n\t\tthis.onUpdate = builder._onUpdate;\n\t\tthis.onDelete = builder._onDelete;\n\t}\n\n\tgetName(): string {\n\t\tconst { name, columns, foreignColumns } = this.reference();\n\t\tconst columnNames = columns.map((column) => column.name);\n\t\tconst foreignColumnNames = foreignColumns.map((column) => column.name);\n\t\tconst chunks = [\n\t\t\tthis.table[SQLiteTable.Symbol.Name],\n\t\t\t...columnNames,\n\t\t\tforeignColumns[0]!.table[SQLiteTable.Symbol.Name],\n\t\t\t...foreignColumnNames,\n\t\t];\n\t\treturn name ?? `${chunks.join('_')}_fk`;\n\t}\n}\n\ntype ColumnsWithTable<\n\tTTableName extends string,\n\tTColumns extends SQLiteColumn[],\n> = { [Key in keyof TColumns]: AnySQLiteColumn<{ tableName: TTableName }> };\n\n/**\n * @deprecated please use `foreignKey({ columns: [], foreignColumns: [] })` syntax without callback\n * @param config\n * @returns\n */\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnySQLiteColumn<{ tableName: TTableName }>, ...AnySQLiteColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: () => {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder;\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnySQLiteColumn<{ tableName: TTableName }>, ...AnySQLiteColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder;\nexport function foreignKey(\n\tconfig: any,\n): ForeignKeyBuilder {\n\tfunction mappedConfig() {\n\t\tif (typeof config === 'function') {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn {\n\t\t\t\tname,\n\t\t\t\tcolumns,\n\t\t\t\tforeignColumns,\n\t\t\t};\n\t\t}\n\t\treturn config;\n\t}\n\n\treturn new ForeignKeyBuilder(mappedConfig);\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { SQLiteColumn } from './columns/common.ts';\nimport { SQLiteTable } from './table.ts';\n\nexport function uniqueKeyName(table: SQLiteTable, columns: string[]) {\n\treturn `${table[SQLiteTable.Symbol.Name]}_${columns.join('_')}_unique`;\n}\n\nexport function unique(name?: string): UniqueOnConstraintBuilder {\n\treturn new UniqueOnConstraintBuilder(name);\n}\n\nexport class UniqueConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueConstraintBuilder';\n\n\t/** @internal */\n\tcolumns: SQLiteColumn[];\n\n\tconstructor(\n\t\tcolumns: SQLiteColumn[],\n\t\tprivate name?: string,\n\t) {\n\t\tthis.columns = columns;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): UniqueConstraint {\n\t\treturn new UniqueConstraint(table, this.columns, this.name);\n\t}\n}\n\nexport class UniqueOnConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueOnConstraintBuilder';\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tname?: string,\n\t) {\n\t\tthis.name = name;\n\t}\n\n\ton(...columns: [SQLiteColumn, ...SQLiteColumn[]]) {\n\t\treturn new UniqueConstraintBuilder(columns, this.name);\n\t}\n}\n\nexport class UniqueConstraint {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueConstraint';\n\n\treadonly columns: SQLiteColumn[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: SQLiteTable, columns: SQLiteColumn[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n\t}\n\n\tgetName() {\n\t\treturn this.name;\n\t}\n}\n", "import type {\n\tColumnBuilderBase,\n\tColumnBuilderBaseConfig,\n\tColumnBuilderExtraConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tMakeColumnConfig,\n} from '~/column-builder.ts';\nimport { ColumnBuilder } from '~/column-builder.ts';\nimport { Column } from '~/column.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { ForeignKey, UpdateDeleteAction } from '~/sqlite-core/foreign-keys.ts';\nimport { ForeignKeyBuilder } from '~/sqlite-core/foreign-keys.ts';\nimport type { AnySQLiteTable, SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Update } from '~/utils.ts';\nimport { uniqueKeyName } from '../unique-constraint.ts';\n\nexport interface ReferenceConfig {\n\tref: () => SQLiteColumn;\n\tactions: {\n\t\tonUpdate?: UpdateDeleteAction;\n\t\tonDelete?: UpdateDeleteAction;\n\t};\n}\n\nexport interface SQLiteColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> extends ColumnBuilderBase<T, TTypeConfig & { dialect: 'sqlite' }> {}\n\nexport abstract class SQLiteColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = object,\n> extends ColumnBuilder<T, TRuntimeConfig, TTypeConfig & { dialect: 'sqlite' }, TExtraConfig>\n\timplements SQLiteColumnBuilderBase<T, TTypeConfig>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteColumnBuilder';\n\n\tprivate foreignKeyConfigs: ReferenceConfig[] = [];\n\n\treferences(\n\t\tref: ReferenceConfig['ref'],\n\t\tactions: ReferenceConfig['actions'] = {},\n\t): this {\n\t\tthis.foreignKeyConfigs.push({ ref, actions });\n\t\treturn this;\n\t}\n\n\tunique(\n\t\tname?: string,\n\t): this {\n\t\tthis.config.isUnique = true;\n\t\tthis.config.uniqueName = name;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuildForeignKeys(column: SQLiteColumn, table: SQLiteTable): ForeignKey[] {\n\t\treturn this.foreignKeyConfigs.map(({ ref, actions }) => {\n\t\t\treturn ((ref, actions) => {\n\t\t\t\tconst builder = new ForeignKeyBuilder(() => {\n\t\t\t\t\tconst foreignColumn = ref();\n\t\t\t\t\treturn { columns: [column], foreignColumns: [foreignColumn] };\n\t\t\t\t});\n\t\t\t\tif (actions.onUpdate) {\n\t\t\t\t\tbuilder.onUpdate(actions.onUpdate);\n\t\t\t\t}\n\t\t\t\tif (actions.onDelete) {\n\t\t\t\t\tbuilder.onDelete(actions.onDelete);\n\t\t\t\t}\n\t\t\t\treturn builder.build(table);\n\t\t\t})(ref, actions);\n\t\t});\n\t}\n\n\t/** @internal */\n\tabstract build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteColumn<MakeColumnConfig<T, TTableName>>;\n}\n\n// To understand how to use `SQLiteColumn` and `AnySQLiteColumn`, see `Column` and `AnyColumn` documentation.\nexport abstract class SQLiteColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends Column<T, TRuntimeConfig, { dialect: 'sqlite' }> {\n\tstatic readonly [entityKind]: string = 'SQLiteColumn';\n\n\tconstructor(\n\t\toverride readonly table: SQLiteTable,\n\t\tconfig: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tif (!config.uniqueName) {\n\t\t\tconfig.uniqueName = uniqueKeyName(table, [config.name]);\n\t\t}\n\t\tsuper(table, config);\n\t}\n}\n\nexport type AnySQLiteColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = SQLiteColumn<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n", "import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tHasDefault,\n\tMakeColumnConfig,\n\tNotNull,\n} from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport { sql } from '~/sql/sql.ts';\nimport type { OnConflict } from '~/sqlite-core/utils.ts';\nimport type { Equal, Or } from '~/utils.ts';\nimport type { AnySQLiteTable } from '../table.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport interface PrimaryKeyConfig {\n\tautoIncrement?: boolean;\n\tonConflict?: OnConflict;\n}\n\nexport abstract class SQLiteBaseIntegerBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends SQLiteColumnBuilder<\n\tT,\n\tTRuntimeConfig & { autoIncrement: boolean },\n\t{},\n\t{ primaryKeyHasDefault: true }\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteBaseIntegerBuilder';\n\n\tconstructor(name: T['name'], dataType: T['dataType'], columnType: T['columnType']) {\n\t\tsuper(name, dataType, columnType);\n\t\tthis.config.autoIncrement = false;\n\t}\n\n\toverride primaryKey(config?: PrimaryKeyConfig): HasDefault<NotNull<this>> {\n\t\tif (config?.autoIncrement) {\n\t\t\tthis.config.autoIncrement = true;\n\t\t}\n\t\tthis.config.hasDefault = true;\n\t\treturn super.primaryKey() as HasDefault<NotNull<this>>;\n\t}\n\n\t/** @internal */\n\tabstract override build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBaseInteger<MakeColumnConfig<T, TTableName>>;\n}\n\nexport abstract class SQLiteBaseInteger<\n\tT extends ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends SQLiteColumn<T, TRuntimeConfig & { autoIncrement: boolean }> {\n\tstatic readonly [entityKind]: string = 'SQLiteBaseInteger';\n\n\treadonly autoIncrement: boolean = this.config.autoIncrement;\n\n\tgetSQLType(): string {\n\t\treturn 'integer';\n\t}\n}\n\nexport type SQLiteIntegerBuilderInitial<TName extends string> = SQLiteIntegerBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'SQLiteInteger';\n\tdata: number;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteIntegerBuilder<T extends ColumnBuilderBaseConfig<'number', 'SQLiteInteger'>>\n\textends SQLiteBaseIntegerBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteIntegerBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'SQLiteInteger');\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteInteger<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteInteger<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteInteger<T extends ColumnBaseConfig<'number', 'SQLiteInteger'>> extends SQLiteBaseInteger<T> {\n\tstatic readonly [entityKind]: string = 'SQLiteInteger';\n}\n\nexport type SQLiteTimestampBuilderInitial<TName extends string> = SQLiteTimestampBuilder<{\n\tname: TName;\n\tdataType: 'date';\n\tcolumnType: 'SQLiteTimestamp';\n\tdata: Date;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteTimestampBuilder<T extends ColumnBuilderBaseConfig<'date', 'SQLiteTimestamp'>>\n\textends SQLiteBaseIntegerBuilder<T, { mode: 'timestamp' | 'timestamp_ms' }>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteTimestampBuilder';\n\n\tconstructor(name: T['name'], mode: 'timestamp' | 'timestamp_ms') {\n\t\tsuper(name, 'date', 'SQLiteTimestamp');\n\t\tthis.config.mode = mode;\n\t}\n\n\t/**\n\t * @deprecated Use `default()` with your own expression instead.\n\t *\n\t * Adds `DEFAULT (cast((julianday('now') - 2440587.5)*86400000 as integer))` to the column, which is the current epoch timestamp in milliseconds.\n\t */\n\tdefaultNow(): HasDefault<this> {\n\t\treturn this.default(sql`(cast((julianday('now') - 2440587.5)*86400000 as integer))`) as any;\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteTimestamp<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteTimestamp<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteTimestamp<T extends ColumnBaseConfig<'date', 'SQLiteTimestamp'>>\n\textends SQLiteBaseInteger<T, { mode: 'timestamp' | 'timestamp_ms' }>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteTimestamp';\n\n\treadonly mode: 'timestamp' | 'timestamp_ms' = this.config.mode;\n\n\toverride mapFromDriverValue(value: number): Date {\n\t\tif (this.config.mode === 'timestamp') {\n\t\t\treturn new Date(value * 1000);\n\t\t}\n\t\treturn new Date(value);\n\t}\n\n\toverride mapToDriverValue(value: Date): number {\n\t\tconst unix = value.getTime();\n\t\tif (this.config.mode === 'timestamp') {\n\t\t\treturn Math.floor(unix / 1000);\n\t\t}\n\t\treturn unix;\n\t}\n}\n\nexport type SQLiteBooleanBuilderInitial<TName extends string> = SQLiteBooleanBuilder<{\n\tname: TName;\n\tdataType: 'boolean';\n\tcolumnType: 'SQLiteBoolean';\n\tdata: boolean;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBooleanBuilder<T extends ColumnBuilderBaseConfig<'boolean', 'SQLiteBoolean'>>\n\textends SQLiteBaseIntegerBuilder<T, { mode: 'boolean' }>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteBooleanBuilder';\n\n\tconstructor(name: T['name'], mode: 'boolean') {\n\t\tsuper(name, 'boolean', 'SQLiteBoolean');\n\t\tthis.config.mode = mode;\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBoolean<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBoolean<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteBoolean<T extends ColumnBaseConfig<'boolean', 'SQLiteBoolean'>>\n\textends SQLiteBaseInteger<T, { mode: 'boolean' }>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteBoolean';\n\n\treadonly mode: 'boolean' = this.config.mode;\n\n\toverride mapFromDriverValue(value: number): boolean {\n\t\treturn Number(value) === 1;\n\t}\n\n\toverride mapToDriverValue(value: boolean): number {\n\t\treturn value ? 1 : 0;\n\t}\n}\n\nexport interface IntegerConfig<\n\tTMode extends 'number' | 'timestamp' | 'timestamp_ms' | 'boolean' =\n\t\t| 'number'\n\t\t| 'timestamp'\n\t\t| 'timestamp_ms'\n\t\t| 'boolean',\n> {\n\tmode: TMode;\n}\n\nexport function integer<TName extends string, TMode extends IntegerConfig['mode']>(\n\tname: TName,\n\tconfig?: IntegerConfig<TMode>,\n): Or<Equal<TMode, 'timestamp'>, Equal<TMode, 'timestamp_ms'>> extends true ? SQLiteTimestampBuilderInitial<TName>\n\t: Equal<TMode, 'boolean'> extends true ? SQLiteBooleanBuilderInitial<TName>\n\t: SQLiteIntegerBuilderInitial<TName>;\nexport function integer(name: string, config?: IntegerConfig) {\n\tif (config?.mode === 'timestamp' || config?.mode === 'timestamp_ms') {\n\t\treturn new SQLiteTimestampBuilder(name, config.mode);\n\t}\n\tif (config?.mode === 'boolean') {\n\t\treturn new SQLiteBooleanBuilder(name, config.mode);\n\t}\n\treturn new SQLiteIntegerBuilder(name);\n}\n\nexport const int = integer;\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Equal, Writable } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type SQLiteTextBuilderInitial<TName extends string, TEnum extends [string, ...string[]]> = SQLiteTextBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'SQLiteText';\n\tdata: TEnum[number];\n\tdriverParam: string;\n\tenumValues: TEnum;\n}>;\n\nexport class SQLiteTextBuilder<T extends ColumnBuilderBaseConfig<'string', 'SQLiteText'>> extends SQLiteColumnBuilder<\n\tT,\n\t{ length: number | undefined; enumValues: T['enumValues'] }\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteTextBuilder';\n\n\tconstructor(name: T['name'], config: SQLiteTextConfig<'text', T['enumValues']>) {\n\t\tsuper(name, 'string', 'SQLiteText');\n\t\tthis.config.enumValues = config.enum;\n\t\tthis.config.length = config.length;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteText<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteText<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class SQLiteText<T extends ColumnBaseConfig<'string', 'SQLiteText'>>\n\textends SQLiteColumn<T, { length: number | undefined; enumValues: T['enumValues'] }>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteText';\n\n\toverride readonly enumValues = this.config.enumValues;\n\n\treadonly length: number | undefined = this.config.length;\n\n\tconstructor(\n\t\ttable: AnySQLiteTable<{ name: T['tableName'] }>,\n\t\tconfig: SQLiteTextBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn `text${this.config.length ? `(${this.config.length})` : ''}`;\n\t}\n}\n\nexport type SQLiteTextJsonBuilderInitial<TName extends string> = SQLiteTextJsonBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'SQLiteTextJson';\n\tdata: unknown;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteTextJsonBuilder<T extends ColumnBuilderBaseConfig<'json', 'SQLiteTextJson'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteTextJsonBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'SQLiteTextJson');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteTextJson<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteTextJson<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteTextJson<T extends ColumnBaseConfig<'json', 'SQLiteTextJson'>>\n\textends SQLiteColumn<T, { length: number | undefined; enumValues: T['enumValues'] }>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteTextJson';\n\n\tgetSQLType(): string {\n\t\treturn 'text';\n\t}\n\n\toverride mapFromDriverValue(value: string): T['data'] {\n\t\treturn JSON.parse(value);\n\t}\n\n\toverride mapToDriverValue(value: T['data']): string {\n\t\treturn JSON.stringify(value);\n\t}\n}\n\nexport type SQLiteTextConfig<\n\tTMode extends 'text' | 'json',\n\tTEnum extends readonly string[] | string[] | undefined,\n> = TMode extends 'text' ? {\n\t\tmode?: TMode;\n\t\tlength?: number;\n\t\tenum?: TEnum;\n\t}\n\t: {\n\t\tmode?: TMode;\n\t};\n\nexport function text<\n\tTName extends string,\n\tU extends string,\n\tT extends Readonly<[U, ...U[]]>,\n\tTMode extends 'text' | 'json' = 'text' | 'json',\n>(\n\tname: TName,\n\tconfig: SQLiteTextConfig<TMode, T | Writable<T>> = {} as SQLiteTextConfig<TMode, T | Writable<T>>,\n): Equal<TMode, 'json'> extends true ? SQLiteTextJsonBuilderInitial<TName>\n\t: SQLiteTextBuilderInitial<TName, Writable<T>>\n{\n\treturn (config.mode === 'json'\n\t\t? new SQLiteTextJsonBuilder(name)\n\t\t: new SQLiteTextBuilder(name, config as SQLiteTextConfig<'text', Writable<T>>)) as Equal<TMode, 'json'> extends true\n\t\t\t? SQLiteTextJsonBuilderInitial<TName>\n\t\t\t: SQLiteTextBuilderInitial<TName, Writable<T>>;\n}\n", "import { ColumnAliasProxyHandler, TableAliasProxyHandler } from './alias.ts';\nimport { Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport { SQL, View } from './sql/sql.ts';\nimport { Subquery, SubqueryConfig } from './subquery.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\nexport class SelectionProxyHandler<T extends Subquery | Record<string, unknown> | View>\n\timplements ProxyHandler<Subquery | Record<string, unknown> | View>\n{\n\tstatic readonly [entityKind]: string = 'SelectionProxyHandler';\n\n\tprivate config: {\n\t\t/**\n\t\t * Table alias for the columns\n\t\t */\n\t\talias?: string;\n\t\t/**\n\t\t * What to do when a field is an instance of `SQL.Aliased` and it's not a selection field (from a subquery)\n\t\t *\n\t\t * `sql` - return the underlying SQL expression\n\t\t *\n\t\t * `alias` - return the field alias\n\t\t */\n\t\tsqlAliasedBehavior: 'sql' | 'alias';\n\t\t/**\n\t\t * What to do when a field is an instance of `SQL` and it doesn't have an alias declared\n\t\t *\n\t\t * `sql` - return the underlying SQL expression\n\t\t *\n\t\t * `error` - return a DrizzleTypeError on type level and throw an error on runtime\n\t\t */\n\t\tsqlBehavior: 'sql' | 'error';\n\n\t\t/**\n\t\t * Whether to replace the original name of the column with the alias\n\t\t * Should be set to `true` for views creation\n\t\t * @default false\n\t\t */\n\t\treplaceOriginalName?: boolean;\n\t};\n\n\tconstructor(config: SelectionProxyHandler<T>['config']) {\n\t\tthis.config = { ...config };\n\t}\n\n\tget(subquery: T, prop: string | symbol): any {\n\t\tif (prop === SubqueryConfig) {\n\t\t\treturn {\n\t\t\t\t...subquery[SubqueryConfig as keyof typeof subquery],\n\t\t\t\tselection: new Proxy(\n\t\t\t\t\t(subquery as Subquery)[SubqueryConfig].selection,\n\t\t\t\t\tthis as ProxyHandler<Record<string, unknown>>,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tif (prop === ViewBaseConfig) {\n\t\t\treturn {\n\t\t\t\t...subquery[ViewBaseConfig as keyof typeof subquery],\n\t\t\t\tselectedFields: new Proxy(\n\t\t\t\t\t(subquery as View)[ViewBaseConfig].selectedFields,\n\t\t\t\t\tthis as ProxyHandler<Record<string, unknown>>,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tif (typeof prop === 'symbol') {\n\t\t\treturn subquery[prop as keyof typeof subquery];\n\t\t}\n\n\t\tconst columns = is(subquery, Subquery)\n\t\t\t? subquery[SubqueryConfig].selection\n\t\t\t: is(subquery, View)\n\t\t\t? subquery[ViewBaseConfig].selectedFields\n\t\t\t: subquery;\n\t\tconst value: unknown = columns[prop as keyof typeof columns];\n\n\t\tif (is(value, SQL.Aliased)) {\n\t\t\t// Never return the underlying SQL expression for a field previously selected in a subquery\n\t\t\tif (this.config.sqlAliasedBehavior === 'sql' && !value.isSelectionField) {\n\t\t\t\treturn value.sql;\n\t\t\t}\n\n\t\t\tconst newValue = value.clone();\n\t\t\tnewValue.isSelectionField = true;\n\t\t\treturn newValue;\n\t\t}\n\n\t\tif (is(value, SQL)) {\n\t\t\tif (this.config.sqlBehavior === 'sql') {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\tthrow new Error(\n\t\t\t\t`You tried to reference \"${prop}\" field from a subquery, which is a raw SQL field, but it doesn't have an alias declared. Please add an alias to the field using \".as('alias')\" method.`,\n\t\t\t);\n\t\t}\n\n\t\tif (is(value, Column)) {\n\t\t\tif (this.config.alias) {\n\t\t\t\treturn new Proxy(\n\t\t\t\t\tvalue,\n\t\t\t\t\tnew ColumnAliasProxyHandler(\n\t\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\t\tvalue.table,\n\t\t\t\t\t\t\tnew TableAliasProxyHandler(this.config.alias, this.config.replaceOriginalName ?? false),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\n\t\tif (typeof value !== 'object' || value === null) {\n\t\t\treturn value;\n\t\t}\n\n\t\treturn new Proxy(value, new SelectionProxyHandler(this.config));\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\n\nexport abstract class QueryPromise<T> implements Promise<T> {\n\tstatic readonly [entityKind]: string = 'QueryPromise';\n\n\t[Symbol.toStringTag] = 'QueryPromise';\n\n\tcatch<TResult = never>(\n\t\tonRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null | undefined,\n\t): Promise<T | TResult> {\n\t\treturn this.then(undefined, onRejected);\n\t}\n\n\tfinally(onFinally?: (() => void) | null | undefined): Promise<T> {\n\t\treturn this.then(\n\t\t\t(value) => {\n\t\t\t\tonFinally?.();\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\t(reason) => {\n\t\t\t\tonFinally?.();\n\t\t\t\tthrow reason;\n\t\t\t},\n\t\t);\n\t}\n\n\tthen<TResult1 = T, TResult2 = never>(\n\t\tonFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n\t\tonRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n\t): Promise<TResult1 | TResult2> {\n\t\treturn this.execute().then(onFulfilled, onRejected);\n\t}\n\n\tabstract execute(): Promise<T>;\n}\n", "import type { AnyColumn } from './column.ts';\nimport { Column } from './column.ts';\nimport { is } from './entity.ts';\nimport type { Logger } from './logger.ts';\nimport type { SelectedFieldsOrdered } from './operations.ts';\nimport type { TableLike } from './query-builders/select.types.ts';\nimport { Param, SQL, View } from './sql/sql.ts';\nimport type { DriverValueDecoder } from './sql/sql.ts';\nimport { Subquery, SubqueryConfig } from './subquery.ts';\nimport { getTableName, Table } from './table.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\n/** @internal */\nexport function mapResultRow<TResult>(\n\tcolumns: SelectedFieldsOrdered<AnyColumn>,\n\trow: unknown[],\n\tjoinsNotNullableMap: Record<string, boolean> | undefined,\n): TResult {\n\t// Key -> nested object key, value -> table name if all fields in the nested object are from the same table, false otherwise\n\tconst nullifyMap: Record<string, string | false> = {};\n\n\tconst result = columns.reduce<Record<string, any>>(\n\t\t(result, { path, field }, columnIndex) => {\n\t\t\tlet decoder: DriverValueDecoder<unknown, unknown>;\n\t\t\tif (is(field, Column)) {\n\t\t\t\tdecoder = field;\n\t\t\t} else if (is(field, SQL)) {\n\t\t\t\tdecoder = field.decoder;\n\t\t\t} else {\n\t\t\t\tdecoder = field.sql.decoder;\n\t\t\t}\n\t\t\tlet node = result;\n\t\t\tfor (const [pathChunkIndex, pathChunk] of path.entries()) {\n\t\t\t\tif (pathChunkIndex < path.length - 1) {\n\t\t\t\t\tif (!(pathChunk in node)) {\n\t\t\t\t\t\tnode[pathChunk] = {};\n\t\t\t\t\t}\n\t\t\t\t\tnode = node[pathChunk];\n\t\t\t\t} else {\n\t\t\t\t\tconst rawValue = row[columnIndex]!;\n\t\t\t\t\tconst value = node[pathChunk] = rawValue === null ? null : decoder.mapFromDriverValue(rawValue);\n\n\t\t\t\t\tif (joinsNotNullableMap && is(field, Column) && path.length === 2) {\n\t\t\t\t\t\tconst objectName = path[0]!;\n\t\t\t\t\t\tif (!(objectName in nullifyMap)) {\n\t\t\t\t\t\t\tnullifyMap[objectName] = value === null ? getTableName(field.table) : false;\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\ttypeof nullifyMap[objectName] === 'string' && nullifyMap[objectName] !== getTableName(field.table)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tnullifyMap[objectName] = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t},\n\t\t{},\n\t);\n\n\t// Nullify all nested objects from nullifyMap that are nullable\n\tif (joinsNotNullableMap && Object.keys(nullifyMap).length > 0) {\n\t\tfor (const [objectName, tableName] of Object.entries(nullifyMap)) {\n\t\t\tif (typeof tableName === 'string' && !joinsNotNullableMap[tableName]) {\n\t\t\t\tresult[objectName] = null;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result as TResult;\n}\n\n/** @internal */\nexport function orderSelectedFields<TColumn extends AnyColumn>(\n\tfields: Record<string, unknown>,\n\tpathPrefix?: string[],\n): SelectedFieldsOrdered<TColumn> {\n\treturn Object.entries(fields).reduce<SelectedFieldsOrdered<AnyColumn>>((result, [name, field]) => {\n\t\tif (typeof name !== 'string') {\n\t\t\treturn result;\n\t\t}\n\n\t\tconst newPath = pathPrefix ? [...pathPrefix, name] : [name];\n\t\tif (is(field, Column) || is(field, SQL) || is(field, SQL.Aliased)) {\n\t\t\tresult.push({ path: newPath, field });\n\t\t} else if (is(field, Table)) {\n\t\t\tresult.push(...orderSelectedFields(field[Table.Symbol.Columns], newPath));\n\t\t} else {\n\t\t\tresult.push(...orderSelectedFields(field as Record<string, unknown>, newPath));\n\t\t}\n\t\treturn result;\n\t}, []) as SelectedFieldsOrdered<TColumn>;\n}\n\nexport function haveSameKeys(left: Record<string, unknown>, right: Record<string, unknown>) {\n\tconst leftKeys = Object.keys(left);\n\tconst rightKeys = Object.keys(right);\n\n\tif (leftKeys.length !== rightKeys.length) {\n\t\treturn false;\n\t}\n\n\tfor (const [index, key] of leftKeys.entries()) {\n\t\tif (key !== rightKeys[index]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/** @internal */\nexport function mapUpdateSet(table: Table, values: Record<string, unknown>): UpdateSet {\n\tconst entries: [string, UpdateSet[string]][] = Object.entries(values)\n\t\t.filter(([, value]) => value !== undefined)\n\t\t.map(([key, value]) => {\n\t\t\t// eslint-disable-next-line unicorn/prefer-ternary\n\t\t\tif (is(value, SQL)) {\n\t\t\t\treturn [key, value];\n\t\t\t} else {\n\t\t\t\treturn [key, new Param(value, table[Table.Symbol.Columns][key])];\n\t\t\t}\n\t\t});\n\n\tif (entries.length === 0) {\n\t\tthrow new Error('No values to set');\n\t}\n\n\treturn Object.fromEntries(entries);\n}\n\nexport type UpdateSet = Record<string, SQL | Param | null | undefined>;\n\nexport type OneOrMany<T> = T | T[];\n\nexport type Update<T, TUpdate> = Simplify<\n\t& {\n\t\t[K in Exclude<keyof T, keyof TUpdate>]: T[K];\n\t}\n\t& TUpdate\n>;\n\nexport type Simplify<T> =\n\t& {\n\t\t// @ts-ignore - \"Type parameter 'K' has a circular constraint\", not sure why\n\t\t[K in keyof T]: T[K];\n\t}\n\t& {};\n\nexport type SimplifyMappedType<T> = [T] extends [unknown] ? T : never;\n\nexport type ShallowRecord<K extends keyof any, T> = SimplifyMappedType<{ [P in K]: T }>;\n\nexport type Assume<T, U> = T extends U ? T : U;\n\nexport type Equal<X, Y> = (<T>() => T extends X ? 1 : 2) extends (<T>() => T extends Y ? 1 : 2) ? true : false;\n\nexport interface DrizzleTypeError<T extends string> {\n\t$drizzleTypeError: T;\n}\n\nexport type ValueOrArray<T> = T | T[];\n\n/** @internal */\nexport function applyMixins(baseClass: any, extendedClasses: any[]) {\n\tfor (const extendedClass of extendedClasses) {\n\t\tfor (const name of Object.getOwnPropertyNames(extendedClass.prototype)) {\n\t\t\tif (name === 'constructor') continue;\n\n\t\t\tObject.defineProperty(\n\t\t\t\tbaseClass.prototype,\n\t\t\t\tname,\n\t\t\t\tObject.getOwnPropertyDescriptor(extendedClass.prototype, name) || Object.create(null),\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport type Or<T1, T2> = T1 extends true ? true : T2 extends true ? true : false;\n\nexport type IfThenElse<If, Then, Else> = If extends true ? Then : Else;\n\nexport type PromiseOf<T> = T extends Promise<infer U> ? U : T;\n\nexport type Writable<T> = {\n\t-readonly [P in keyof T]: T[P];\n};\n\nexport function getTableColumns<T extends Table>(table: T): T['_']['columns'] {\n\treturn table[Table.Symbol.Columns];\n}\n\n/** @internal */\nexport function getTableLikeName(table: TableLike): string | undefined {\n\treturn is(table, Subquery)\n\t\t? table[SubqueryConfig].alias\n\t\t: is(table, View)\n\t\t? table[ViewBaseConfig].name\n\t\t: is(table, SQL)\n\t\t? undefined\n\t\t: table[Table.Symbol.IsAlias]\n\t\t? table[Table.Symbol.Name]\n\t\t: table[Table.Symbol.BaseName];\n}\n\nexport type ColumnsWithTable<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends AnyColumn<{ tableName: TTableName }>[],\n> = { [Key in keyof TColumns]: AnyColumn<{ tableName: TForeignTableName }> };\n\nexport interface DrizzleConfig<TSchema extends Record<string, unknown> = Record<string, never>> {\n\tlogger?: boolean | Logger;\n\tschema?: TSchema;\n}\nexport type ValidateShape<T, ValidShape, TResult = T> = T extends ValidShape\n\t? Exclude<keyof T, keyof ValidShape> extends never ? TResult\n\t: DrizzleTypeError<\n\t\t`Invalid key(s): ${Exclude<(keyof T) & (string | number | bigint | boolean | null | undefined), keyof ValidShape>}`\n\t>\n\t: never;\n\nexport type KnownKeysOnly<T, U> = {\n\t[K in keyof T]: K extends keyof U ? T[K] : never;\n};\n\nexport type IsAny<T> = 0 extends (1 & T) ? true : false;\n", "import { entityKind } from '~/entity.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { type DrizzleTypeError, orderSelectedFields } from '~/utils.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\nimport type { SQLiteColumn } from '../columns/common.ts';\n\nexport type SQLiteDeleteWithout<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T\n\t: Omit<\n\t\tSQLiteDeleteBase<\n\t\t\tT['_']['table'],\n\t\t\tT['_']['resultType'],\n\t\t\tT['_']['runResult'],\n\t\t\tT['_']['returning'],\n\t\t\tTDynamic,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>,\n\t\tT['_']['excludedMethods'] | K\n\t>;\n\nexport type SQLiteDelete<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n> = SQLiteDeleteBase<TTable, TResultType, TRunResult, TReturning, true, never>;\n\nexport interface SQLiteDeleteConfig {\n\twhere?: SQL | undefined;\n\ttable: SQLiteTable;\n\treturning?: SelectedFieldsOrdered;\n}\n\nexport type SQLiteDeleteReturningAll<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n> = SQLiteDeleteWithout<\n\tSQLiteDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tT['_']['dynamic'],\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteDeleteReturning<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = SQLiteDeleteWithout<\n\tSQLiteDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tT['_']['dynamic'],\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteDeleteExecute<T extends AnySQLiteDeleteBase> = T['_']['returning'] extends undefined\n\t? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteDeletePrepare<T extends AnySQLiteDeleteBase> = SQLitePreparedQuery<{\n\ttype: T['_']['resultType'];\n\trun: T['_']['runResult'];\n\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t: T['_']['returning'][];\n\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t: T['_']['returning'] | undefined;\n\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t: any[][];\n\texecute: SQLiteDeleteExecute<T>;\n}>;\n\nexport type SQLiteDeleteDynamic<T extends AnySQLiteDeleteBase> = SQLiteDelete<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type AnySQLiteDeleteBase = SQLiteDeleteBase<any, any, any, any, any, any>;\n\nexport interface SQLiteDeleteBase<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends SQLWrapper {\n\treadonly _: {\n\t\tdialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteDeleteBase<\n\tTTable extends SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic readonly [entityKind]: string = 'SQLiteDelete';\n\n\t/** @internal */\n\tconfig: SQLiteDeleteConfig;\n\n\tconstructor(\n\t\tprivate table: TTable,\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t) {\n\t\tsuper();\n\t\tthis.config = { table };\n\t}\n\n\t/** \n\t * Adds a `where` clause to the query.\n\t * \n\t * Calling this method will delete only those rows that fulfill a specified condition.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t * \n\t * @param where the `where` clause.\n\t * \n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be deleted.\n\t * \n\t * ```ts\n\t * // Delete all cars with green color\n\t * db.delete(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * db.delete(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t * \n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t * \n\t * ```ts\n\t * // Delete all BMW cars with a green color\n\t * db.delete(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t * \n\t * // Delete all cars with the green or blue color\n\t * db.delete(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t*/\n\twhere(where: SQL | undefined): SQLiteDeleteWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t * \n\t * Calling this method will return the specified fields of the deleted rows. If no fields are specified, all fields will be returned.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/delete#delete-with-return} \n\t * \n\t * @example\n\t * ```ts\n\t * // Delete all cars with the green color and return all fields\n\t * const deletedCars: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t * \n\t * // Delete all cars with the green color and return only their id and brand fields\n\t * const deletedCarsIdsAndBrands: { id: number, brand: string }[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): SQLiteDeleteReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): SQLiteDeleteReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteDeleteReturning<this, TDynamic, any> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildDeleteQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\tprepare(isOneTimeQuery?: boolean): SQLiteDeletePrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t) as SQLiteDeletePrepare<this>;\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this.prepare(true).run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this.prepare(true).all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this.prepare(true).get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this.prepare(true).values(placeholderValues);\n\t};\n\n\toverride async execute(placeholderValues?: Record<string, unknown>): Promise<SQLiteDeleteExecute<this>> {\n\t\treturn this.prepare(true).execute(placeholderValues) as SQLiteDeleteExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteDeleteDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "import { entityKind, is } from '~/entity.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport { Param, SQL, sql } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { IndexColumn } from '~/sqlite-core/indexes.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Table } from '~/table.ts';\nimport { type DrizzleTypeError, mapUpdateSet, orderSelectedFields, type Simplify } from '~/utils.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\nimport type { SQLiteUpdateSetSource } from './update.ts';\nimport type { SQLiteColumn } from '../columns/common.ts';\n\nexport interface SQLiteInsertConfig<TTable extends SQLiteTable = SQLiteTable> {\n\ttable: TTable;\n\tvalues: Record<string, Param | SQL>[];\n\tonConflict?: SQL;\n\treturning?: SelectedFieldsOrdered;\n}\n\nexport type SQLiteInsertValue<TTable extends SQLiteTable> = Simplify<\n\t{\n\t\t[Key in keyof TTable['$inferInsert']]: TTable['$inferInsert'][Key] | SQL | Placeholder;\n\t}\n>;\n\nexport class SQLiteInsertBuilder<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteInsertBuilder';\n\n\tconstructor(\n\t\tprotected table: TTable,\n\t\tprotected session: SQLiteSession<any, any, any, any>,\n\t\tprotected dialect: SQLiteDialect,\n\t) {}\n\n\tvalues(value: SQLiteInsertValue<TTable>): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tvalues(values: SQLiteInsertValue<TTable>[]): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tvalues(\n\t\tvalues: SQLiteInsertValue<TTable> | SQLiteInsertValue<TTable>[],\n\t): SQLiteInsertBase<TTable, TResultType, TRunResult> {\n\t\tvalues = Array.isArray(values) ? values : [values];\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('values() must be called with at least one value');\n\t\t}\n\t\tconst mappedValues = values.map((entry) => {\n\t\t\tconst result: Record<string, Param | SQL> = {};\n\t\t\tconst cols = this.table[Table.Symbol.Columns];\n\t\t\tfor (const colKey of Object.keys(entry)) {\n\t\t\t\tconst colValue = entry[colKey as keyof typeof entry];\n\t\t\t\tresult[colKey] = is(colValue, SQL) ? colValue : new Param(colValue, cols[colKey]);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\n\t\t// if (mappedValues.length > 1 && mappedValues.some((t) => Object.keys(t).length === 0)) {\n\t\t// \tthrow new Error(\n\t\t// \t\t`One of the values you want to insert is empty. In SQLite you can insert only one empty object per statement. For this case Drizzle with use \"INSERT INTO ... DEFAULT VALUES\" syntax`,\n\t\t// \t);\n\t\t// }\n\n\t\treturn new SQLiteInsertBase(this.table, mappedValues, this.session, this.dialect);\n\t}\n}\n\nexport type SQLiteInsertWithout<T extends AnySQLiteInsert, TDynamic extends boolean, K extends keyof T & string> =\n\tTDynamic extends true ? T\n\t\t: Omit<\n\t\t\tSQLiteInsertBase<\n\t\t\t\tT['_']['table'],\n\t\t\t\tT['_']['resultType'],\n\t\t\t\tT['_']['runResult'],\n\t\t\t\tT['_']['returning'],\n\t\t\t\tTDynamic,\n\t\t\t\tT['_']['excludedMethods'] | K\n\t\t\t>,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>;\n\nexport type SQLiteInsertReturning<\n\tT extends AnySQLiteInsert,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = SQLiteInsertWithout<\n\tSQLiteInsertBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteInsertReturningAll<\n\tT extends AnySQLiteInsert,\n\tTDynamic extends boolean,\n> = SQLiteInsertWithout<\n\tSQLiteInsertBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteInsertOnConflictDoUpdateConfig<T extends AnySQLiteInsert> = {\n\ttarget: IndexColumn | IndexColumn[];\n\twhere?: SQL;\n\tset: SQLiteUpdateSetSource<T['_']['table']>;\n};\n\nexport type SQLiteInsertDynamic<T extends AnySQLiteInsert> = SQLiteInsert<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type SQLiteInsertExecute<T extends AnySQLiteInsert> = T['_']['returning'] extends undefined ? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteInsertPrepare<T extends AnySQLiteInsert> = SQLitePreparedQuery<\n\t{\n\t\ttype: T['_']['resultType'];\n\t\trun: T['_']['runResult'];\n\t\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'][];\n\t\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'];\n\t\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t\t: any[][];\n\t\texecute: SQLiteInsertExecute<T>;\n\t}\n>;\n\nexport type AnySQLiteInsert = SQLiteInsertBase<any, any, any, any, any, any>;\n\nexport type SQLiteInsert<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTReturning = any,\n> = SQLiteInsertBase<TTable, TResultType, TRunResult, TReturning, true, never>;\n\nexport interface SQLiteInsertBase<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tSQLWrapper,\n\tQueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>\n{\n\treadonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteInsertBase<\n\tTTable extends SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic readonly [entityKind]: string = 'SQLiteInsert';\n\n\t/** @internal */\n\tconfig: SQLiteInsertConfig<TTable>;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tvalues: SQLiteInsertConfig['values'],\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, values };\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t * \n\t * Calling this method will return the specified fields of the inserted rows. If no fields are specified, all fields will be returned.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/insert#insert-returning}\n\t * \n\t * @example\n\t * ```ts\n\t * // Insert one row and return all fields\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t * \n\t * // Insert one row and return only the id\n\t * const insertedCarId: { id: number }[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning({ id: cars.id });\n\t * ```\n\t */\n\treturning(): SQLiteInsertReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): SQLiteInsertReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.config.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteInsertWithout<AnySQLiteInsert, TDynamic, 'returning'> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `on conflict do nothing` clause to the query.\n\t * \n\t * Calling this method simply avoids inserting a row as its alternative action.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/insert#on-conflict-do-nothing}\n\t * \n\t * @param config The `target` and `where` clauses.\n\t * \n\t * @example\n\t * ```ts\n\t * // Insert one row and cancel the insert if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing();\n\t * \n\t * // Explicitly specify conflict target\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing({ target: cars.id });\n\t * ```\n\t */\n\tonConflictDoNothing(config: { target?: IndexColumn | IndexColumn[]; where?: SQL } = {}): this {\n\t\tif (config.target === undefined) {\n\t\t\tthis.config.onConflict = sql`do nothing`;\n\t\t} else {\n\t\t\tconst targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;\n\t\t\tconst whereSql = config.where ? sql` where ${config.where}` : sql``;\n\t\t\tthis.config.onConflict = sql`${targetSql} do nothing${whereSql}`;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds an `on conflict do update` clause to the query.\n\t * \n\t * Calling this method will update the existing row that conflicts with the row proposed for insertion as its alternative action.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/insert#upserts-and-conflicts} \n\t * \n\t * @param config The `target`, `set` and `where` clauses.\n\t * \n\t * @example\n\t * ```ts\n\t * // Update the row if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({ \n\t *     target: cars.id, \n\t *     set: { brand: 'Porsche' } \n\t *   });\n\t * \n\t * // Upsert with 'where' clause\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({\n\t *     target: cars.id,\n\t *     set: { brand: 'newBMW' },\n\t *     where: sql`${cars.createdAt} > '2023-01-01'::date`,\n\t *   });\n\t * ```\n\t */\n\tonConflictDoUpdate(config: SQLiteInsertOnConflictDoUpdateConfig<this>): this {\n\t\tconst targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;\n\t\tconst whereSql = config.where ? sql` where ${config.where}` : sql``;\n\t\tconst setSql = this.dialect.buildUpdateSet(this.config.table, mapUpdateSet(this.config.table, config.set));\n\t\tthis.config.onConflict = sql`${targetSql} do update set ${setSql}${whereSql}`;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildInsertQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\tprepare(isOneTimeQuery?: boolean): SQLiteInsertPrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t) as SQLiteInsertPrepare<this>;\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this.prepare(true).run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this.prepare(true).all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this.prepare(true).get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this.prepare(true).values(placeholderValues);\n\t};\n\n\toverride async execute(): Promise<SQLiteInsertExecute<this>> {\n\t\treturn (this.config.returning ? this.all() : this.run()) as SQLiteInsertExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteInsertDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\n\nexport class DrizzleError extends Error {\n\tstatic readonly [entityKind]: string = 'DrizzleError';\n\n\tconstructor({ message, cause }: { message?: string; cause?: unknown }) {\n\t\tsuper(message);\n\t\tthis.name = 'DrizzleError';\n\t\tthis.cause = cause;\n\t}\n}\n\nexport class TransactionRollbackError extends DrizzleError {\n\tstatic readonly [entityKind]: string = 'TransactionRollbackError';\n\n\tconstructor() {\n\t\tsuper({ message: 'Rollback' });\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { ColumnsSelection} from '~/sql/sql.ts';\nimport { View } from '~/sql/sql.ts';\n\nexport abstract class SQLiteViewBase<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelection extends ColumnsSelection = ColumnsSelection,\n> extends View<TName, TExisting, TSelection> {\n\tstatic readonly [entityKind]: string = 'SQLiteViewBase';\n\n\tdeclare _: View<TName, TExisting, TSelection>['_'] & {\n\t\tviewBrand: 'SQLiteView';\n\t};\n}\n", "import { aliasedTable, aliasedTableColumn, mapColumnsInAliasedSQLToAlias, mapColumnsInSQLToAlias } from '~/alias.ts';\nimport type { AnyColumn } from '~/column.ts';\nimport { Column } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport { DrizzleError } from '~/errors.ts';\nimport type { MigrationMeta } from '~/migrator.ts';\nimport {\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tgetOperators,\n\tgetOrderByOperators,\n\tMany,\n\tnormalizeRelation,\n\tOne,\n\ttype Relation,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport { Param, type QueryWithTypings, SQL, sql, type SQLChunk } from '~/sql/sql.ts';\nimport type { Name} from '~/sql/index.ts';\nimport { and, eq } from '~/sql/index.ts'\nimport { SQLiteColumn } from '~/sqlite-core/columns/index.ts';\nimport type { SQLiteDeleteConfig, SQLiteInsertConfig, SQLiteUpdateConfig } from '~/sqlite-core/query-builders/index.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Subquery, SubqueryConfig } from '~/subquery.ts';\nimport { getTableName, Table } from '~/table.ts';\nimport { orderSelectedFields, type UpdateSet } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type {\n\tSelectedFieldsOrdered,\n\tSQLiteSelectConfig,\n\tSQLiteSelectJoinConfig,\n} from './query-builders/select.types.ts';\nimport type { SQLiteSession } from './session.ts';\nimport { SQLiteViewBase } from './view-base.ts';\n\nexport abstract class SQLiteDialect {\n\tstatic readonly [entityKind]: string = 'SQLiteDialect';\n\n\tescapeName(name: string): string {\n\t\treturn `\"${name}\"`;\n\t}\n\n\tescapeParam(_num: number): string {\n\t\treturn '?';\n\t}\n\n\tescapeString(str: string): string {\n\t\treturn `'${str.replace(/'/g, \"''\")}'`;\n\t}\n\n\tbuildDeleteQuery({ table, where, returning }: SQLiteDeleteConfig): SQL {\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\treturn sql`delete from ${table}${whereSql}${returningSql}`;\n\t}\n\n\tbuildUpdateSet(table: SQLiteTable, set: UpdateSet): SQL {\n\t\tconst setEntries = Object.entries(set);\n\n\t\tconst setSize = setEntries.length;\n\t\treturn sql.join(\n\t\t\tsetEntries\n\t\t\t\t.flatMap(([colName, value], i): SQL[] => {\n\t\t\t\t\tconst col: SQLiteColumn = table[Table.Symbol.Columns][colName]!;\n\t\t\t\t\tconst res = sql`${sql.identifier(col.name)} = ${value}`;\n\t\t\t\t\tif (i < setSize - 1) {\n\t\t\t\t\t\treturn [res, sql.raw(', ')];\n\t\t\t\t\t}\n\t\t\t\t\treturn [res];\n\t\t\t\t}),\n\t\t);\n\t}\n\n\tbuildUpdateQuery({ table, set, where, returning }: SQLiteUpdateConfig): SQL {\n\t\tconst setSql = this.buildUpdateSet(table, set);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\treturn sql`update ${table} set ${setSql}${whereSql}${returningSql}`;\n\t}\n\n\t/**\n\t * Builds selection SQL with provided fields/expressions\n\t *\n\t * Examples:\n\t *\n\t * `select <selection> from`\n\t *\n\t * `insert ... returning <selection>`\n\t *\n\t * If `isSingleTable` is true, then columns won't be prefixed with table name\n\t */\n\tprivate buildSelection(\n\t\tfields: SelectedFieldsOrdered,\n\t\t{ isSingleTable = false }: { isSingleTable?: boolean } = {},\n\t): SQL {\n\t\tconst columnsLen = fields.length;\n\n\t\tconst chunks = fields\n\t\t\t.flatMap(({ field }, i) => {\n\t\t\t\tconst chunk: SQLChunk[] = [];\n\n\t\t\t\tif (is(field, SQL.Aliased) && field.isSelectionField) {\n\t\t\t\t\tchunk.push(sql.identifier(field.fieldAlias));\n\t\t\t\t} else if (is(field, SQL.Aliased) || is(field, SQL)) {\n\t\t\t\t\tconst query = is(field, SQL.Aliased) ? field.sql : field;\n\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(\n\t\t\t\t\t\t\tnew SQL(\n\t\t\t\t\t\t\t\tquery.queryChunks.map((c) => {\n\t\t\t\t\t\t\t\t\tif (is(c, Column)) {\n\t\t\t\t\t\t\t\t\t\treturn sql.identifier(c.name);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn c;\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(query);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is(field, SQL.Aliased)) {\n\t\t\t\t\t\tchunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);\n\t\t\t\t\t}\n\t\t\t\t} else if (is(field, Column)) {\n\t\t\t\t\tconst tableName = field.table[Table.Symbol.Name];\n\t\t\t\t\tconst columnName = field.name;\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(sql.identifier(columnName));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(sql`${sql.identifier(tableName)}.${sql.identifier(columnName)}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (i < columnsLen - 1) {\n\t\t\t\t\tchunk.push(sql`, `);\n\t\t\t\t}\n\n\t\t\t\treturn chunk;\n\t\t\t});\n\n\t\treturn sql.join(chunks);\n\t}\n\n\tbuildSelectQuery(\n\t\t{\n\t\t\twithList,\n\t\t\tfields,\n\t\t\tfieldsFlat,\n\t\t\twhere,\n\t\t\thaving,\n\t\t\ttable,\n\t\t\tjoins,\n\t\t\torderBy,\n\t\t\tgroupBy,\n\t\t\tlimit,\n\t\t\toffset,\n\t\t\tdistinct,\n\t\t\tsetOperators,\n\t\t}: SQLiteSelectConfig,\n\t): SQL {\n\t\tconst fieldsList = fieldsFlat ?? orderSelectedFields<SQLiteColumn>(fields);\n\t\tfor (const f of fieldsList) {\n\t\t\tif (\n\t\t\t\tis(f.field, Column)\n\t\t\t\t&& getTableName(f.field.table)\n\t\t\t\t\t!== (is(table, Subquery)\n\t\t\t\t\t\t? table[SubqueryConfig].alias\n\t\t\t\t\t\t: is(table, SQLiteViewBase)\n\t\t\t\t\t\t? table[ViewBaseConfig].name\n\t\t\t\t\t\t: is(table, SQL)\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: getTableName(table))\n\t\t\t\t&& !((table) =>\n\t\t\t\t\tjoins?.some(({ alias }) =>\n\t\t\t\t\t\talias === (table[Table.Symbol.IsAlias] ? getTableName(table) : table[Table.Symbol.BaseName])\n\t\t\t\t\t))(f.field.table)\n\t\t\t) {\n\t\t\t\tconst tableName = getTableName(f.field.table);\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Your \"${\n\t\t\t\t\t\tf.path.join('->')\n\t\t\t\t\t}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst isSingleTable = !joins || joins.length === 0;\n\n\t\tlet withSql: SQL | undefined;\n\t\tif (withList?.length) {\n\t\t\tconst withSqlChunks = [sql`with `];\n\t\t\tfor (const [i, w] of withList.entries()) {\n\t\t\t\twithSqlChunks.push(sql`${sql.identifier(w[SubqueryConfig].alias)} as (${w[SubqueryConfig].sql})`);\n\t\t\t\tif (i < withList.length - 1) {\n\t\t\t\t\twithSqlChunks.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t\twithSqlChunks.push(sql` `);\n\t\t\twithSql = sql.join(withSqlChunks);\n\t\t}\n\n\t\tconst distinctSql = distinct ? sql` distinct` : undefined;\n\n\t\tconst selection = this.buildSelection(fieldsList, { isSingleTable });\n\n\t\tconst tableSql = (() => {\n\t\t\tif (is(table, Table) && table[Table.Symbol.OriginalName] !== table[Table.Symbol.Name]) {\n\t\t\t\treturn sql`${sql.identifier(table[Table.Symbol.OriginalName])} ${sql.identifier(table[Table.Symbol.Name])}`;\n\t\t\t}\n\n\t\t\treturn table;\n\t\t})();\n\n\t\tconst joinsArray: SQL[] = [];\n\n\t\tif (joins) {\n\t\t\tfor (const [index, joinMeta] of joins.entries()) {\n\t\t\t\tif (index === 0) {\n\t\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t\t}\n\t\t\t\tconst table = joinMeta.table;\n\n\t\t\t\tif (is(table, SQLiteTable)) {\n\t\t\t\t\tconst tableName = table[SQLiteTable.Symbol.Name];\n\t\t\t\t\tconst tableSchema = table[SQLiteTable.Symbol.Schema];\n\t\t\t\t\tconst origTableName = table[SQLiteTable.Symbol.OriginalName];\n\t\t\t\t\tconst alias = tableName === origTableName ? undefined : joinMeta.alias;\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join ${tableSchema ? sql`${sql.identifier(tableSchema)}.` : undefined}${\n\t\t\t\t\t\t\tsql.identifier(origTableName)\n\t\t\t\t\t\t}${alias && sql` ${sql.identifier(alias)}`} on ${joinMeta.on}`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join ${table} on ${joinMeta.on}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (index < joins.length - 1) {\n\t\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst joinsSql = sql.join(joinsArray);\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst havingSql = having ? sql` having ${having}` : undefined;\n\n\t\tconst orderByList: (SQLiteColumn | SQL | SQL.Aliased)[] = [];\n\t\tif (orderBy) {\n\t\t\tfor (const [index, orderByValue] of orderBy.entries()) {\n\t\t\t\torderByList.push(orderByValue);\n\n\t\t\t\tif (index < orderBy.length - 1) {\n\t\t\t\t\torderByList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst groupByList: (SQL | AnyColumn | SQL.Aliased)[] = [];\n\t\tif (groupBy) {\n\t\t\tfor (const [index, groupByValue] of groupBy.entries()) {\n\t\t\t\tgroupByList.push(groupByValue);\n\n\t\t\t\tif (index < groupBy.length - 1) {\n\t\t\t\t\tgroupByList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst groupBySql = groupByList.length > 0 ? sql` group by ${sql.join(groupByList)}` : undefined;\n\n\t\tconst orderBySql = orderByList.length > 0 ? sql` order by ${sql.join(orderByList)}` : undefined;\n\n\t\tconst limitSql = limit ? sql` limit ${limit}` : undefined;\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\tconst finalQuery =\n\t\t\tsql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}`;\n\n\t\tif (setOperators.length > 0) {\n\t\t\treturn this.buildSetOperations(finalQuery, setOperators);\n\t\t}\n\n\t\treturn finalQuery;\n\t}\n\n\tbuildSetOperations(leftSelect: SQL, setOperators: SQLiteSelectConfig['setOperators']): SQL {\n\t\tconst [setOperator, ...rest] = setOperators;\n\n\t\tif (!setOperator) {\n\t\t\tthrow new Error('Cannot pass undefined values to any set operator');\n\t\t}\n\n\t\tif (rest.length === 0) {\n\t\t\treturn this.buildSetOperationQuery({ leftSelect, setOperator });\n\t\t}\n\n\t\t// Some recursive magic here\n\t\treturn this.buildSetOperations(\n\t\t\tthis.buildSetOperationQuery({ leftSelect, setOperator }),\n\t\t\trest,\n\t\t);\n\t}\n\n\tbuildSetOperationQuery({\n\t\tleftSelect,\n\t\tsetOperator: { type, isAll, rightSelect, limit, orderBy, offset },\n\t}: { leftSelect: SQL; setOperator: SQLiteSelectConfig['setOperators'][number] }): SQL {\n\t\t// SQLite doesn't support parenthesis in set operations\n\t\tconst leftChunk = sql`${leftSelect.getSQL()} `;\n\t\tconst rightChunk = sql`${rightSelect.getSQL()}`;\n\n\t\tlet orderBySql;\n\t\tif (orderBy && orderBy.length > 0) {\n\t\t\tconst orderByValues: (SQL<unknown> | Name)[] = [];\n\n\t\t\t// The next bit is necessary because the sql operator replaces ${table.column} with `table`.`column`\n\t\t\t// which is invalid Sql syntax, Table from one of the SELECTs cannot be used in global ORDER clause\n\t\t\tfor (const singleOrderBy of orderBy) {\n\t\t\t\tif (is(singleOrderBy, SQLiteColumn)) {\n\t\t\t\t\torderByValues.push(sql.identifier(singleOrderBy.name));\n\t\t\t\t} else if (is(singleOrderBy, SQL)) {\n\t\t\t\t\tfor (let i = 0; i < singleOrderBy.queryChunks.length; i++) {\n\t\t\t\t\t\tconst chunk = singleOrderBy.queryChunks[i];\n\n\t\t\t\t\t\tif (is(chunk, SQLiteColumn)) {\n\t\t\t\t\t\t\tsingleOrderBy.queryChunks[i] = sql.identifier(chunk.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t} else {\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\torderBySql = sql` order by ${sql.join(orderByValues, sql`, `)}`;\n\t\t}\n\n\t\tconst limitSql = limit ? sql` limit ${limit}` : undefined;\n\n\t\tconst operatorChunk = sql.raw(`${type} ${isAll ? 'all ' : ''}`);\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\treturn sql`${leftChunk}${operatorChunk}${rightChunk}${orderBySql}${limitSql}${offsetSql}`;\n\t}\n\n\tbuildInsertQuery({ table, values, onConflict, returning }: SQLiteInsertConfig): SQL {\n\t\t// const isSingleValue = values.length === 1;\n\t\tconst valuesSqlList: ((SQLChunk | SQL)[] | SQL)[] = [];\n\t\tconst columns: Record<string, SQLiteColumn> = table[Table.Symbol.Columns];\n\n\t\tconst colEntries: [string, SQLiteColumn][] = Object.entries(columns);\n\t\tconst insertOrder = colEntries.map(([, column]) => sql.identifier(column.name));\n\n\t\tfor (const [valueIndex, value] of values.entries()) {\n\t\t\tconst valueList: (SQLChunk | SQL)[] = [];\n\t\t\tfor (const [fieldName, col] of colEntries) {\n\t\t\t\tconst colValue = value[fieldName];\n\t\t\t\tif (colValue === undefined || (is(colValue, Param) && colValue.value === undefined)) {\n\t\t\t\t\tlet defaultValue;\n\t\t\t\t\tif (col.default !== null && col.default !== undefined) {\n\t\t\t\t\t\tdefaultValue = is(col.default, SQL) ? col.default : sql.param(col.default, col);\n\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\t} else if (col.defaultFn !== undefined) {\n\t\t\t\t\t\tconst defaultFnResult = col.defaultFn();\n\t\t\t\t\t\tdefaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdefaultValue = sql`null`;\n\t\t\t\t\t}\n\t\t\t\t\tvalueList.push(defaultValue);\n\t\t\t\t} else {\n\t\t\t\t\tvalueList.push(colValue);\n\t\t\t\t}\n\t\t\t}\n\t\t\tvaluesSqlList.push(valueList);\n\t\t\tif (valueIndex < values.length - 1) {\n\t\t\t\tvaluesSqlList.push(sql`, `);\n\t\t\t}\n\t\t}\n\n\t\tconst valuesSql = sql.join(valuesSqlList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst onConflictSql = onConflict ? sql` on conflict ${onConflict}` : undefined;\n\n\t\t// if (isSingleValue && valuesSqlList.length === 0){\n\t\t// \treturn sql`insert into ${table} default values ${onConflictSql}${returningSql}`;\n\t\t// }\n\n\t\treturn sql`insert into ${table} ${insertOrder} values ${valuesSql}${onConflictSql}${returningSql}`;\n\t}\n\n\tsqlToQuery(sql: SQL): QueryWithTypings {\n\t\treturn sql.toQuery({\n\t\t\tescapeName: this.escapeName,\n\t\t\tescapeParam: this.escapeParam,\n\t\t\tescapeString: this.escapeString,\n\t\t});\n\t}\n\n\tbuildRelationalQuery({\n\t\tfullSchema,\n\t\tschema,\n\t\ttableNamesMap,\n\t\ttable,\n\t\ttableConfig,\n\t\tqueryConfig: config,\n\t\ttableAlias,\n\t\tnestedQueryRelation,\n\t\tjoinOn,\n\t}: {\n\t\tfullSchema: Record<string, unknown>;\n\t\tschema: TablesRelationalConfig;\n\t\ttableNamesMap: Record<string, string>;\n\t\ttable: SQLiteTable;\n\t\ttableConfig: TableRelationalConfig;\n\t\tqueryConfig: true | DBQueryConfig<'many', true>;\n\t\ttableAlias: string;\n\t\tnestedQueryRelation?: Relation;\n\t\tjoinOn?: SQL;\n\t}): BuildRelationalQueryResult<SQLiteTable, SQLiteColumn> {\n\t\tlet selection: BuildRelationalQueryResult<SQLiteTable, SQLiteColumn>['selection'] = [];\n\t\tlet limit, offset, orderBy: SQLiteSelectConfig['orderBy'] = [], where;\n\t\tconst joins: SQLiteSelectJoinConfig[] = [];\n\n\t\tif (config === true) {\n\t\t\tconst selectionEntries = Object.entries(tableConfig.columns);\n\t\t\tselection = selectionEntries.map((\n\t\t\t\t[key, value],\n\t\t\t) => ({\n\t\t\t\tdbKey: value.name,\n\t\t\t\ttsKey: key,\n\t\t\t\tfield: aliasedTableColumn(value as SQLiteColumn, tableAlias),\n\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\tisJson: false,\n\t\t\t\tselection: [],\n\t\t\t}));\n\t\t} else {\n\t\t\tconst aliasedColumns = Object.fromEntries(\n\t\t\t\tObject.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)]),\n\t\t\t);\n\n\t\t\tif (config.where) {\n\t\t\t\tconst whereSql = typeof config.where === 'function'\n\t\t\t\t\t? config.where(aliasedColumns, getOperators())\n\t\t\t\t\t: config.where;\n\t\t\t\twhere = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n\t\t\t}\n\n\t\t\tconst fieldsSelection: { tsKey: string; value: SQLiteColumn | SQL.Aliased }[] = [];\n\t\t\tlet selectedColumns: string[] = [];\n\n\t\t\t// Figure out which columns to select\n\t\t\tif (config.columns) {\n\t\t\t\tlet isIncludeMode = false;\n\n\t\t\t\tfor (const [field, value] of Object.entries(config.columns)) {\n\t\t\t\t\tif (value === undefined) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (field in tableConfig.columns) {\n\t\t\t\t\t\tif (!isIncludeMode && value === true) {\n\t\t\t\t\t\t\tisIncludeMode = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tselectedColumns.push(field);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (selectedColumns.length > 0) {\n\t\t\t\t\tselectedColumns = isIncludeMode\n\t\t\t\t\t\t? selectedColumns.filter((c) => config.columns?.[c] === true)\n\t\t\t\t\t\t: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Select all columns if selection is not specified\n\t\t\t\tselectedColumns = Object.keys(tableConfig.columns);\n\t\t\t}\n\n\t\t\tfor (const field of selectedColumns) {\n\t\t\t\tconst column = tableConfig.columns[field]! as SQLiteColumn;\n\t\t\t\tfieldsSelection.push({ tsKey: field, value: column });\n\t\t\t}\n\n\t\t\tlet selectedRelations: {\n\t\t\t\ttsKey: string;\n\t\t\t\tqueryConfig: true | DBQueryConfig<'many', false>;\n\t\t\t\trelation: Relation;\n\t\t\t}[] = [];\n\n\t\t\t// Figure out which relations to select\n\t\t\tif (config.with) {\n\t\t\t\tselectedRelations = Object.entries(config.with)\n\t\t\t\t\t.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])\n\t\t\t\t\t.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));\n\t\t\t}\n\n\t\t\tlet extras;\n\n\t\t\t// Figure out which extras to select\n\t\t\tif (config.extras) {\n\t\t\t\textras = typeof config.extras === 'function'\n\t\t\t\t\t? config.extras(aliasedColumns, { sql })\n\t\t\t\t\t: config.extras;\n\t\t\t\tfor (const [tsKey, value] of Object.entries(extras)) {\n\t\t\t\t\tfieldsSelection.push({\n\t\t\t\t\t\ttsKey,\n\t\t\t\t\t\tvalue: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Transform `fieldsSelection` into `selection`\n\t\t\t// `fieldsSelection` shouldn't be used after this point\n\t\t\tfor (const { tsKey, value } of fieldsSelection) {\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,\n\t\t\t\t\ttsKey,\n\t\t\t\t\tfield: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n\t\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\t\tisJson: false,\n\t\t\t\t\tselection: [],\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet orderByOrig = typeof config.orderBy === 'function'\n\t\t\t\t? config.orderBy(aliasedColumns, getOrderByOperators())\n\t\t\t\t: config.orderBy ?? [];\n\t\t\tif (!Array.isArray(orderByOrig)) {\n\t\t\t\torderByOrig = [orderByOrig];\n\t\t\t}\n\t\t\torderBy = orderByOrig.map((orderByValue) => {\n\t\t\t\tif (is(orderByValue, Column)) {\n\t\t\t\t\treturn aliasedTableColumn(orderByValue, tableAlias) as SQLiteColumn;\n\t\t\t\t}\n\t\t\t\treturn mapColumnsInSQLToAlias(orderByValue, tableAlias);\n\t\t\t});\n\n\t\t\tlimit = config.limit;\n\t\t\toffset = config.offset;\n\n\t\t\t// Process all relations\n\t\t\tfor (\n\t\t\t\tconst {\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tqueryConfig: selectedRelationConfigValue,\n\t\t\t\t\trelation,\n\t\t\t\t} of selectedRelations\n\t\t\t) {\n\t\t\t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t\t\t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n\t\t\t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t\t\t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t\t\t\t// const relationTable = schema[relationTableTsName]!;\n\t\t\t\tconst joinOn = and(\n\t\t\t\t\t...normalizedRelation.fields.map((field, i) =>\n\t\t\t\t\t\teq(\n\t\t\t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t\t\t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tconst builtRelation = this.buildRelationalQuery({\n\t\t\t\t\tfullSchema,\n\t\t\t\t\tschema,\n\t\t\t\t\ttableNamesMap,\n\t\t\t\t\ttable: fullSchema[relationTableTsName] as SQLiteTable,\n\t\t\t\t\ttableConfig: schema[relationTableTsName]!,\n\t\t\t\t\tqueryConfig: is(relation, One)\n\t\t\t\t\t\t? (selectedRelationConfigValue === true\n\t\t\t\t\t\t\t? { limit: 1 }\n\t\t\t\t\t\t\t: { ...selectedRelationConfigValue, limit: 1 })\n\t\t\t\t\t\t: selectedRelationConfigValue,\n\t\t\t\t\ttableAlias: relationTableAlias,\n\t\t\t\t\tjoinOn,\n\t\t\t\t\tnestedQueryRelation: relation,\n\t\t\t\t});\n\t\t\t\tconst field = (sql`(${builtRelation.sql})`).as(selectedRelationTsKey);\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: selectedRelationTsKey,\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tfield,\n\t\t\t\t\trelationTableTsKey: relationTableTsName,\n\t\t\t\t\tisJson: true,\n\t\t\t\t\tselection: builtRelation.selection,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (selection.length === 0) {\n\t\t\tthrow new DrizzleError({\n\t\t\t\tmessage:\n\t\t\t\t\t`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\"). You need to have at least one item in \"columns\", \"with\" or \"extras\". If you need to select all columns, omit the \"columns\" key or set it to undefined.`,\n\t\t\t});\n\t\t}\n\n\t\tlet result;\n\n\t\twhere = and(joinOn, where);\n\n\t\tif (nestedQueryRelation) {\n\t\t\tlet field = sql`json_array(${\n\t\t\t\tsql.join(\n\t\t\t\t\tselection.map(({ field }) =>\n\t\t\t\t\t\tis(field, SQLiteColumn) ? sql.identifier(field.name) : is(field, SQL.Aliased) ? field.sql : field\n\t\t\t\t\t),\n\t\t\t\t\tsql`, `,\n\t\t\t\t)\n\t\t\t})`;\n\t\t\tif (is(nestedQueryRelation, Many)) {\n\t\t\t\tfield = sql`coalesce(json_group_array(${field}), json_array())`;\n\t\t\t}\n\t\t\tconst nestedSelection = [{\n\t\t\t\tdbKey: 'data',\n\t\t\t\ttsKey: 'data',\n\t\t\t\tfield: field.as('data'),\n\t\t\t\tisJson: true,\n\t\t\t\trelationTableTsKey: tableConfig.tsName,\n\t\t\t\tselection,\n\t\t\t}];\n\n\t\t\tconst needsSubquery = limit !== undefined || offset !== undefined || orderBy.length > 0;\n\n\t\t\tif (needsSubquery) {\n\t\t\t\tresult = this.buildSelectQuery({\n\t\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\t\tfields: {},\n\t\t\t\t\tfieldsFlat: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: [],\n\t\t\t\t\t\t\tfield: sql.raw('*'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\twhere,\n\t\t\t\t\tlimit,\n\t\t\t\t\toffset,\n\t\t\t\t\torderBy,\n\t\t\t\t\tsetOperators: [],\n\t\t\t\t});\n\n\t\t\t\twhere = undefined;\n\t\t\t\tlimit = undefined;\n\t\t\t\toffset = undefined;\n\t\t\t\torderBy = undefined;\n\t\t\t} else {\n\t\t\t\tresult = aliasedTable(table, tableAlias);\n\t\t\t}\n\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: is(result, SQLiteTable) ? result : new Subquery(result, {}, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: nestedSelection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t} else {\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: selection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttableTsKey: tableConfig.tsName,\n\t\t\tsql: result,\n\t\t\tselection,\n\t\t};\n\t}\n}\n\nexport class SQLiteSyncDialect extends SQLiteDialect {\n\tstatic readonly [entityKind]: string = 'SQLiteSyncDialect';\n\n\tmigrate(\n\t\tmigrations: MigrationMeta[],\n\t\tsession: SQLiteSession<'sync', unknown, Record<string, unknown>, TablesRelationalConfig>,\n\t): void {\n\t\tconst migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS \"__drizzle_migrations\" (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n\t\tsession.run(migrationTableCreate);\n\n\t\tconst dbMigrations = session.values<[number, string, string]>(\n\t\t\tsql`SELECT id, hash, created_at FROM \"__drizzle_migrations\" ORDER BY created_at DESC LIMIT 1`,\n\t\t);\n\n\t\tconst lastDbMigration = dbMigrations[0] ?? undefined;\n\t\tsession.run(sql`BEGIN`);\n\n\t\ttry {\n\t\t\tfor (const migration of migrations) {\n\t\t\t\tif (!lastDbMigration || Number(lastDbMigration[2])! < migration.folderMillis) {\n\t\t\t\t\tfor (const stmt of migration.sql) {\n\t\t\t\t\t\tsession.run(sql.raw(stmt));\n\t\t\t\t\t}\n\t\t\t\t\tsession.run(\n\t\t\t\t\t\tsql`INSERT INTO \"__drizzle_migrations\" (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsession.run(sql`COMMIT`);\n\t\t} catch (e) {\n\t\t\tsession.run(sql`ROLLBACK`);\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n\nexport class SQLiteAsyncDialect extends SQLiteDialect {\n\tstatic readonly [entityKind]: string = 'SQLiteAsyncDialect';\n\n\tasync migrate(\n\t\tmigrations: MigrationMeta[],\n\t\tsession: SQLiteSession<'async', unknown, Record<string, unknown>, TablesRelationalConfig>,\n\t): Promise<void> {\n\t\tconst migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS \"__drizzle_migrations\" (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n\t\tawait session.run(migrationTableCreate);\n\n\t\tconst dbMigrations = await session.values<[number, string, string]>(\n\t\t\tsql`SELECT id, hash, created_at FROM \"__drizzle_migrations\" ORDER BY created_at DESC LIMIT 1`,\n\t\t);\n\n\t\tconst lastDbMigration = dbMigrations[0] ?? undefined;\n\n\t\tawait session.transaction(async (tx) => {\n\t\t\tfor (const migration of migrations) {\n\t\t\t\tif (!lastDbMigration || Number(lastDbMigration[2])! < migration.folderMillis) {\n\t\t\t\t\tfor (const stmt of migration.sql) {\n\t\t\t\t\t\tawait tx.run(sql.raw(stmt));\n\t\t\t\t\t}\n\t\t\t\t\tawait tx.run(\n\t\t\t\t\t\tsql`INSERT INTO \"__drizzle_migrations\" (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { SQL, SQLWrapper } from '~/sql/index.ts';\n\nexport abstract class TypedQueryBuilder<TSelection, TResult = unknown> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'TypedQueryBuilder';\n\n\tdeclare _: {\n\t\tselectedFields: TSelection;\n\t\tresult: TResult;\n\t};\n\n\t/** @internal */\n\tgetSelectedFields(): TSelection {\n\t\treturn this._.selectedFields;\n\t}\n\n\tabstract getSQL(): SQL;\n}\n", "import { entityKind, is } from '~/entity.ts';\nimport { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type {\n\tBuildSubquerySelection,\n\tGetSelectTableName,\n\tGetSelectTableSelection,\n\tJoinNullability,\n\tJoinType,\n\tSelectMode,\n\tSelectResult,\n\tSetOperator,\n} from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SQL, View } from '~/sql/sql.ts';\nimport type { ColumnsSelection, Placeholder, Query } from '~/sql/sql.ts';\nimport type { SQLiteColumn } from '~/sqlite-core/columns/index.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLiteSession } from '~/sqlite-core/session.ts';\nimport type { SubqueryWithSelection } from '~/sqlite-core/subquery.ts';\nimport type { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Table } from '~/table.ts';\nimport {\n\tapplyMixins,\n\tgetTableColumns,\n\tgetTableLikeName,\n\thaveSameKeys,\n\torderSelectedFields,\n\ttype ValueOrArray,\n} from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type {\n\tAnySQLiteSelect,\n\tCreateSQLiteSelectFromBuilderMode,\n\tGetSQLiteSetOperators,\n\tSelectedFields,\n\tSetOperatorRightSelect,\n\tSQLiteCreateSetOperatorFn,\n\tSQLiteJoinFn,\n\tSQLiteSelectConfig,\n\tSQLiteSelectDynamic,\n\tSQLiteSelectExecute,\n\tSQLiteSelectHKT,\n\tSQLiteSelectHKTBase,\n\tSQLiteSelectPrepare,\n\tSQLiteSelectWithout,\n\tSQLiteSetOperatorExcludedMethods,\n\tSQLiteSetOperatorWithResult,\n} from './select.types.ts';\nimport { Subquery, SubqueryConfig } from '~/subquery.ts';\nimport { SQLiteViewBase } from '../view-base.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\n\nexport class SQLiteSelectBuilder<\n\tTSelection extends SelectedFields | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTBuilderMode extends 'db' | 'qb' = 'db',\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteSelectBuilder';\n\n\tprivate fields: TSelection;\n\tprivate session: SQLiteSession<any, any, any, any> | undefined;\n\tprivate dialect: SQLiteDialect;\n\tprivate withList: Subquery[] | undefined;\n\tprivate distinct: boolean | undefined;\n\n\tconstructor(\n\t\tconfig: {\n\t\t\tfields: TSelection;\n\t\t\tsession: SQLiteSession<any, any, any, any> | undefined;\n\t\t\tdialect: SQLiteDialect;\n\t\t\twithList?: Subquery[];\n\t\t\tdistinct?: boolean;\n\t\t},\n\t) {\n\t\tthis.fields = config.fields;\n\t\tthis.session = config.session;\n\t\tthis.dialect = config.dialect;\n\t\tthis.withList = config.withList;\n\t\tthis.distinct = config.distinct;\n\t}\n\n\tfrom<TFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL>(\n\t\tsource: TFrom,\n\t): CreateSQLiteSelectFromBuilderMode<\n\t\tTBuilderMode,\n\t\tGetSelectTableName<TFrom>,\n\t\tTResultType,\n\t\tTRunResult,\n\t\tTSelection extends undefined ? GetSelectTableSelection<TFrom> : TSelection,\n\t\tTSelection extends undefined ? 'single' : 'partial'\n\t> {\n\t\tconst isPartialSelect = !!this.fields;\n\n\t\tlet fields: SelectedFields;\n\t\tif (this.fields) {\n\t\t\tfields = this.fields;\n\t\t} else if (is(source, Subquery)) {\n\t\t\t// This is required to use the proxy handler to get the correct field values from the subquery\n\t\t\tfields = Object.fromEntries(\n\t\t\t\tObject.keys(source[SubqueryConfig].selection).map((\n\t\t\t\t\tkey,\n\t\t\t\t) => [key, source[key as unknown as keyof typeof source] as unknown as SelectedFields[string]]),\n\t\t\t);\n\t\t} else if (is(source, SQLiteViewBase)) {\n\t\t\tfields = source[ViewBaseConfig].selectedFields as SelectedFields;\n\t\t} else if (is(source, SQL)) {\n\t\t\tfields = {};\n\t\t} else {\n\t\t\tfields = getTableColumns<SQLiteTable>(source);\n\t\t}\n\n\t\treturn new SQLiteSelectBase({\n\t\t\ttable: source,\n\t\t\tfields,\n\t\t\tisPartialSelect,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\twithList: this.withList,\n\t\t\tdistinct: this.distinct,\n\t\t}) as any;\n\t}\n}\n\nexport abstract class SQLiteSelectQueryBuilderBase<\n\tTHKT extends SQLiteSelectHKTBase,\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode,\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends TypedQueryBuilder<TSelectedFields, TResult> {\n\tstatic readonly [entityKind]: string = 'SQLiteSelectQueryBuilder';\n\n\toverride readonly _: {\n\t\tdialect: 'sqlite';\n\t\treadonly hkt: THKT;\n\t\treadonly tableName: TTableName;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly selection: TSelection;\n\t\treadonly selectMode: TSelectMode;\n\t\treadonly nullabilityMap: TNullabilityMap;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TResult;\n\t\treadonly selectedFields: TSelectedFields;\n\t};\n\n\t/** @internal */\n\tconfig: SQLiteSelectConfig;\n\tprotected joinsNotNullableMap: Record<string, boolean>;\n\tprivate tableName: string | undefined;\n\tprivate isPartialSelect: boolean;\n\tprotected session: SQLiteSession<any, any, any, any> | undefined;\n\tprotected dialect: SQLiteDialect;\n\n\tconstructor(\n\t\t{ table, fields, isPartialSelect, session, dialect, withList, distinct }: {\n\t\t\ttable: SQLiteSelectConfig['table'];\n\t\t\tfields: SQLiteSelectConfig['fields'];\n\t\t\tisPartialSelect: boolean;\n\t\t\tsession: SQLiteSession<any, any, any, any> | undefined;\n\t\t\tdialect: SQLiteDialect;\n\t\t\twithList: Subquery[] | undefined;\n\t\t\tdistinct: boolean | undefined;\n\t\t},\n\t) {\n\t\tsuper();\n\t\tthis.config = {\n\t\t\twithList,\n\t\t\ttable,\n\t\t\tfields: { ...fields },\n\t\t\tdistinct,\n\t\t\tsetOperators: [],\n\t\t};\n\t\tthis.isPartialSelect = isPartialSelect;\n\t\tthis.session = session;\n\t\tthis.dialect = dialect;\n\t\tthis._ = {\n\t\t\tselectedFields: fields as TSelectedFields,\n\t\t} as this['_'];\n\t\tthis.tableName = getTableLikeName(table);\n\t\tthis.joinsNotNullableMap = typeof this.tableName === 'string' ? { [this.tableName]: true } : {};\n\t}\n\n\tprivate createJoin<TJoinType extends JoinType>(\n\t\tjoinType: TJoinType,\n\t): SQLiteJoinFn<this, TDynamic, TJoinType> {\n\t\treturn (\n\t\t\ttable: SQLiteTable | Subquery | SQLiteViewBase | SQL,\n\t\t\ton: ((aliases: TSelection) => SQL | undefined) | SQL | undefined,\n\t\t) => {\n\t\t\tconst baseTableName = this.tableName;\n\t\t\tconst tableName = getTableLikeName(table);\n\n\t\t\tif (typeof tableName === 'string' && this.config.joins?.some((join) => join.alias === tableName)) {\n\t\t\t\tthrow new Error(`Alias \"${tableName}\" is already used in this query`);\n\t\t\t}\n\n\t\t\tif (!this.isPartialSelect) {\n\t\t\t\t// If this is the first join and this is not a partial select and we're not selecting from raw SQL, \"move\" the fields from the main table to the nested object\n\t\t\t\tif (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === 'string') {\n\t\t\t\t\tthis.config.fields = {\n\t\t\t\t\t\t[baseTableName]: this.config.fields,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (typeof tableName === 'string' && !is(table, SQL)) {\n\t\t\t\t\tconst selection = is(table, Subquery)\n\t\t\t\t\t\t? table[SubqueryConfig].selection\n\t\t\t\t\t\t: is(table, View)\n\t\t\t\t\t\t? table[ViewBaseConfig].selectedFields\n\t\t\t\t\t\t: table[Table.Symbol.Columns];\n\t\t\t\t\tthis.config.fields[tableName] = selection;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof on === 'function') {\n\t\t\t\ton = on(\n\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\tthis.config.fields,\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as TSelection,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!this.config.joins) {\n\t\t\t\tthis.config.joins = [];\n\t\t\t}\n\t\t\tthis.config.joins.push({ on, table, joinType, alias: tableName });\n\n\t\t\tif (typeof tableName === 'string') {\n\t\t\t\tswitch (joinType) {\n\t\t\t\t\tcase 'left': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'right': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'inner': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'full': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Executes a `left join` operation by adding another table to the current query.\n\t * \n\t * Calling this method associates each row of the table with the corresponding row from the joined table, if a match is found. If no matching row exists, it sets all columns of the joined table to null.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/joins#left-join}\n\t * \n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t * \n\t * @example\n\t * \n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet | null }[] = await db.select()\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t * \n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number | null }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tleftJoin = this.createJoin('left');\n\t\n\t/**\n\t * Executes a `right join` operation by adding another table to the current query.\n\t * \n\t * Calling this method associates each row of the joined table with the corresponding row from the main table, if a match is found. If no matching row exists, it sets all columns of the main table to null.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/joins#right-join}\n\t * \n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t * \n\t * @example\n\t * \n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet }[] = await db.select()\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t * \n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\trightJoin = this.createJoin('right');\n\n\t/**\n\t * Executes an `inner join` operation, creating a new table by combining rows from two tables that have matching values.\n\t * \n\t * Calling this method retrieves rows that have corresponding entries in both joined tables. Rows without matching entries in either table are excluded, resulting in a table that includes only matching pairs.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/joins#inner-join}\n\t * \n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t * \n\t * @example\n\t * \n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet }[] = await db.select()\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t * \n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tinnerJoin = this.createJoin('inner');\n\n\t/**\n\t * Executes a `full join` operation by combining rows from two tables into a new table.\n\t * \n\t * Calling this method retrieves all rows from both main and joined tables, merging rows with matching values and filling in `null` for non-matching columns.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/joins#full-join}\n\t * \n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t * \n\t * @example\n\t * \n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet | null }[] = await db.select()\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t * \n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number | null }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tfullJoin = this.createJoin('full');\n\n\tprivate createSetOperator(\n\t\ttype: SetOperator,\n\t\tisAll: boolean,\n\t): <TValue extends SQLiteSetOperatorWithResult<TResult>>(\n\t\trightSelection:\n\t\t\t| ((setOperators: GetSQLiteSetOperators) => SetOperatorRightSelect<TValue, TResult>)\n\t\t\t| SetOperatorRightSelect<TValue, TResult>,\n\t) => SQLiteSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tSQLiteSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\treturn (rightSelection) => {\n\t\t\tconst rightSelect = (typeof rightSelection === 'function'\n\t\t\t\t? rightSelection(getSQLiteSetOperators())\n\t\t\t\t: rightSelection) as TypedQueryBuilder<\n\t\t\t\t\tany,\n\t\t\t\t\tTResult\n\t\t\t\t>;\n\n\t\t\tif (!haveSameKeys(this.getSelectedFields(), rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.config.setOperators.push({ type, isAll, rightSelect });\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Adds `union` set operator to the query.\n\t * \n\t * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n\t * \n\t * @example\n\t * \n\t * ```ts\n\t * // Select all unique names from customers and users tables\n\t * await db.select({ name: users.name })\n\t *   .from(users)\n\t *   .union(\n\t *     db.select({ name: customers.name }).from(customers)\n\t *   );\n\t * // or\n\t * import { union } from 'drizzle-orm/sqlite-core'\n\t * \n\t * await union(\n\t *   db.select({ name: users.name }).from(users), \n\t *   db.select({ name: customers.name }).from(customers)\n\t * );\n\t * ```\n\t */\n\tunion = this.createSetOperator('union', false);\n\n\t/**\n\t * Adds `union all` set operator to the query.\n\t * \n\t * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n\t * \n\t * @example\n\t * \n\t * ```ts\n\t * // Select all transaction ids from both online and in-store sales\n\t * await db.select({ transaction: onlineSales.transactionId })\n\t *   .from(onlineSales)\n\t *   .unionAll(\n\t *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t *   );\n\t * // or\n\t * import { unionAll } from 'drizzle-orm/sqlite-core'\n\t * \n\t * await unionAll(\n\t *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n\t *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t * );\n\t * ```\n\t */\n\tunionAll = this.createSetOperator('union', true);\n\n\t/**\n\t * Adds `intersect` set operator to the query.\n\t * \n\t * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n\t * \n\t * @example\n\t * \n\t * ```ts\n\t * // Select course names that are offered in both departments A and B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .intersect(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { intersect } from 'drizzle-orm/sqlite-core'\n\t * \n\t * await intersect(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\tintersect = this.createSetOperator('intersect', false);\n\n\t/**\n\t * Adds `except` set operator to the query.\n\t * \n\t * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n\t * \n\t * @example\n\t * \n\t * ```ts\n\t * // Select all courses offered in department A but not in department B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .except(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { except } from 'drizzle-orm/sqlite-core'\n\t * \n\t * await except(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\texcept = this.createSetOperator('except', false);\n\n\t/** @internal */\n\taddSetOperators(setOperators: SQLiteSelectConfig['setOperators']): SQLiteSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tSQLiteSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\tthis.config.setOperators.push(...setOperators);\n\t\treturn this as any;\n\t}\n\n\t/** \n\t * Adds a `where` clause to the query.\n\t * \n\t * Calling this method will select only those rows that fulfill a specified condition.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/select#filtering}\n\t * \n\t * @param where the `where` clause.\n\t * \n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be selected.\n\t * \n\t * ```ts\n\t * // Select all cars with green color\n\t * await db.select().from(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * await db.select().from(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t * \n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t * \n\t * ```ts\n\t * // Select all BMW cars with a green color\n\t * await db.select().from(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t * \n\t * // Select all cars with the green or blue color\n\t * await db.select().from(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t*/\n\twhere(\n\t\twhere: ((aliases: TSelection) => SQL | undefined) | SQL | undefined,\n\t): SQLiteSelectWithout<this, TDynamic, 'where'> {\n\t\tif (typeof where === 'function') {\n\t\t\twhere = where(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `having` clause to the query.\n\t * \n\t * Calling this method will select only those rows that fulfill a specified condition. It is typically used with aggregate functions to filter the aggregated data based on a specified condition.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t * \n\t * @param having the `having` clause.\n\t * \n\t * @example\n\t * \n\t * ```ts\n\t * // Select all brands with more than one car\n\t * await db.select({\n\t * \tbrand: cars.brand,\n\t * \tcount: sql<number>`cast(count(${cars.id}) as int)`,\n\t * })\n\t *   .from(cars)\n\t *   .groupBy(cars.brand)\n\t *   .having(({ count }) => gt(count, 1));\n\t * ```\n\t */\n\thaving(\n\t\thaving: ((aliases: this['_']['selection']) => SQL | undefined) | SQL | undefined,\n\t): SQLiteSelectWithout<this, TDynamic, 'having'> {\n\t\tif (typeof having === 'function') {\n\t\t\thaving = having(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.having = having;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `group by` clause to the query.\n\t * \n\t * Calling this method will group rows that have the same values into summary rows, often used for aggregation purposes.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @example\n\t * \n\t * ```ts\n\t * // Group and count people by their last names\n\t * await db.select({\n\t *    lastName: people.lastName,\n\t *    count: sql<number>`cast(count(*) as int)`\n\t * })\n\t *   .from(people)\n\t *   .groupBy(people.lastName);\n\t * ```\n\t */\n\tgroupBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(...columns: (SQLiteColumn | SQL)[]): SQLiteSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteSelectWithout<this, TDynamic, 'groupBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst groupBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t\tthis.config.groupBy = Array.isArray(groupBy) ? groupBy : [groupBy];\n\t\t} else {\n\t\t\tthis.config.groupBy = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `order by` clause to the query.\n\t * \n\t * Calling this method will sort the result-set in ascending or descending order. By default, the sort order is ascending.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/select#order-by}\n\t *\n\t * @example\n\t *\n\t * ```\n\t * // Select cars ordered by year\n\t * await db.select().from(cars).orderBy(cars.year);\n\t * ```\n\t * \n\t * You can specify whether results are in ascending or descending order with the `asc()` and `desc()` operators.\n\t * \n\t * ```ts\n\t * // Select cars ordered by year in descending order\n\t * await db.select().from(cars).orderBy(desc(cars.year));\n\t * \n\t * // Select cars ordered by year and price\n\t * await db.select().from(cars).orderBy(asc(cars.year), desc(cars.price));\n\t * ```\n\t */\n\torderBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (SQLiteColumn | SQL)[]): SQLiteSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteSelectWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t} else {\n\t\t\tconst orderByArray = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `limit` clause to the query.\n\t * \n\t * Calling this method will set the maximum number of rows that will be returned by this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t * \n\t * @param limit the `limit` clause.\n\t * \n\t * @example\n\t *\n\t * ```ts\n\t * // Get the first 10 people from this query.\n\t * await db.select().from(people).limit(10);\n\t * ```\n\t */\n\tlimit(limit: number | Placeholder): SQLiteSelectWithout<this, TDynamic, 'limit'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.limit = limit;\n\t\t} else {\n\t\t\tthis.config.limit = limit;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `offset` clause to the query.\n\t * \n\t * Calling this method will skip a number of rows when returning results from this query.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t * \n\t * @param offset the `offset` clause.\n\t * \n\t * @example\n\t *\n\t * ```ts\n\t * // Get the 10th-20th people from this query.\n\t * await db.select().from(people).offset(10).limit(10);\n\t * ```\n\t */\n\toffset(offset: number | Placeholder): SQLiteSelectWithout<this, TDynamic, 'offset'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.offset = offset;\n\t\t} else {\n\t\t\tthis.config.offset = offset;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildSelectQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\tas<TAlias extends string>(\n\t\talias: TAlias,\n\t): SubqueryWithSelection<this['_']['selectedFields'], TAlias> {\n\t\treturn new Proxy(\n\t\t\tnew Subquery(this.getSQL(), this.config.fields, alias),\n\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as SubqueryWithSelection<this['_']['selectedFields'], TAlias>;\n\t}\n\n\t/** @internal */\n\toverride getSelectedFields(): this['_']['selectedFields'] {\n\t\treturn new Proxy(\n\t\t\tthis.config.fields,\n\t\t\tnew SelectionProxyHandler({ alias: this.tableName, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as this['_']['selectedFields'];\n\t}\n\n\t$dynamic(): SQLiteSelectDynamic<this> {\n\t\treturn this;\n\t}\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface SQLiteSelectBase<\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode = 'single',\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends\n\tSQLiteSelectQueryBuilderBase<\n\t\tSQLiteSelectHKT,\n\t\tTTableName,\n\t\tTResultType,\n\t\tTRunResult,\n\t\tTSelection,\n\t\tTSelectMode,\n\t\tTNullabilityMap,\n\t\tTDynamic,\n\t\tTExcludedMethods,\n\t\tTResult,\n\t\tTSelectedFields\n\t>,\n\tQueryPromise<TResult>\n{}\n\nexport class SQLiteSelectBase<\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection,\n\tTSelectMode extends SelectMode = 'single',\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends SQLiteSelectQueryBuilderBase<\n\tSQLiteSelectHKT,\n\tTTableName,\n\tTResultType,\n\tTRunResult,\n\tTSelection,\n\tTSelectMode,\n\tTNullabilityMap,\n\tTDynamic,\n\tTExcludedMethods,\n\tTResult,\n\tTSelectedFields\n> implements RunnableQuery<TResult, 'sqlite'> {\n\tstatic readonly [entityKind]: string = 'SQLiteSelect';\n\n\tprepare(isOneTimeQuery?: boolean): SQLiteSelectPrepare<this> {\n\t\tif (!this.session) {\n\t\t\tthrow new Error('Cannot execute a query on a query builder. Please use a database instance instead.');\n\t\t}\n\t\tconst fieldsList = orderSelectedFields<SQLiteColumn>(this.config.fields);\n\t\tconst query = this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tfieldsList,\n\t\t\t'all',\n\t\t);\n\t\tquery.joinsNotNullableMap = this.joinsNotNullableMap;\n\t\treturn query as ReturnType<this['prepare']>;\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this.prepare(true).run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this.prepare(true).all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this.prepare(true).get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this.prepare(true).values(placeholderValues);\n\t};\n\n\tasync execute(): Promise<SQLiteSelectExecute<this>> {\n\t\treturn this.all() as SQLiteSelectExecute<this>;\n\t}\n}\n\napplyMixins(SQLiteSelectBase, [QueryPromise]);\n\nfunction createSetOperator(type: SetOperator, isAll: boolean): SQLiteCreateSetOperatorFn {\n\treturn (leftSelect, rightSelect, ...restSelects) => {\n\t\tconst setOperators = [rightSelect, ...restSelects].map((select) => ({\n\t\t\ttype,\n\t\t\tisAll,\n\t\t\trightSelect: select as AnySQLiteSelect,\n\t\t}));\n\n\t\tfor (const setOperator of setOperators) {\n\t\t\tif (!haveSameKeys((leftSelect as any).getSelectedFields(), setOperator.rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn (leftSelect as AnySQLiteSelect).addSetOperators(setOperators) as any;\n\t};\n}\n\nconst getSQLiteSetOperators = () => ({\n\tunion,\n\tunionAll,\n\tintersect,\n\texcept,\n});\n\n/**\n * Adds `union` set operator to the query.\n * \n * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n * \n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n * \n * @example\n * \n * ```ts\n * // Select all unique names from customers and users tables\n * import { union } from 'drizzle-orm/sqlite-core'\n * \n * await union(\n *   db.select({ name: users.name }).from(users), \n *   db.select({ name: customers.name }).from(customers)\n * );\n * // or\n * await db.select({ name: users.name })\n *   .from(users)\n *   .union(\n *     db.select({ name: customers.name }).from(customers)\n *   );\n * ```\n */\nexport const union = createSetOperator('union', false);\n\n/**\n * Adds `union all` set operator to the query.\n * \n * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n * \n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n * \n * @example\n * \n * ```ts\n * // Select all transaction ids from both online and in-store sales\n * import { unionAll } from 'drizzle-orm/sqlite-core'\n * \n * await unionAll(\n *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n * );\n * // or\n * await db.select({ transaction: onlineSales.transactionId })\n *   .from(onlineSales)\n *   .unionAll(\n *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n *   );\n * ```\n */\nexport const unionAll = createSetOperator('union', true);\n\n/**\n * Adds `intersect` set operator to the query.\n * \n * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n * \n * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n * \n * @example\n * \n * ```ts\n * // Select course names that are offered in both departments A and B\n * import { intersect } from 'drizzle-orm/sqlite-core'\n * \n * await intersect(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .intersect(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const intersect = createSetOperator('intersect', false);\n\n/**\n * Adds `except` set operator to the query.\n * \n * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n * \n * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n * \n * @example\n * \n * ```ts\n * // Select all courses offered in department A but not in department B\n * import { except } from 'drizzle-orm/sqlite-core'\n * \n * await except(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .except(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const except = createSetOperator('except', false);\n", "import { entityKind } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport { SQLiteSyncDialect } from '~/sqlite-core/dialect.ts';\nimport type { WithSubqueryWithSelection } from '~/sqlite-core/subquery.ts';\nimport { SQLiteSelectBuilder } from './select.ts';\nimport type { SelectedFields } from './select.types.ts';\nimport type { ColumnsSelection } from '~/sql/sql.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\n\nexport class QueryBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteQueryBuilder';\n\n\tprivate dialect: SQLiteSyncDialect | undefined;\n\n\t$with<TAlias extends string>(alias: TAlias) {\n\t\tconst queryBuilder = this;\n\n\t\treturn {\n\t\t\tas<TSelection extends ColumnsSelection>(\n\t\t\t\tqb: TypedQueryBuilder<TSelection> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelection>),\n\t\t\t): WithSubqueryWithSelection<TSelection, TAlias> {\n\t\t\t\tif (typeof qb === 'function') {\n\t\t\t\t\tqb = qb(queryBuilder);\n\t\t\t\t}\n\n\t\t\t\treturn new Proxy(\n\t\t\t\t\tnew WithSubquery(qb.getSQL(), qb.getSelectedFields() as SelectedFields, alias, true),\n\t\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t\t) as WithSubqueryWithSelection<TSelection, TAlias>;\n\t\t\t},\n\t\t};\n\t}\n\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\tfunction select(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\tfunction selectDistinct(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\treturn { select, selectDistinct };\n\t}\n\n\tselect(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields?: TSelection,\n\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\treturn new SQLiteSelectBuilder({ fields: fields ?? undefined, session: undefined, dialect: this.getDialect() });\n\t}\n\n\tselectDistinct(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields?: TSelection,\n\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\treturn new SQLiteSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: undefined,\n\t\t\tdialect: this.getDialect(),\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\t// Lazy load dialect to avoid circular dependency\n\tprivate getDialect() {\n\t\tif (!this.dialect) {\n\t\t\tthis.dialect = new SQLiteSyncDialect();\n\t\t}\n\n\t\treturn this.dialect;\n\t}\n}\n", "import type { GetColumnData } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { type DrizzleTypeError, mapUpdateSet, orderSelectedFields, type UpdateSet } from '~/utils.ts';\nimport type { SelectedFields, SelectedFieldsOrdered } from './select.types.ts';\nimport type { SQLiteColumn } from '../columns/common.ts';\n\nexport interface SQLiteUpdateConfig {\n\twhere?: SQL | undefined;\n\tset: UpdateSet;\n\ttable: SQLiteTable;\n\treturning?: SelectedFieldsOrdered;\n}\n\nexport type SQLiteUpdateSetSource<TTable extends SQLiteTable> =\n\t& {\n\t\t[Key in keyof TTable['_']['columns']]?:\n\t\t\t| GetColumnData<TTable['_']['columns'][Key], 'query'>\n\t\t\t| SQL;\n\t}\n\t& {};\n\nexport class SQLiteUpdateBuilder<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteUpdateBuilder';\n\n\tdeclare readonly _: {\n\t\treadonly table: TTable;\n\t};\n\n\tconstructor(\n\t\tprotected table: TTable,\n\t\tprotected session: SQLiteSession<any, any, any, any>,\n\t\tprotected dialect: SQLiteDialect,\n\t) {}\n\n\tset(values: SQLiteUpdateSetSource<TTable>): SQLiteUpdateBase<TTable, TResultType, TRunResult> {\n\t\treturn new SQLiteUpdateBase(this.table, mapUpdateSet(this.table, values), this.session, this.dialect);\n\t}\n}\n\nexport type SQLiteUpdateWithout<\n\tT extends AnySQLiteUpdate,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T : Omit<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['returning'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods'] | K\n\t>,\n\tT['_']['excludedMethods'] | K\n>;\n\nexport type SQLiteUpdateReturningAll<T extends AnySQLiteUpdate, TDynamic extends boolean> = SQLiteUpdateWithout<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteUpdateReturning<\n\tT extends AnySQLiteUpdate,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFields,\n> = SQLiteUpdateWithout<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteUpdateExecute<T extends AnySQLiteUpdate> = T['_']['returning'] extends undefined ? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteUpdatePrepare<T extends AnySQLiteUpdate> = SQLitePreparedQuery<\n\t{\n\t\ttype: T['_']['resultType'];\n\t\trun: T['_']['runResult'];\n\t\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'][];\n\t\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'];\n\t\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t\t: any[][];\n\t\texecute: SQLiteUpdateExecute<T>;\n\t}\n>;\n\nexport type SQLiteUpdateDynamic<T extends AnySQLiteUpdate> = SQLiteUpdate<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type SQLiteUpdate<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = any,\n\tTReturning extends Record<string, unknown> | undefined = Record<string, unknown> | undefined,\n> = SQLiteUpdateBase<TTable, TResultType, TRunResult, TReturning, true, never>;\n\ntype AnySQLiteUpdate = SQLiteUpdateBase<any, any, any, any, any, any>;\n\nexport interface SQLiteUpdateBase<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTReturning = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends SQLWrapper, QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]> {\n\treadonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteUpdateBase<\n\tTTable extends SQLiteTable = SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTReturning = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic readonly [entityKind]: string = 'SQLiteUpdate';\n\n\t/** @internal */\n\tconfig: SQLiteUpdateConfig;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tset: UpdateSet,\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t) {\n\t\tsuper();\n\t\tthis.config = { set, table };\n\t}\n\n\t/**\n\t * Adds a 'where' clause to the query.\n\t * \n\t * Calling this method will update only those rows that fulfill a specified condition.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t * \n\t * @param where the 'where' clause.\n\t * \n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be updated.\n\t * \n\t * ```ts\n\t * // Update all cars with green color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'));\n\t * // or\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(sql`${cars.color} = 'green'`)\n\t * ```\n\t * \n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t * \n\t * ```ts\n\t * // Update all BMW cars with a green color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t * \n\t * // Update all cars with the green or blue color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): SQLiteUpdateWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t * \n\t * Calling this method will return the specified fields of the updated rows. If no fields are specified, all fields will be returned.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/update#update-with-returning}\n\t * \n\t * @example\n\t * ```ts\n\t * // Update all cars with the green color and return all fields\n\t * const updatedCars: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t * \n\t * // Update all cars with the green color and return only their id and brand fields\n\t * const updatedCarsIdsAndBrands: { id: number, brand: string }[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): SQLiteUpdateReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFields>(\n\t\tfields: TSelectedFields,\n\t): SQLiteUpdateReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFields = this.config.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteUpdateWithout<AnySQLiteUpdate, TDynamic, 'returning'> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildUpdateQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\tprepare(isOneTimeQuery?: boolean): SQLiteUpdatePrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t) as SQLiteUpdatePrepare<this>;\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this.prepare(true).run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this.prepare(true).all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this.prepare(true).get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this.prepare(true).values(placeholderValues);\n\t};\n\n\toverride async execute(): Promise<SQLiteUpdateExecute<this>> {\n\t\treturn (this.config.returning ? this.all() : this.run()) as SQLiteUpdateExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteUpdateDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport {\n\ttype BuildQueryResult,\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tmapRelationalRow,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Query, QueryWithTypings, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { KnownKeysOnly } from '~/utils.ts';\nimport type { SQLiteDialect } from '../dialect.ts';\nimport type { PreparedQueryConfig, SQLitePreparedQuery, SQLiteSession } from '../session.ts';\nimport type { SQLiteTable } from '../table.ts';\n\nexport type SQLiteRelationalQueryKind<TMode extends 'sync' | 'async', TResult> = TMode extends 'async'\n\t? SQLiteRelationalQuery<TMode, TResult>\n\t: SQLiteSyncRelationalQuery<TResult>;\n\nexport class RelationalQueryBuilder<\n\tTMode extends 'sync' | 'async',\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n\tTFields extends TableRelationalConfig,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteAsyncRelationalQueryBuilder';\n\n\tconstructor(\n\t\tprotected mode: TMode,\n\t\tprotected fullSchema: Record<string, unknown>,\n\t\tprotected schema: TSchema,\n\t\tprotected tableNamesMap: Record<string, string>,\n\t\tprotected table: SQLiteTable,\n\t\tprotected tableConfig: TableRelationalConfig,\n\t\tprotected dialect: SQLiteDialect,\n\t\tprotected session: SQLiteSession<'async', unknown, TFullSchema, TSchema>,\n\t) {}\n\n\tfindMany<TConfig extends DBQueryConfig<'many', true, TSchema, TFields>>(\n\t\tconfig?: KnownKeysOnly<TConfig, DBQueryConfig<'many', true, TSchema, TFields>>,\n\t): SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TConfig>[]> {\n\t\treturn (this.mode === 'sync'\n\t\t\t? new SQLiteSyncRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? (config as DBQueryConfig<'many', true>) : {},\n\t\t\t\t'many',\n\t\t\t)\n\t\t\t: new SQLiteRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? (config as DBQueryConfig<'many', true>) : {},\n\t\t\t\t'many',\n\t\t\t)) as SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TConfig>[]>;\n\t}\n\n\tfindFirst<TSelection extends Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>(\n\t\tconfig?: KnownKeysOnly<TSelection, Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>,\n\t): SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TSelection> | undefined> {\n\t\treturn (this.mode === 'sync'\n\t\t\t? new SQLiteSyncRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? { ...(config as DBQueryConfig<'many', true> | undefined), limit: 1 } : { limit: 1 },\n\t\t\t\t'first',\n\t\t\t)\n\t\t\t: new SQLiteRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? { ...(config as DBQueryConfig<'many', true> | undefined), limit: 1 } : { limit: 1 },\n\t\t\t\t'first',\n\t\t\t)) as SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TSelection> | undefined>;\n\t}\n}\n\nexport class SQLiteRelationalQuery<TType extends 'sync' | 'async', TResult> extends QueryPromise<TResult>\n\timplements RunnableQuery<TResult, 'sqlite'>, SQLWrapper\n{\n\tstatic readonly [entityKind]: string = 'SQLiteAsyncRelationalQuery';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly type: TType;\n\t\treadonly result: TResult;\n\t};\n\n\t/** @internal */\n\tmode: 'many' | 'first';\n\n\tconstructor(\n\t\tprivate fullSchema: Record<string, unknown>,\n\t\tprivate schema: TablesRelationalConfig,\n\t\tprivate tableNamesMap: Record<string, string>,\n\t\tprivate table: SQLiteTable,\n\t\tprivate tableConfig: TableRelationalConfig,\n\t\tprivate dialect: SQLiteDialect,\n\t\tprivate session: SQLiteSession<'sync' | 'async', unknown, Record<string, unknown>, TablesRelationalConfig>,\n\t\tprivate config: DBQueryConfig<'many', true> | true,\n\t\tmode: 'many' | 'first',\n\t) {\n\t\tsuper();\n\t\tthis.mode = mode;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildRelationalQuery({\n\t\t\tfullSchema: this.fullSchema,\n\t\t\tschema: this.schema,\n\t\t\ttableNamesMap: this.tableNamesMap,\n\t\t\ttable: this.table,\n\t\t\ttableConfig: this.tableConfig,\n\t\t\tqueryConfig: this.config,\n\t\t\ttableAlias: this.tableConfig.tsName,\n\t\t}).sql as SQL;\n\t}\n\n\tprepare(): SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }> {\n\t\tconst { query, builtQuery } = this._toSQL();\n\n\t\treturn this.session.prepareQuery(\n\t\t\tbuiltQuery,\n\t\t\tundefined,\n\t\t\tthis.mode === 'first' ? 'get' : 'all',\n\t\t\t(rawRows, mapColumnValue) => {\n\t\t\t\tconst rows = rawRows.map((row) =>\n\t\t\t\t\tmapRelationalRow(this.schema, this.tableConfig, row, query.selection, mapColumnValue)\n\t\t\t\t);\n\t\t\t\tif (this.mode === 'first') {\n\t\t\t\t\treturn rows[0] as TResult;\n\t\t\t\t}\n\t\t\t\treturn rows as TResult;\n\t\t\t},\n\t\t) as SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }>;\n\t}\n\n\tprivate _toSQL(): { query: BuildRelationalQueryResult; builtQuery: QueryWithTypings } {\n\t\tconst query = this.dialect.buildRelationalQuery({\n\t\t\tfullSchema: this.fullSchema,\n\t\t\tschema: this.schema,\n\t\t\ttableNamesMap: this.tableNamesMap,\n\t\t\ttable: this.table,\n\t\t\ttableConfig: this.tableConfig,\n\t\t\tqueryConfig: this.config,\n\t\t\ttableAlias: this.tableConfig.tsName,\n\t\t});\n\n\t\tconst builtQuery = this.dialect.sqlToQuery(query.sql as SQL);\n\n\t\treturn { query, builtQuery };\n\t}\n\n\ttoSQL(): Query {\n\t\treturn this._toSQL().builtQuery;\n\t}\n\n\t/** @internal */\n\texecuteRaw(): TResult {\n\t\tif (this.mode === 'first') {\n\t\t\treturn this.prepare().get() as TResult;\n\t\t}\n\t\treturn this.prepare().all() as TResult;\n\t}\n\n\toverride async execute(): Promise<TResult> {\n\t\treturn this.executeRaw();\n\t}\n}\n\nexport class SQLiteSyncRelationalQuery<TResult> extends SQLiteRelationalQuery<'sync', TResult> {\n\tstatic readonly [entityKind]: string = 'SQLiteSyncRelationalQuery';\n\n\tsync(): TResult {\n\t\treturn this.executeRaw();\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { SQL, SQLWrapper } from '~/index.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport type { SQLiteAsyncDialect } from '../dialect.ts';\n\ntype SQLiteRawAction = 'all' | 'get' | 'values' | 'run';\nexport interface SQLiteRawConfig {\n\taction: SQLiteRawAction;\n}\n\nexport class SQLiteRaw<TResult> extends QueryPromise<TResult> implements RunnableQuery<TResult, 'sqlite'>, SQLWrapper {\n\tstatic readonly [entityKind]: string = 'SQLiteRaw';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly result: TResult;\n\t};\n\n\t/** @internal */\n\tconfig: SQLiteRawConfig;\n\n\tconstructor(\n\t\tprivate cb: () => Promise<TResult>,\n\t\tprivate getSQLCb: () => SQL,\n\t\taction: SQLiteRawAction,\n\t\tprivate dialect: SQLiteAsyncDialect,\n\t\tprivate mapBatchResult: (result: unknown) => unknown,\n\t) {\n\t\tsuper();\n\t\tthis.config = { action };\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.getSQLCb();\n\t}\n\n\toverride async execute(): Promise<TResult> {\n\t\treturn this.cb();\n\t}\n\n\tprepare(): PreparedQuery {\n\t\treturn {\n\t\t\tgetQuery: () => {\n\t\t\t\treturn this.dialect.sqlToQuery(this.getSQL());\n\t\t\t},\n\t\t\tmapResult: (result: unknown, isFromBatch?: boolean) => {\n\t\t\t\treturn isFromBatch ? this.mapBatchResult(result) : result;\n\t\t\t},\n\t\t};\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { ExtractTablesWithRelations, RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect, SQLiteSyncDialect } from '~/sqlite-core/dialect.ts';\nimport {\n\tQueryBuilder,\n\tSQLiteDeleteBase,\n\tSQLiteInsertBuilder,\n\tSQLiteSelectBuilder,\n\tSQLiteUpdateBuilder,\n} from '~/sqlite-core/query-builders/index.ts';\nimport type {\n\tDBResult,\n\tResult,\n\tSQLiteSession,\n\tSQLiteTransaction,\n\tSQLiteTransactionConfig,\n} from '~/sqlite-core/session.ts';\nimport type { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport type { DrizzleTypeError } from '~/utils.ts';\nimport { RelationalQueryBuilder } from './query-builders/query.ts';\nimport { SQLiteRaw } from './query-builders/raw.ts';\nimport type { SelectedFields } from './query-builders/select.types.ts';\nimport type { WithSubqueryWithSelection } from './subquery.ts';\n\nexport class BaseSQLiteDatabase<\n\tTResultKind extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown> = Record<string, never>,\n\tTSchema extends TablesRelationalConfig = ExtractTablesWithRelations<TFullSchema>,\n> {\n\tstatic readonly [entityKind]: string = 'BaseSQLiteDatabase';\n\n\tdeclare readonly _: {\n\t\treadonly schema: TSchema | undefined;\n\t\treadonly tableNamesMap: Record<string, string>;\n\t};\n\n\tquery: TFullSchema extends Record<string, never>\n\t\t? DrizzleTypeError<'Seems like the schema generic is missing - did you forget to add it to your DB type?'>\n\t\t: {\n\t\t\t[K in keyof TSchema]: RelationalQueryBuilder<TResultKind, TFullSchema, TSchema, TSchema[K]>;\n\t\t};\n\n\tconstructor(\n\t\tprivate resultKind: TResultKind,\n\t\t/** @internal */\n\t\treadonly dialect: { sync: SQLiteSyncDialect; async: SQLiteAsyncDialect }[TResultKind],\n\t\t/** @internal */\n\t\treadonly session: SQLiteSession<TResultKind, TRunResult, TFullSchema, TSchema>,\n\t\tschema: RelationalSchemaConfig<TSchema> | undefined,\n\t) {\n\t\tthis._ = schema\n\t\t\t? { schema: schema.schema, tableNamesMap: schema.tableNamesMap }\n\t\t\t: { schema: undefined, tableNamesMap: {} };\n\t\tthis.query = {} as typeof this['query'];\n\t\tif (this._.schema) {\n\t\t\tfor (const [tableName, columns] of Object.entries(this._.schema)) {\n\t\t\t\tthis.query[tableName as keyof TSchema] = new RelationalQueryBuilder(\n\t\t\t\t\tresultKind,\n\t\t\t\t\tschema!.fullSchema,\n\t\t\t\t\tthis._.schema,\n\t\t\t\t\tthis._.tableNamesMap,\n\t\t\t\t\tschema!.fullSchema[tableName] as SQLiteTable,\n\t\t\t\t\tcolumns,\n\t\t\t\t\tdialect,\n\t\t\t\t\tsession as SQLiteSession<any, any, any, any> as any,\n\t\t\t\t) as this['query'][keyof TSchema];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates a subquery that defines a temporary named result set as a CTE.\n\t * \n\t * It is useful for breaking down complex queries into simpler parts and for reusing the result set in subsequent parts of the query.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t * \n\t * @param alias The alias for the subquery.\n\t * \n\t * Failure to provide an alias will result in a DrizzleTypeError, preventing the subquery from being referenced in other queries.\n\t * \n\t * @example\n\t * \n\t * ```ts\n\t * // Create a subquery with alias 'sq' and use it in the select query\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t * \n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t * \n\t * To select arbitrary SQL values as fields in a CTE and reference them in other CTEs or in the main query, you need to add aliases to them:\n\t * \n\t * ```ts\n\t * // Select an arbitrary SQL value as a field in a CTE and reference it in the main query\n\t * const sq = db.$with('sq').as(db.select({\n\t *   name: sql<string>`upper(${users.name})`.as('name'),\n\t * })\n\t * .from(users));\n\t * \n\t * const result = await db.with(sq).select({ name: sq.name }).from(sq);\n\t * ```\n\t */\n\t$with<TAlias extends string>(alias: TAlias) {\n\t\treturn {\n\t\t\tas<TSelection extends ColumnsSelection>(\n\t\t\t\tqb: TypedQueryBuilder<TSelection> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelection>),\n\t\t\t): WithSubqueryWithSelection<TSelection, TAlias> {\n\t\t\t\tif (typeof qb === 'function') {\n\t\t\t\t\tqb = qb(new QueryBuilder());\n\t\t\t\t}\n\n\t\t\t\treturn new Proxy(\n\t\t\t\t\tnew WithSubquery(qb.getSQL(), qb.getSelectedFields() as SelectedFields, alias, true),\n\t\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t\t) as WithSubqueryWithSelection<TSelection, TAlias>;\n\t\t\t},\n\t\t};\n\t}\n\n\t/**\n\t * Incorporates a previously defined CTE (using `$with`) into the main query.\n\t * \n\t * This method allows the main query to reference a temporary named result set.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t * \n\t * @param queries The CTEs to incorporate into the main query.\n\t * \n\t * @example\n\t * \n\t * ```ts\n\t * // Define a subquery 'sq' as a CTE using $with\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t * \n\t * // Incorporate the CTE 'sq' into the main query and select from it\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t */\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\tfunction select(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\t\tfunction select(\n\t\t\tfields?: SelectedFields,\n\t\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\tfunction selectDistinct(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\t\tfunction selectDistinct(\n\t\t\tfields?: SelectedFields,\n\t\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\treturn { select, selectDistinct };\n\t}\n\n\t/**\n\t * Creates a select query.\n\t * \n\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t * \n\t * Use `.from()` method to specify which table to select from.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t * \n\t * @param fields The selection object.\n\t * \n\t * @example\n\t * \n\t * ```ts\n\t * // Select all columns and all rows from the 'cars' table\n\t * const allCars: Car[] = await db.select().from(cars);\n\t * \n\t * // Select specific columns and all rows from the 'cars' table\n\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({ \n\t *   id: cars.id, \n\t *   brand: cars.brand \n\t * })\n\t *   .from(cars);\n\t * ```\n\t * \n\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t * \n\t * ```ts\n\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t * })\n\t *   .from(cars);\n\t * ```\n\t */\n\tselect(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\tselect(fields?: SelectedFields): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\treturn new SQLiteSelectBuilder({ fields: fields ?? undefined, session: this.session, dialect: this.dialect });\n\t}\n\n\t/**\n\t * Adds `distinct` expression to the select query.\n\t * \n\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t * \n\t * Use `.from()` method to specify which table to select from.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t * \n\t * @param fields The selection object.\n\t * \n\t * @example\n\t * \n\t * ```ts\n\t * // Select all unique rows from the 'cars' table\n\t * await db.selectDistinct()\n\t *   .from(cars)\n\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t * \n\t * // Select all unique brands from the 'cars' table\n\t * await db.selectDistinct({ brand: cars.brand })\n\t *   .from(cars)\n\t *   .orderBy(cars.brand);\n\t * ```\n\t */\n\tselectDistinct(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\tselectDistinct(\n\t\tfields?: SelectedFields,\n\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\treturn new SQLiteSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\t/**\n\t * Creates an update query.\n\t * \n\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t * \n\t * Use `.set()` method to specify which values to update.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/update} \n\t * \n\t * @param table The table to update.\n\t * \n\t * @example\n\t * \n\t * ```ts\n\t * // Update all rows in the 'cars' table\n\t * await db.update(cars).set({ color: 'red' });\n\t * \n\t * // Update rows with filters and conditions\n\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t * \n\t * // Update with returning clause\n\t * const updatedCar: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tupdate<TTable extends SQLiteTable>(table: TTable): SQLiteUpdateBuilder<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteUpdateBuilder(table, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates an insert query.\n\t * \n\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/insert} \n\t * \n\t * @param table The table to insert into.\n\t * \n\t * @example\n\t * \n\t * ```ts\n\t * // Insert one row\n\t * await db.insert(cars).values({ brand: 'BMW' });\n\t * \n\t * // Insert multiple rows\n\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t * \n\t * // Insert with returning clause\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t * ```\n\t */\n\tinsert<TTable extends SQLiteTable>(into: TTable): SQLiteInsertBuilder<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteInsertBuilder(into, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates a delete query.\n\t * \n\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted. \n\t * \n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *  \n\t * @param table The table to delete from.\n\t * \n\t * @example\n\t * \n\t * ```ts\n\t * // Delete all rows in the 'cars' table\n\t * await db.delete(cars);\n\t * \n\t * // Delete rows with filters and conditions\n\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t * \n\t * // Delete with returning clause\n\t * const deletedCar: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tdelete<TTable extends SQLiteTable>(from: TTable): SQLiteDeleteBase<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteDeleteBase(from, this.session, this.dialect);\n\t}\n\n\trun(query: SQLWrapper): DBResult<TResultKind, TRunResult> {\n\t\tconst sql = query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.run(sql),\n\t\t\t\t() => sql,\n\t\t\t\t'run',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawRunValueFromBatchResult.bind(this.session),\n\t\t\t) as DBResult<TResultKind, TRunResult>;\n\t\t}\n\t\treturn this.session.run(sql) as DBResult<TResultKind, TRunResult>;\n\t}\n\n\tall<T = unknown>(query: SQLWrapper): DBResult<TResultKind, T[]> {\n\t\tconst sql = query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.all(sql),\n\t\t\t\t() => sql,\n\t\t\t\t'all',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawAllValueFromBatchResult.bind(this.session),\n\t\t\t) as any;\n\t\t}\n\t\treturn this.session.all(sql) as DBResult<TResultKind, T[]>;\n\t}\n\n\tget<T = unknown>(query: SQLWrapper): DBResult<TResultKind, T> {\n\t\tconst sql = query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.get(sql),\n\t\t\t\t() => sql,\n\t\t\t\t'get',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawGetValueFromBatchResult.bind(this.session),\n\t\t\t) as DBResult<TResultKind, T>;\n\t\t}\n\t\treturn this.session.get(sql) as DBResult<TResultKind, T>;\n\t}\n\n\tvalues<T extends unknown[] = unknown[]>(query: SQLWrapper): DBResult<TResultKind, T[]> {\n\t\tconst sql = query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.values(sql),\n\t\t\t\t() => sql,\n\t\t\t\t'values',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawValuesValueFromBatchResult.bind(this.session),\n\t\t\t) as any;\n\t\t}\n\t\treturn this.session.values(sql) as DBResult<TResultKind, T[]>;\n\t}\n\n\ttransaction<T>(\n\t\ttransaction: (tx: SQLiteTransaction<TResultKind, TRunResult, TFullSchema, TSchema>) => Result<TResultKind, T>,\n\t\tconfig?: SQLiteTransactionConfig,\n\t): Result<TResultKind, T> {\n\t\treturn this.session.transaction(transaction, config);\n\t}\n}\n\nexport type SQLiteWithReplicas<Q> = Q & { $primary: Q };\n\nexport const withReplicas = <\n\tTResultKind extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n\tQ extends BaseSQLiteDatabase<\n\t\tTResultKind,\n\t\tTRunResult,\n\t\tTFullSchema,\n\t\tTSchema extends Record<string, unknown> ? ExtractTablesWithRelations<TFullSchema> : TSchema\n\t>,\n>(\n\tprimary: Q,\n\treplicas: [Q, ...Q[]],\n\tgetReplica: (replicas: Q[]) => Q = () => replicas[Math.floor(Math.random() * replicas.length)]!,\n): SQLiteWithReplicas<Q> => {\n\tconst select: Q['select'] = (...args: []) => getReplica(replicas).select(...args);\n\tconst selectDistinct: Q['selectDistinct'] = (...args: []) => getReplica(replicas).selectDistinct(...args);\n\tconst $with: Q['with'] = (...args: []) => getReplica(replicas).with(...args);\n\n\tconst update: Q['update'] = (...args: [any]) => primary.update(...args);\n\tconst insert: Q['insert'] = (...args: [any]) => primary.insert(...args);\n\tconst $delete: Q['delete'] = (...args: [any]) => primary.delete(...args);\n\tconst run: Q['run'] = (...args: [any]) => primary.run(...args);\n\tconst all: Q['all'] = (...args: [any]) => primary.all(...args);\n\tconst get: Q['get'] = (...args: [any]) => primary.get(...args);\n\tconst values: Q['values'] = (...args: [any]) => primary.values(...args);\n\tconst transaction: Q['transaction'] = (...args: [any]) => primary.transaction(...args);\n\n\treturn {\n\t\t...primary,\n\t\tupdate,\n\t\tinsert,\n\t\tdelete: $delete,\n\t\trun,\n\t\tall,\n\t\tget,\n\t\tvalues,\n\t\ttransaction,\n\t\t$primary: primary,\n\t\tselect,\n\t\tselectDistinct,\n\t\twith: $with,\n\t\tget query() {\n\t\t\treturn getReplica(replicas).query;\n\t\t},\n\t};\n};\n", "import { entityKind } from '~/entity.ts';\n\nexport interface Logger {\n\tlogQuery(query: string, params: unknown[]): void;\n}\n\nexport interface LogWriter {\n\twrite(message: string): void;\n}\n\nexport class ConsoleLogWriter implements LogWriter {\n\tstatic readonly [entityKind]: string = 'ConsoleLogWriter';\n\n\twrite(message: string) {\n\t\tconsole.log(message);\n\t}\n}\n\nexport class DefaultLogger implements Logger {\n\tstatic readonly [entityKind]: string = 'DefaultLogger';\n\n\treadonly writer: LogWriter;\n\n\tconstructor(config?: { writer: LogWriter }) {\n\t\tthis.writer = config?.writer ?? new ConsoleLogWriter();\n\t}\n\n\tlogQuery(query: string, params: unknown[]): void {\n\t\tconst stringifiedParams = params.map((p) => {\n\t\t\ttry {\n\t\t\t\treturn JSON.stringify(p);\n\t\t\t} catch {\n\t\t\t\treturn String(p);\n\t\t\t}\n\t\t});\n\t\tconst paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(', ')}]` : '';\n\t\tthis.writer.write(`Query: ${query}${paramsStr}`);\n\t}\n}\n\nexport class NoopLogger implements Logger {\n\tstatic readonly [entityKind]: string = 'NoopLogger';\n\n\tlogQuery(): void {\n\t\t// noop\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport { DrizzleError, TransactionRollbackError } from '~/errors.ts';\nimport type { TablesRelationalConfig } from '~/relations.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport type { Query, SQL } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect, SQLiteSyncDialect } from '~/sqlite-core/dialect.ts';\nimport { QueryPromise } from '../index.ts';\nimport { BaseSQLiteDatabase } from './db.ts';\nimport type { SQLiteRaw } from './query-builders/raw.ts';\nimport type { SelectedFieldsOrdered } from './query-builders/select.types.ts';\n\nexport interface PreparedQueryConfig {\n\ttype: 'sync' | 'async';\n\trun: unknown;\n\tall: unknown;\n\tget: unknown;\n\tvalues: unknown;\n\texecute: unknown;\n}\n\nexport class ExecuteResultSync<T> extends QueryPromise<T> {\n\tstatic readonly [entityKind]: string = 'ExecuteResultSync';\n\n\tconstructor(private resultCb: () => T) {\n\t\tsuper();\n\t}\n\n\toverride async execute(): Promise<T> {\n\t\treturn this.resultCb();\n\t}\n\n\tsync(): T {\n\t\treturn this.resultCb();\n\t}\n}\n\nexport type ExecuteResult<TType extends 'sync' | 'async', TResult> = TType extends 'async' ? Promise<TResult>\n\t: ExecuteResultSync<TResult>;\n\nexport abstract class SQLitePreparedQuery<T extends PreparedQueryConfig> implements PreparedQuery {\n\tstatic readonly [entityKind]: string = 'PreparedQuery';\n\n\t/** @internal */\n\tjoinsNotNullableMap?: Record<string, boolean>;\n\n\tconstructor(\n\t\tprivate mode: 'sync' | 'async',\n\t\tprivate executeMethod: SQLiteExecuteMethod,\n\t\tprotected query: Query,\n\t) {}\n\n\tgetQuery(): Query {\n\t\treturn this.query;\n\t}\n\n\tabstract run(placeholderValues?: Record<string, unknown>): Result<T['type'], T['run']>;\n\n\tmapRunResult(result: unknown, _isFromBatch?: boolean): unknown {\n\t\treturn result;\n\t}\n\n\tabstract all(placeholderValues?: Record<string, unknown>): Result<T['type'], T['all']>;\n\n\tmapAllResult(_result: unknown, _isFromBatch?: boolean): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tabstract get(placeholderValues?: Record<string, unknown>): Result<T['type'], T['get']>;\n\n\tmapGetResult(_result: unknown, _isFromBatch?: boolean): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tabstract values(placeholderValues?: Record<string, unknown>): Result<T['type'], T['values']>;\n\n\texecute(placeholderValues?: Record<string, unknown>): ExecuteResult<T['type'], T['execute']> {\n\t\tif (this.mode === 'async') {\n\t\t\treturn this[this.executeMethod](placeholderValues) as ExecuteResult<T['type'], T['execute']>;\n\t\t}\n\t\treturn new ExecuteResultSync(() => this[this.executeMethod](placeholderValues));\n\t}\n\n\tmapResult(response: unknown, isFromBatch?: boolean) {\n\t\tswitch (this.executeMethod) {\n\t\t\tcase 'run': {\n\t\t\t\treturn this.mapRunResult(response, isFromBatch);\n\t\t\t}\n\t\t\tcase 'all': {\n\t\t\t\treturn this.mapAllResult(response, isFromBatch);\n\t\t\t}\n\t\t\tcase 'get': {\n\t\t\t\treturn this.mapGetResult(response, isFromBatch);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport interface SQLiteTransactionConfig {\n\tbehavior?: 'deferred' | 'immediate' | 'exclusive';\n}\n\nexport type SQLiteExecuteMethod = 'run' | 'all' | 'get';\n\nexport abstract class SQLiteSession<\n\tTResultKind extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteSession';\n\n\tconstructor(\n\t\t/** @internal */\n\t\treadonly dialect: { sync: SQLiteSyncDialect; async: SQLiteAsyncDialect }[TResultKind],\n\t) {}\n\n\tabstract prepareQuery(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tcustomResultMapper?: (rows: unknown[][], mapColumnValue?: (value: unknown) => unknown) => unknown,\n\t): SQLitePreparedQuery<PreparedQueryConfig & { type: TResultKind }>;\n\n\tprepareOneTimeQuery(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t): SQLitePreparedQuery<PreparedQueryConfig & { type: TResultKind }> {\n\t\treturn this.prepareQuery(query, fields, executeMethod);\n\t}\n\n\tabstract transaction<T>(\n\t\ttransaction: (tx: SQLiteTransaction<TResultKind, TRunResult, TFullSchema, TSchema>) => Result<TResultKind, T>,\n\t\tconfig?: SQLiteTransactionConfig,\n\t): Result<TResultKind, T>;\n\n\trun(query: SQL): Result<TResultKind, TRunResult> {\n\t\tconst staticQuery = this.dialect.sqlToQuery(query);\n\t\ttry {\n\t\t\treturn this.prepareOneTimeQuery(staticQuery, undefined, 'run').run() as Result<TResultKind, TRunResult>;\n\t\t} catch (err) {\n\t\t\tthrow new DrizzleError({ cause: err, message: `Failed to run the query '${staticQuery.sql}'` });\n\t\t}\n\t}\n\n\t/** @internal */\n\textractRawRunValueFromBatchResult(result: unknown) {\n\t\treturn result;\n\t}\n\n\tall<T = unknown>(query: SQL): Result<TResultKind, T[]> {\n\t\treturn this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), undefined, 'run').all() as Result<TResultKind, T[]>;\n\t}\n\n\t/** @internal */\n\textractRawAllValueFromBatchResult(_result: unknown): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tget<T = unknown>(query: SQL): Result<TResultKind, T> {\n\t\treturn this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), undefined, 'run').get() as Result<TResultKind, T>;\n\t}\n\n\t/** @internal */\n\textractRawGetValueFromBatchResult(_result: unknown): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tvalues<T extends any[] = unknown[]>(\n\t\tquery: SQL,\n\t): Result<TResultKind, T[]> {\n\t\treturn this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), undefined, 'run').values() as Result<\n\t\t\tTResultKind,\n\t\t\tT[]\n\t\t>;\n\t}\n\n\t/** @internal */\n\textractRawValuesValueFromBatchResult(_result: unknown): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n}\n\nexport type Result<TKind extends 'sync' | 'async', TResult> = { sync: TResult; async: Promise<TResult> }[TKind];\n\nexport type DBResult<TKind extends 'sync' | 'async', TResult> = { sync: TResult; async: SQLiteRaw<TResult> }[TKind];\n\nexport abstract class SQLiteTransaction<\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends BaseSQLiteDatabase<TResultType, TRunResult, TFullSchema, TSchema> {\n\tstatic readonly [entityKind]: string = 'SQLiteTransaction';\n\n\tconstructor(\n\t\tresultType: TResultType,\n\t\tdialect: { sync: SQLiteSyncDialect; async: SQLiteAsyncDialect }[TResultType],\n\t\tsession: SQLiteSession<TResultType, TRunResult, TFullSchema, TSchema>,\n\t\tprotected schema: {\n\t\t\tfullSchema: Record<string, unknown>;\n\t\t\tschema: TSchema;\n\t\t\ttableNamesMap: Record<string, string>;\n\t\t} | undefined,\n\t\tprotected readonly nestedIndex = 0,\n\t) {\n\t\tsuper(resultType, dialect, session, schema);\n\t}\n\n\trollback(): never {\n\t\tthrow new TransactionRollbackError();\n\t}\n}\n", "import type { Client, InArgs, InStatement, ResultSet, Transaction } from '@libsql/client';\nimport type { BatchItem as BatchItem } from '~/batch.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { Logger } from '~/logger.ts';\nimport { NoopLogger } from '~/logger.ts';\nimport type { RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport { fillPlaceholders, type Query, sql } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect } from '~/sqlite-core/dialect.ts';\nimport { SQLiteTransaction } from '~/sqlite-core/index.ts';\nimport type { SelectedFieldsOrdered } from '~/sqlite-core/query-builders/select.types.ts';\nimport type {\n\tPreparedQueryConfig as PreparedQueryConfigBase,\n\tSQLiteExecuteMethod,\n\tSQLiteTransactionConfig,\n} from '~/sqlite-core/session.ts';\nimport { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { mapResultRow } from '~/utils.ts';\n\nexport interface LibSQLSessionOptions {\n\tlogger?: Logger;\n}\n\ntype PreparedQueryConfig = Omit<PreparedQueryConfigBase, 'statement' | 'run'>;\n\nexport class LibSQLSession<\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends SQLiteSession<'async', ResultSet, TFullSchema, TSchema> {\n\tstatic readonly [entityKind]: string = 'LibSQLSession';\n\n\tprivate logger: Logger;\n\n\tconstructor(\n\t\tprivate client: Client,\n\t\tdialect: SQLiteAsyncDialect,\n\t\tprivate schema: RelationalSchemaConfig<TSchema> | undefined,\n\t\tprivate options: LibSQLSessionOptions,\n\t\tprivate tx: Transaction | undefined,\n\t) {\n\t\tsuper(dialect);\n\t\tthis.logger = options.logger ?? new NoopLogger();\n\t}\n\n\tprepareQuery<T extends Omit<PreparedQueryConfig, 'run'>>(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tcustomResultMapper?: (rows: unknown[][]) => unknown,\n\t): LibSQLPreparedQuery<T> {\n\t\treturn new LibSQLPreparedQuery(\n\t\t\tthis.client,\n\t\t\tquery,\n\t\t\tthis.logger,\n\t\t\tfields,\n\t\t\tthis.tx,\n\t\t\texecuteMethod,\n\t\t\tcustomResultMapper,\n\t\t);\n\t}\n\n\tasync batch<T extends BatchItem<'sqlite'>[] | readonly BatchItem<'sqlite'>[]>(queries: T) {\n\t\tconst preparedQueries: PreparedQuery[] = [];\n\t\tconst builtQueries: InStatement[] = [];\n\n\t\tfor (const query of queries) {\n\t\t\tconst preparedQuery = query.prepare();\n\t\t\tconst builtQuery = preparedQuery.getQuery();\n\t\t\tpreparedQueries.push(preparedQuery);\n\t\t\tbuiltQueries.push({ sql: builtQuery.sql, args: builtQuery.params as InArgs });\n\t\t}\n\n\t\tconst batchResults = await this.client.batch(builtQueries);\n\t\treturn batchResults.map((result, i) => preparedQueries[i]!.mapResult(result, true));\n\t}\n\n\toverride async transaction<T>(\n\t\ttransaction: (db: LibSQLTransaction<TFullSchema, TSchema>) => T | Promise<T>,\n\t\t_config?: SQLiteTransactionConfig,\n\t): Promise<T> {\n\t\t// TODO: support transaction behavior\n\t\tconst libsqlTx = await this.client.transaction();\n\t\tconst session = new LibSQLSession(this.client, this.dialect, this.schema, this.options, libsqlTx);\n\t\tconst tx = new LibSQLTransaction('async', this.dialect, session, this.schema);\n\t\ttry {\n\t\t\tconst result = await transaction(tx);\n\t\t\tawait libsqlTx.commit();\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tawait libsqlTx.rollback();\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\toverride extractRawAllValueFromBatchResult(result: unknown): unknown {\n\t\treturn (result as ResultSet).rows;\n\t}\n\n\toverride extractRawGetValueFromBatchResult(result: unknown): unknown {\n\t\treturn (result as ResultSet).rows[0];\n\t}\n\n\toverride extractRawValuesValueFromBatchResult(result: unknown): unknown {\n\t\treturn (result as ResultSet).rows;\n\t}\n}\n\nexport class LibSQLTransaction<\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends SQLiteTransaction<'async', ResultSet, TFullSchema, TSchema> {\n\tstatic readonly [entityKind]: string = 'LibSQLTransaction';\n\n\toverride async transaction<T>(transaction: (tx: LibSQLTransaction<TFullSchema, TSchema>) => Promise<T>): Promise<T> {\n\t\tconst savepointName = `sp${this.nestedIndex}`;\n\t\tconst tx = new LibSQLTransaction('async', this.dialect, this.session, this.schema, this.nestedIndex + 1);\n\t\tawait this.session.run(sql.raw(`savepoint ${savepointName}`));\n\t\ttry {\n\t\t\tconst result = await transaction(tx);\n\t\t\tawait this.session.run(sql.raw(`release savepoint ${savepointName}`));\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tawait this.session.run(sql.raw(`rollback to savepoint ${savepointName}`));\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\nexport class LibSQLPreparedQuery<T extends PreparedQueryConfig = PreparedQueryConfig> extends SQLitePreparedQuery<\n\t{ type: 'async'; run: ResultSet; all: T['all']; get: T['get']; values: T['values']; execute: T['execute'] }\n> {\n\tstatic readonly [entityKind]: string = 'LibSQLPreparedQuery';\n\n\tconstructor(\n\t\tprivate client: Client,\n\t\tquery: Query,\n\t\tprivate logger: Logger,\n\t\t/** @internal */ public fields: SelectedFieldsOrdered | undefined,\n\t\tprivate tx: Transaction | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\t/** @internal */ public customResultMapper?: (\n\t\t\trows: unknown[][],\n\t\t\tmapColumnValue?: (value: unknown) => unknown,\n\t\t) => unknown,\n\t) {\n\t\tsuper('async', executeMethod, query);\n\t\tthis.customResultMapper = customResultMapper;\n\t\tthis.fields = fields;\n\t}\n\n\trun(placeholderValues?: Record<string, unknown>): Promise<ResultSet> {\n\t\tconst params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n\t\tthis.logger.logQuery(this.query.sql, params);\n\t\tconst stmt: InStatement = { sql: this.query.sql, args: params as InArgs };\n\t\treturn this.tx ? this.tx.execute(stmt) : this.client.execute(stmt);\n\t}\n\n\tasync all(placeholderValues?: Record<string, unknown>): Promise<T['all']> {\n\t\tconst { fields, logger, query, tx, client, customResultMapper } = this;\n\t\tif (!fields && !customResultMapper) {\n\t\t\tconst params = fillPlaceholders(query.params, placeholderValues ?? {});\n\t\t\tlogger.logQuery(query.sql, params);\n\t\t\tconst stmt: InStatement = { sql: query.sql, args: params as InArgs };\n\t\t\treturn (tx ? tx.execute(stmt) : client.execute(stmt)).then(({ rows }) => this.mapAllResult(rows));\n\t\t}\n\n\t\tconst rows = await this.values(placeholderValues) as unknown[][];\n\n\t\treturn this.mapAllResult(rows);\n\t}\n\n\toverride mapAllResult(rows: unknown, isFromBatch?: boolean): unknown {\n\t\tif (isFromBatch) {\n\t\t\trows = (rows as ResultSet).rows;\n\t\t}\n\n\t\tif (!this.fields && !this.customResultMapper) {\n\t\t\treturn (rows as unknown[]).map((row) => normalizeRow(row));\n\t\t}\n\n\t\tif (this.customResultMapper) {\n\t\t\treturn this.customResultMapper(rows as unknown[][], normalizeFieldValue) as T['all'];\n\t\t}\n\n\t\treturn (rows as unknown[]).map((row) => {\n\t\t\treturn mapResultRow(\n\t\t\t\tthis.fields!,\n\t\t\t\tArray.prototype.slice.call(row).map((v) => normalizeFieldValue(v)),\n\t\t\t\tthis.joinsNotNullableMap,\n\t\t\t);\n\t\t});\n\t}\n\n\tasync get(placeholderValues?: Record<string, unknown>): Promise<T['get']> {\n\t\tconst { fields, logger, query, tx, client, customResultMapper } = this;\n\t\tif (!fields && !customResultMapper) {\n\t\t\tconst params = fillPlaceholders(query.params, placeholderValues ?? {});\n\t\t\tlogger.logQuery(query.sql, params);\n\t\t\tconst stmt: InStatement = { sql: query.sql, args: params as InArgs };\n\t\t\treturn (tx ? tx.execute(stmt) : client.execute(stmt)).then(({ rows }) => this.mapGetResult(rows));\n\t\t}\n\n\t\tconst rows = await this.values(placeholderValues) as unknown[][];\n\n\t\treturn this.mapGetResult(rows);\n\t}\n\n\toverride mapGetResult(rows: unknown, isFromBatch?: boolean): unknown {\n\t\tif (isFromBatch) {\n\t\t\trows = (rows as ResultSet).rows;\n\t\t}\n\n\t\tconst row = (rows as unknown[])[0];\n\n\t\tif (!this.fields && !this.customResultMapper) {\n\t\t\treturn normalizeRow(row);\n\t\t}\n\n\t\tif (!row) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (this.customResultMapper) {\n\t\t\treturn this.customResultMapper(rows as unknown[][], normalizeFieldValue) as T['get'];\n\t\t}\n\n\t\treturn mapResultRow(\n\t\t\tthis.fields!,\n\t\t\tArray.prototype.slice.call(row).map((v) => normalizeFieldValue(v)),\n\t\t\tthis.joinsNotNullableMap,\n\t\t);\n\t}\n\n\tvalues(placeholderValues?: Record<string, unknown>): Promise<T['values']> {\n\t\tconst params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n\t\tthis.logger.logQuery(this.query.sql, params);\n\t\tconst stmt: InStatement = { sql: this.query.sql, args: params as InArgs };\n\t\treturn (this.tx ? this.tx.execute(stmt) : this.client.execute(stmt)).then(({ rows }) => rows) as Promise<\n\t\t\tT['values']\n\t\t>;\n\t}\n}\n\nfunction normalizeRow(obj: any) {\n\t// The libSQL node-sqlite3 compatibility wrapper returns rows\n\t// that can be accessed both as objects and arrays. Let's\n\t// turn them into objects what's what other SQLite drivers\n\t// do.\n\treturn Object.keys(obj).reduce((acc: Record<string, any>, key) => {\n\t\tif (Object.prototype.propertyIsEnumerable.call(obj, key)) {\n\t\t\tacc[key] = obj[key];\n\t\t}\n\t\treturn acc;\n\t}, {});\n}\n\nfunction normalizeFieldValue(value: unknown) {\n\tif (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) { // eslint-disable-line no-instanceof/no-instanceof\n\t\tif (typeof Buffer !== 'undefined') {\n\t\t\tif (!(value instanceof Buffer)) { // eslint-disable-line no-instanceof/no-instanceof\n\t\t\t\treturn Buffer.from(value);\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\t\tif (typeof TextDecoder !== 'undefined') {\n\t\t\treturn new TextDecoder().decode(value);\n\t\t}\n\t\tthrow new Error('TextDecoder is not available. Please provide either Buffer or TextDecoder polyfill.');\n\t}\n\treturn value;\n}\n", "import type { Client, ResultSet } from '@libsql/client';\nimport type { BatchItem, BatchResponse } from '~/batch.ts';\nimport { entityKind } from '~/entity.ts';\nimport { DefaultLogger } from '~/logger.ts';\nimport {\n\tcreateTableRelationsHelpers,\n\textractTablesRelationalConfig,\n\ttype ExtractTablesWithRelations,\n\ttype RelationalSchemaConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport { BaseSQLiteDatabase } from '~/sqlite-core/db.ts';\nimport { SQLiteAsyncDialect } from '~/sqlite-core/dialect.ts';\nimport type { DrizzleConfig } from '~/utils.ts';\nimport { LibSQLSession } from './session.ts';\n\nexport class LibSQLDatabase<\n\tTSchema extends Record<string, unknown> = Record<string, never>,\n> extends BaseSQLiteDatabase<'async', ResultSet, TSchema> {\n\tstatic readonly [entityKind]: string = 'LibSQLDatabase';\n\n\t/** @internal */\n\tdeclare readonly session: LibSQLSession<TSchema, ExtractTablesWithRelations<TSchema>>;\n\n\tasync batch<U extends BatchItem<'sqlite'>, T extends Readonly<[U, ...U[]]>>(\n\t\tbatch: T,\n\t): Promise<BatchResponse<T>> {\n\t\treturn this.session.batch(batch) as Promise<BatchResponse<T>>;\n\t}\n}\n\nexport function drizzle<\n\tTSchema extends Record<string, unknown> = Record<string, never>,\n>(client: Client, config: DrizzleConfig<TSchema> = {}): LibSQLDatabase<TSchema> {\n\tconst dialect = new SQLiteAsyncDialect();\n\tlet logger;\n\tif (config.logger === true) {\n\t\tlogger = new DefaultLogger();\n\t} else if (config.logger !== false) {\n\t\tlogger = config.logger;\n\t}\n\n\tlet schema: RelationalSchemaConfig<TablesRelationalConfig> | undefined;\n\tif (config.schema) {\n\t\tconst tablesConfig = extractTablesRelationalConfig(\n\t\t\tconfig.schema,\n\t\t\tcreateTableRelationsHelpers,\n\t\t);\n\t\tschema = {\n\t\t\tfullSchema: config.schema,\n\t\t\tschema: tablesConfig.tables,\n\t\t\ttableNamesMap: tablesConfig.tableNamesMap,\n\t\t};\n\t}\n\n\tconst session = new LibSQLSession(client, dialect, schema, { logger }, undefined);\n\treturn new LibSQLDatabase('async', dialect, session, schema) as LibSQLDatabase<TSchema>;\n}\n", "/** Error thrown by the client. */\nexport class LibsqlError extends Error {\n    /** Machine-readable error code. */\n    code;\n    /** Raw numeric error code */\n    rawCode;\n    constructor(message, code, rawCode, cause) {\n        if (code !== undefined) {\n            message = `${code}: ${message}`;\n        }\n        super(message, { cause });\n        this.code = code;\n        this.rawCode = rawCode;\n        this.name = \"LibsqlError\";\n    }\n}\n", "// URI parser based on RFC 3986\n// We can't use the standard `URL` object, because we want to support relative `file:` URLs like\n// `file:relative/path/database.db`, which are not correct according to RFC 8089, which standardizes the\n// `file` scheme.\nimport { LibsqlError } from \"./api.js\";\nexport function parseUri(text) {\n    const match = URI_RE.exec(text);\n    if (match === null) {\n        throw new LibsqlError(\"The URL is not in a valid format\", \"URL_INVALID\");\n    }\n    const groups = match.groups;\n    const scheme = groups[\"scheme\"];\n    const authority = groups[\"authority\"] !== undefined\n        ? parseAuthority(groups[\"authority\"]) : undefined;\n    const path = percentDecode(groups[\"path\"]);\n    const query = groups[\"query\"] !== undefined\n        ? parseQuery(groups[\"query\"]) : undefined;\n    const fragment = groups[\"fragment\"] !== undefined\n        ? percentDecode(groups[\"fragment\"]) : undefined;\n    return { scheme, authority, path, query, fragment };\n}\nconst URI_RE = (() => {\n    const SCHEME = '(?<scheme>[A-Za-z][A-Za-z.+-]*)';\n    const AUTHORITY = '(?<authority>[^/?#]*)';\n    const PATH = '(?<path>[^?#]*)';\n    const QUERY = '(?<query>[^#]*)';\n    const FRAGMENT = '(?<fragment>.*)';\n    return new RegExp(`^${SCHEME}:(//${AUTHORITY})?${PATH}(\\\\?${QUERY})?(#${FRAGMENT})?$`, \"su\");\n})();\nfunction parseAuthority(text) {\n    const match = AUTHORITY_RE.exec(text);\n    if (match === null) {\n        throw new LibsqlError(\"The authority part of the URL is not in a valid format\", \"URL_INVALID\");\n    }\n    const groups = match.groups;\n    const host = percentDecode(groups[\"host_br\"] ?? groups[\"host\"]);\n    const port = groups[\"port\"]\n        ? parseInt(groups[\"port\"], 10)\n        : undefined;\n    const userinfo = groups[\"username\"] !== undefined\n        ? {\n            username: percentDecode(groups[\"username\"]),\n            password: groups[\"password\"] !== undefined\n                ? percentDecode(groups[\"password\"]) : undefined,\n        }\n        : undefined;\n    return { host, port, userinfo };\n}\nconst AUTHORITY_RE = (() => {\n    return new RegExp(`^((?<username>[^:]*)(:(?<password>.*))?@)?((?<host>[^:\\\\[\\\\]]*)|(\\\\[(?<host_br>[^\\\\[\\\\]]*)\\\\]))(:(?<port>[0-9]*))?$`, \"su\");\n})();\n// Query string is parsed as application/x-www-form-urlencoded according to the Web URL standard:\n// https://url.spec.whatwg.org/#urlencoded-parsing\nfunction parseQuery(text) {\n    const sequences = text.split(\"&\");\n    const pairs = [];\n    for (const sequence of sequences) {\n        if (sequence === \"\") {\n            continue;\n        }\n        let key;\n        let value;\n        const splitIdx = sequence.indexOf(\"=\");\n        if (splitIdx < 0) {\n            key = sequence;\n            value = \"\";\n        }\n        else {\n            key = sequence.substring(0, splitIdx);\n            value = sequence.substring(splitIdx + 1);\n        }\n        pairs.push({\n            key: percentDecode(key.replaceAll(\"+\", \" \")),\n            value: percentDecode(value.replaceAll(\"+\", \" \")),\n        });\n    }\n    return { pairs };\n}\nfunction percentDecode(text) {\n    try {\n        return decodeURIComponent(text);\n    }\n    catch (e) {\n        if (e instanceof URIError) {\n            throw new LibsqlError(`URL component has invalid percent encoding: ${e}`, \"URL_INVALID\", undefined, e);\n        }\n        throw e;\n    }\n}\nexport function encodeBaseUrl(scheme, authority, path) {\n    if (authority === undefined) {\n        throw new LibsqlError(`URL with scheme ${JSON.stringify(scheme + \":\")} requires authority (the \"//\" part)`, \"URL_INVALID\");\n    }\n    const schemeText = `${scheme}:`;\n    const hostText = encodeHost(authority.host);\n    const portText = encodePort(authority.port);\n    const userinfoText = encodeUserinfo(authority.userinfo);\n    const authorityText = `//${userinfoText}${hostText}${portText}`;\n    let pathText = path.split(\"/\").map(encodeURIComponent).join(\"/\");\n    if (pathText !== \"\" && !pathText.startsWith(\"/\")) {\n        pathText = \"/\" + pathText;\n    }\n    return new URL(`${schemeText}${authorityText}${pathText}`);\n}\nfunction encodeHost(host) {\n    return host.includes(\":\") ? `[${encodeURI(host)}]` : encodeURI(host);\n}\nfunction encodePort(port) {\n    return port !== undefined ? `:${port}` : \"\";\n}\nfunction encodeUserinfo(userinfo) {\n    if (userinfo === undefined) {\n        return \"\";\n    }\n    const usernameText = encodeURIComponent(userinfo.username);\n    const passwordText = userinfo.password !== undefined\n        ? `:${encodeURIComponent(userinfo.password)}` : \"\";\n    return `${usernameText}${passwordText}@`;\n}\n", "/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.6';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasatob = typeof atob === 'function';\nconst _hasbtoa = typeof btoa === 'function';\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it) => new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = _hasbtoa ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 \u00A75\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 \u00A75.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = _hasatob ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a).split('').map(c => c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n", "import { Base64 } from \"js-base64\";\nexport const supportedUrlLink = \"https://github.com/libsql/libsql-client-ts#supported-urls\";\nexport function transactionModeToBegin(mode) {\n    if (mode === \"write\") {\n        return \"BEGIN IMMEDIATE\";\n    }\n    else if (mode === \"read\") {\n        return \"BEGIN TRANSACTION READONLY\";\n    }\n    else if (mode === \"deferred\") {\n        return \"BEGIN DEFERRED\";\n    }\n    else {\n        throw RangeError('Unknown transaction mode, supported values are \"write\", \"read\" and \"deferred\"');\n    }\n}\nexport class ResultSetImpl {\n    columns;\n    columnTypes;\n    rows;\n    rowsAffected;\n    lastInsertRowid;\n    constructor(columns, columnTypes, rows, rowsAffected, lastInsertRowid) {\n        this.columns = columns;\n        this.columnTypes = columnTypes;\n        this.rows = rows;\n        this.rowsAffected = rowsAffected;\n        this.lastInsertRowid = lastInsertRowid;\n    }\n    toJSON() {\n        return {\n            \"columns\": this.columns,\n            \"columnTypes\": this.columnTypes,\n            \"rows\": this.rows.map(rowToJson),\n            \"rowsAffected\": this.rowsAffected,\n            \"lastInsertRowid\": this.lastInsertRowid !== undefined ? \"\" + this.lastInsertRowid : null,\n        };\n    }\n}\nfunction rowToJson(row) {\n    return Array.prototype.map.call(row, valueToJson);\n}\nfunction valueToJson(value) {\n    if (typeof value === \"bigint\") {\n        return \"\" + value;\n    }\n    else if (value instanceof ArrayBuffer) {\n        return Base64.fromUint8Array(new Uint8Array(value));\n    }\n    else {\n        return value;\n    }\n}\n", "import { LibsqlError } from \"./api.js\";\nimport { parseUri } from \"./uri.js\";\nimport { supportedUrlLink } from \"./util.js\";\nexport function expandConfig(config, preferHttp) {\n    if (typeof config !== \"object\") {\n        // produce a reasonable error message in the common case where users type\n        // `createClient(\"libsql://...\")` instead of `createClient({url: \"libsql://...\"})`\n        throw new TypeError(`Expected client configuration as object, got ${typeof config}`);\n    }\n    let tls = config.tls;\n    let authToken = config.authToken;\n    let syncUrl = config.syncUrl;\n    const intMode = \"\" + (config.intMode ?? \"number\");\n    if (intMode !== \"number\" && intMode !== \"bigint\" && intMode !== \"string\") {\n        throw new TypeError(`Invalid value for intMode, expected \"number\", \"bigint\" or \"string\", \\\n            got ${JSON.stringify(intMode)}`);\n    }\n    if (config.url === ':memory:') {\n        return {\n            path: ':memory:',\n            scheme: 'file',\n            syncUrl,\n            intMode,\n            fetch: config.fetch,\n            tls: false,\n            authToken: undefined,\n            authority: undefined,\n        };\n    }\n    const uri = parseUri(config.url);\n    for (const { key, value } of uri.query?.pairs ?? []) {\n        if (key === \"authToken\") {\n            authToken = value ? value : undefined;\n        }\n        else if (key === \"tls\") {\n            if (value === \"0\") {\n                tls = false;\n            }\n            else if (value === \"1\") {\n                tls = true;\n            }\n            else {\n                throw new LibsqlError(`Unknown value for the \"tls\" query argument: ${JSON.stringify(value)}. ` +\n                    'Supported values are \"0\" and \"1\"', \"URL_INVALID\");\n            }\n        }\n        else {\n            throw new LibsqlError(`Unknown URL query parameter ${JSON.stringify(key)}`, \"URL_PARAM_NOT_SUPPORTED\");\n        }\n    }\n    const uriScheme = uri.scheme.toLowerCase();\n    let scheme;\n    if (uriScheme === \"libsql\") {\n        if (tls === false) {\n            if (uri.authority?.port === undefined) {\n                throw new LibsqlError('A \"libsql:\" URL with ?tls=0 must specify an explicit port', \"URL_INVALID\");\n            }\n            scheme = preferHttp ? \"http\" : \"ws\";\n        }\n        else {\n            scheme = preferHttp ? \"https\" : \"wss\";\n        }\n    }\n    else if (uriScheme === \"http\" || uriScheme === \"ws\") {\n        scheme = uriScheme;\n        tls ??= false;\n    }\n    else if (uriScheme === \"https\" || uriScheme === \"wss\" || uriScheme === \"file\") {\n        scheme = uriScheme;\n    }\n    else {\n        throw new LibsqlError('The client supports only \"libsql:\", \"wss:\", \"ws:\", \"https:\", \"http:\" and \"file:\" URLs, ' +\n            `got ${JSON.stringify(uri.scheme + \":\")}. ` +\n            `For more information, please read ${supportedUrlLink}`, \"URL_SCHEME_NOT_SUPPORTED\");\n    }\n    if (uri.fragment !== undefined) {\n        throw new LibsqlError(`URL fragments are not supported: ${JSON.stringify(\"#\" + uri.fragment)}`, \"URL_INVALID\");\n    }\n    return {\n        scheme,\n        tls: tls ?? true,\n        authority: uri.authority,\n        path: uri.path,\n        authToken,\n        syncUrl,\n        intMode,\n        fetch: config.fetch,\n    };\n}\n", "let _WebSocket;\nif (typeof WebSocket !== \"undefined\") {\n    _WebSocket = WebSocket;\n} else if (typeof global !== \"undefined\") {\n    _WebSocket = global.WebSocket;\n} else if (typeof window !== \"undefined\") {\n    _WebSocket = window.WebSocket;\n} else if (typeof self !== \"undefined\") {\n    _WebSocket = self.WebSocket;\n}\nexport { _WebSocket as WebSocket };\n", "/** A client for the Hrana protocol (a \"database connection pool\"). */\nexport class Client {\n    /** @private */\n    constructor() {\n        this.intMode = \"number\";\n    }\n    /** Representation of integers returned from the database. See {@link IntMode}.\n     *\n     * This value is inherited by {@link Stream} objects created with {@link openStream}, but you can\n     * override the integer mode for every stream by setting {@link Stream.intMode} on the stream.\n     */\n    intMode;\n}\n", "/** Generic error produced by the Hrana client. */\nexport class ClientError extends Error {\n    /** @private */\n    constructor(message) {\n        super(message);\n        this.name = \"ClientError\";\n    }\n}\n/** Error thrown when the server violates the protocol. */\nexport class ProtoError extends ClientError {\n    /** @private */\n    constructor(message) {\n        super(message);\n        this.name = \"ProtoError\";\n    }\n}\n/** Error thrown when the server returns an error response. */\nexport class ResponseError extends ClientError {\n    code;\n    /** @internal */\n    proto;\n    /** @private */\n    constructor(message, protoError) {\n        super(message);\n        this.name = \"ResponseError\";\n        this.code = protoError.code;\n        this.proto = protoError;\n        this.stack = undefined;\n    }\n}\n/** Error thrown when the client or stream is closed. */\nexport class ClosedError extends ClientError {\n    /** @private */\n    constructor(message, cause) {\n        if (cause !== undefined) {\n            super(`${message}: ${cause}`);\n            this.cause = cause;\n        }\n        else {\n            super(message);\n        }\n        this.name = \"ClosedError\";\n    }\n}\n/** Error thrown when the environment does not seem to support WebSockets. */\nexport class WebSocketUnsupportedError extends ClientError {\n    /** @private */\n    constructor(message) {\n        super(message);\n        this.name = \"WebSocketUnsupportedError\";\n    }\n}\n/** Error thrown when we encounter a WebSocket error. */\nexport class WebSocketError extends ClientError {\n    /** @private */\n    constructor(message) {\n        super(message);\n        this.name = \"WebSocketError\";\n    }\n}\n/** Error thrown when the HTTP server returns an error response. */\nexport class HttpServerError extends ClientError {\n    status;\n    /** @private */\n    constructor(message, status) {\n        super(message);\n        this.status = status;\n        this.name = \"HttpServerError\";\n    }\n}\n/** Error thrown when a libsql URL is not valid. */\nexport class LibsqlUrlParseError extends ClientError {\n    /** @private */\n    constructor(message) {\n        super(message);\n        this.name = \"LibsqlUrlParseError\";\n    }\n}\n/** Error thrown when the protocol version is too low to support a feature. */\nexport class ProtocolVersionError extends ClientError {\n    /** @private */\n    constructor(message) {\n        super(message);\n        this.name = \"ProtocolVersionError\";\n    }\n}\n/** Error thrown when an internal client error happens. */\nexport class InternalError extends ClientError {\n    /** @private */\n    constructor(message) {\n        super(message);\n        this.name = \"InternalError\";\n    }\n}\n/** Error thrown when the API is misused. */\nexport class MisuseError extends ClientError {\n    /** @private */\n    constructor(message) {\n        super(message);\n        this.name = \"MisuseError\";\n    }\n}\n", "import { ProtoError } from \"../../errors.js\";\nexport function string(value) {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    throw typeError(value, \"string\");\n}\nexport function stringOpt(value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    else if (typeof value === \"string\") {\n        return value;\n    }\n    throw typeError(value, \"string or null\");\n}\nexport function number(value) {\n    if (typeof value === \"number\") {\n        return value;\n    }\n    throw typeError(value, \"number\");\n}\nexport function boolean(value) {\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    throw typeError(value, \"boolean\");\n}\nexport function array(value) {\n    if (Array.isArray(value)) {\n        return value;\n    }\n    throw typeError(value, \"array\");\n}\nexport function object(value) {\n    if (value !== null && typeof value === \"object\" && !Array.isArray(value)) {\n        return value;\n    }\n    throw typeError(value, \"object\");\n}\nexport function arrayObjectsMap(value, fun) {\n    return array(value).map((elemValue) => fun(object(elemValue)));\n}\nfunction typeError(value, expected) {\n    if (value === undefined) {\n        return new ProtoError(`Expected ${expected}, but the property was missing`);\n    }\n    let received = typeof value;\n    if (value === null) {\n        received = \"null\";\n    }\n    else if (Array.isArray(value)) {\n        received = \"array\";\n    }\n    return new ProtoError(`Expected ${expected}, received ${received}`);\n}\nexport function readJsonObject(value, fun) {\n    return fun(object(value));\n}\n", "export class ObjectWriter {\n    #output;\n    #isFirst;\n    constructor(output) {\n        this.#output = output;\n        this.#isFirst = false;\n    }\n    begin() {\n        this.#output.push('{');\n        this.#isFirst = true;\n    }\n    end() {\n        this.#output.push('}');\n        this.#isFirst = false;\n    }\n    #key(name) {\n        if (this.#isFirst) {\n            this.#output.push('\"');\n            this.#isFirst = false;\n        }\n        else {\n            this.#output.push(',\"');\n        }\n        this.#output.push(name);\n        this.#output.push('\":');\n    }\n    string(name, value) {\n        this.#key(name);\n        this.#output.push(JSON.stringify(value));\n    }\n    stringRaw(name, value) {\n        this.#key(name);\n        this.#output.push('\"');\n        this.#output.push(value);\n        this.#output.push('\"');\n    }\n    number(name, value) {\n        this.#key(name);\n        this.#output.push(\"\" + value);\n    }\n    boolean(name, value) {\n        this.#key(name);\n        this.#output.push(value ? \"true\" : \"false\");\n    }\n    object(name, value, valueFun) {\n        this.#key(name);\n        this.begin();\n        valueFun(this, value);\n        this.end();\n    }\n    arrayObjects(name, values, valueFun) {\n        this.#key(name);\n        this.#output.push('[');\n        for (let i = 0; i < values.length; ++i) {\n            if (i !== 0) {\n                this.#output.push(',');\n            }\n            this.begin();\n            valueFun(this, values[i]);\n            this.end();\n        }\n        this.#output.push(']');\n    }\n}\nexport function writeJsonObject(value, fun) {\n    const output = [];\n    const writer = new ObjectWriter(output);\n    writer.begin();\n    fun(writer, value);\n    writer.end();\n    return output.join(\"\");\n}\n", "export const VARINT = 0;\nexport const FIXED_64 = 1;\nexport const LENGTH_DELIMITED = 2;\nexport const GROUP_START = 3;\nexport const GROUP_END = 4;\nexport const FIXED_32 = 5;\n", "import { ProtoError } from \"../../errors.js\";\nimport { VARINT, FIXED_64, LENGTH_DELIMITED, FIXED_32 } from \"./util.js\";\nclass MessageReader {\n    #array;\n    #view;\n    #pos;\n    constructor(array) {\n        this.#array = array;\n        this.#view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n        this.#pos = 0;\n    }\n    varint() {\n        let value = 0;\n        for (let shift = 0;; shift += 7) {\n            const byte = this.#array[this.#pos++];\n            value |= (byte & 0x7f) << shift;\n            if (!(byte & 0x80)) {\n                break;\n            }\n        }\n        return value;\n    }\n    varintBig() {\n        let value = 0n;\n        for (let shift = 0n;; shift += 7n) {\n            const byte = this.#array[this.#pos++];\n            value |= BigInt(byte & 0x7f) << shift;\n            if (!(byte & 0x80)) {\n                break;\n            }\n        }\n        return value;\n    }\n    bytes(length) {\n        const array = new Uint8Array(this.#array.buffer, this.#array.byteOffset + this.#pos, length);\n        this.#pos += length;\n        return array;\n    }\n    double() {\n        const value = this.#view.getFloat64(this.#pos, true);\n        this.#pos += 8;\n        return value;\n    }\n    skipVarint() {\n        for (;;) {\n            const byte = this.#array[this.#pos++];\n            if (!(byte & 0x80)) {\n                break;\n            }\n        }\n    }\n    skip(count) {\n        this.#pos += count;\n    }\n    eof() {\n        return this.#pos >= this.#array.byteLength;\n    }\n}\nexport class FieldReader {\n    #reader;\n    #wireType;\n    constructor(reader) {\n        this.#reader = reader;\n        this.#wireType = -1;\n    }\n    setup(wireType) {\n        this.#wireType = wireType;\n    }\n    #expect(expectedWireType) {\n        if (this.#wireType !== expectedWireType) {\n            throw new ProtoError(`Expected wire type ${expectedWireType}, got ${this.#wireType}`);\n        }\n        this.#wireType = -1;\n    }\n    bytes() {\n        this.#expect(LENGTH_DELIMITED);\n        const length = this.#reader.varint();\n        return this.#reader.bytes(length);\n    }\n    string() {\n        return new TextDecoder().decode(this.bytes());\n    }\n    message(def) {\n        return readProtobufMessage(this.bytes(), def);\n    }\n    int32() {\n        this.#expect(VARINT);\n        return this.#reader.varint();\n    }\n    uint32() {\n        return this.int32();\n    }\n    bool() {\n        return this.int32() !== 0;\n    }\n    uint64() {\n        this.#expect(VARINT);\n        return this.#reader.varintBig();\n    }\n    sint64() {\n        const value = this.uint64();\n        return (value >> 1n) ^ (-(value & 1n));\n    }\n    double() {\n        this.#expect(FIXED_64);\n        return this.#reader.double();\n    }\n    maybeSkip() {\n        if (this.#wireType < 0) {\n            return;\n        }\n        else if (this.#wireType === VARINT) {\n            this.#reader.skipVarint();\n        }\n        else if (this.#wireType === FIXED_64) {\n            this.#reader.skip(8);\n        }\n        else if (this.#wireType === LENGTH_DELIMITED) {\n            const length = this.#reader.varint();\n            this.#reader.skip(length);\n        }\n        else if (this.#wireType === FIXED_32) {\n            this.#reader.skip(4);\n        }\n        else {\n            throw new ProtoError(`Unexpected wire type ${this.#wireType}`);\n        }\n        this.#wireType = -1;\n    }\n}\nexport function readProtobufMessage(data, def) {\n    const msgReader = new MessageReader(data);\n    const fieldReader = new FieldReader(msgReader);\n    let value = def.default();\n    while (!msgReader.eof()) {\n        const key = msgReader.varint();\n        const tag = key >> 3;\n        const wireType = key & 0x7;\n        fieldReader.setup(wireType);\n        const tagFun = def[tag];\n        if (tagFun !== undefined) {\n            const returnedValue = tagFun(fieldReader, value);\n            if (returnedValue !== undefined) {\n                value = returnedValue;\n            }\n        }\n        fieldReader.maybeSkip();\n    }\n    return value;\n}\n", "import { VARINT, FIXED_64, LENGTH_DELIMITED } from \"./util.js\";\nexport class MessageWriter {\n    #buf;\n    #array;\n    #view;\n    #pos;\n    constructor() {\n        this.#buf = new ArrayBuffer(256);\n        this.#array = new Uint8Array(this.#buf);\n        this.#view = new DataView(this.#buf);\n        this.#pos = 0;\n    }\n    #ensure(extra) {\n        if (this.#pos + extra <= this.#buf.byteLength) {\n            return;\n        }\n        let newCap = this.#buf.byteLength;\n        while (newCap < this.#pos + extra) {\n            newCap *= 2;\n        }\n        const newBuf = new ArrayBuffer(newCap);\n        const newArray = new Uint8Array(newBuf);\n        const newView = new DataView(newBuf);\n        newArray.set(new Uint8Array(this.#buf, 0, this.#pos));\n        this.#buf = newBuf;\n        this.#array = newArray;\n        this.#view = newView;\n    }\n    #varint(value) {\n        this.#ensure(5);\n        value = 0 | value;\n        do {\n            let byte = value & 0x7f;\n            value >>>= 7;\n            byte |= (value ? 0x80 : 0);\n            this.#array[this.#pos++] = byte;\n        } while (value);\n    }\n    #varintBig(value) {\n        this.#ensure(10);\n        value = value & 0xffffffffffffffffn;\n        do {\n            let byte = Number(value & 0x7fn);\n            value >>= 7n;\n            byte |= (value ? 0x80 : 0);\n            this.#array[this.#pos++] = byte;\n        } while (value);\n    }\n    #tag(tag, wireType) {\n        this.#varint((tag << 3) | wireType);\n    }\n    bytes(tag, value) {\n        this.#tag(tag, LENGTH_DELIMITED);\n        this.#varint(value.byteLength);\n        this.#ensure(value.byteLength);\n        this.#array.set(value, this.#pos);\n        this.#pos += value.byteLength;\n    }\n    string(tag, value) {\n        this.bytes(tag, new TextEncoder().encode(value));\n    }\n    message(tag, value, fun) {\n        const writer = new MessageWriter();\n        fun(writer, value);\n        this.bytes(tag, writer.data());\n    }\n    int32(tag, value) {\n        this.#tag(tag, VARINT);\n        this.#varint(value);\n    }\n    uint32(tag, value) {\n        this.int32(tag, value);\n    }\n    bool(tag, value) {\n        this.int32(tag, value ? 1 : 0);\n    }\n    sint64(tag, value) {\n        this.#tag(tag, VARINT);\n        this.#varintBig((value << 1n) ^ (value >> 63n));\n    }\n    double(tag, value) {\n        this.#tag(tag, FIXED_64);\n        this.#ensure(8);\n        this.#view.setFloat64(this.#pos, value, true);\n        this.#pos += 8;\n    }\n    data() {\n        return new Uint8Array(this.#buf, 0, this.#pos);\n    }\n}\nexport function writeProtobufMessage(value, fun) {\n    const w = new MessageWriter();\n    fun(w, value);\n    return w.data();\n}\n", "import { InternalError } from \"./errors.js\";\n// An allocator of non-negative integer ids.\n//\n// This clever data structure has these \"ideal\" properties:\n// - It consumes memory proportional to the number of used ids (which is optimal).\n// - All operations are O(1) time.\n// - The allocated ids are small (with a slight modification, we could always provide the smallest possible\n// id).\nexport class IdAlloc {\n    // Set of all allocated ids\n    #usedIds;\n    // Set of all free ids lower than `#usedIds.size`\n    #freeIds;\n    constructor() {\n        this.#usedIds = new Set();\n        this.#freeIds = new Set();\n    }\n    // Returns an id that was free, and marks it as used.\n    alloc() {\n        // this \"loop\" is just a way to pick an arbitrary element from the `#freeIds` set\n        for (const freeId of this.#freeIds) {\n            this.#freeIds.delete(freeId);\n            this.#usedIds.add(freeId);\n            // maintain the invariant of `#freeIds`\n            if (!this.#usedIds.has(this.#usedIds.size - 1)) {\n                this.#freeIds.add(this.#usedIds.size - 1);\n            }\n            return freeId;\n        }\n        // the `#freeIds` set is empty, so there are no free ids lower than `#usedIds.size`\n        // this means that `#usedIds` is a set that contains all numbers from 0 to `#usedIds.size - 1`,\n        // so `#usedIds.size` is free\n        const freeId = this.#usedIds.size;\n        this.#usedIds.add(freeId);\n        return freeId;\n    }\n    free(id) {\n        if (!this.#usedIds.delete(id)) {\n            throw new InternalError(\"Freeing an id that is not allocated\");\n        }\n        // maintain the invariant of `#freeIds`\n        this.#freeIds.delete(this.#usedIds.size);\n        if (id < this.#usedIds.size) {\n            this.#freeIds.add(id);\n        }\n    }\n}\n", "import { InternalError } from \"./errors.js\";\nexport function impossible(value, message) {\n    throw new InternalError(message);\n}\n", "import { ProtoError, MisuseError } from \"./errors.js\";\nimport { impossible } from \"./util.js\";\nexport function valueToProto(value) {\n    if (value === null) {\n        return null;\n    }\n    else if (typeof value === \"string\") {\n        return value;\n    }\n    else if (typeof value === \"number\") {\n        if (!Number.isFinite(value)) {\n            throw new RangeError(\"Only finite numbers (not Infinity or NaN) can be passed as arguments\");\n        }\n        return value;\n    }\n    else if (typeof value === \"bigint\") {\n        if (value < minInteger || value > maxInteger) {\n            throw new RangeError(\"This bigint value is too large to be represented as a 64-bit integer and passed as argument\");\n        }\n        return value;\n    }\n    else if (typeof value === \"boolean\") {\n        return value ? 1n : 0n;\n    }\n    else if (value instanceof ArrayBuffer) {\n        return new Uint8Array(value);\n    }\n    else if (value instanceof Uint8Array) {\n        return value;\n    }\n    else if (value instanceof Date) {\n        return +value.valueOf();\n    }\n    else if (typeof value === \"object\") {\n        return \"\" + value.toString();\n    }\n    else {\n        throw new TypeError(\"Unsupported type of value\");\n    }\n}\nconst minInteger = -9223372036854775808n;\nconst maxInteger = 9223372036854775807n;\nexport function valueFromProto(value, intMode) {\n    if (value === null) {\n        return null;\n    }\n    else if (typeof value === \"number\") {\n        return value;\n    }\n    else if (typeof value === \"string\") {\n        return value;\n    }\n    else if (typeof value === \"bigint\") {\n        if (intMode === \"number\") {\n            const num = Number(value);\n            if (!Number.isSafeInteger(num)) {\n                throw new RangeError(\"Received integer which is too large to be safely represented as a JavaScript number\");\n            }\n            return num;\n        }\n        else if (intMode === \"bigint\") {\n            return value;\n        }\n        else if (intMode === \"string\") {\n            return \"\" + value;\n        }\n        else {\n            throw new MisuseError(\"Invalid value for IntMode\");\n        }\n    }\n    else if (value instanceof Uint8Array) {\n        // TODO: we need to copy data from `Uint8Array` to return an `ArrayBuffer`. Perhaps we should add a\n        // `blobMode` parameter, similar to `intMode`, which would allow the user to choose between receiving\n        // `ArrayBuffer` (default, convenient) and `Uint8Array` (zero copy)?\n        return value.slice().buffer;\n    }\n    else if (value === undefined) {\n        throw new ProtoError(\"Received unrecognized type of Value\");\n    }\n    else {\n        throw impossible(value, \"Impossible type of Value\");\n    }\n}\n", "import { ResponseError } from \"./errors.js\";\nimport { valueFromProto } from \"./value.js\";\nexport function stmtResultFromProto(result) {\n    return {\n        affectedRowCount: result.affectedRowCount,\n        lastInsertRowid: result.lastInsertRowid,\n        columnNames: result.cols.map(col => col.name),\n        columnDecltypes: result.cols.map(col => col.decltype),\n    };\n}\nexport function rowsResultFromProto(result, intMode) {\n    const stmtResult = stmtResultFromProto(result);\n    const rows = result.rows.map(row => rowFromProto(stmtResult.columnNames, row, intMode));\n    return { ...stmtResult, rows };\n}\nexport function rowResultFromProto(result, intMode) {\n    const stmtResult = stmtResultFromProto(result);\n    let row;\n    if (result.rows.length > 0) {\n        row = rowFromProto(stmtResult.columnNames, result.rows[0], intMode);\n    }\n    return { ...stmtResult, row };\n}\nexport function valueResultFromProto(result, intMode) {\n    const stmtResult = stmtResultFromProto(result);\n    let value;\n    if (result.rows.length > 0 && stmtResult.columnNames.length > 0) {\n        value = valueFromProto(result.rows[0][0], intMode);\n    }\n    return { ...stmtResult, value };\n}\nfunction rowFromProto(colNames, values, intMode) {\n    const row = {};\n    // make sure that the \"length\" property is not enumerable\n    Object.defineProperty(row, \"length\", { value: values.length });\n    for (let i = 0; i < values.length; ++i) {\n        const value = valueFromProto(values[i], intMode);\n        Object.defineProperty(row, i, { value });\n        const colName = colNames[i];\n        if (colName !== undefined && !Object.hasOwn(row, colName)) {\n            Object.defineProperty(row, colName, { value, enumerable: true });\n        }\n    }\n    return row;\n}\nexport function errorFromProto(error) {\n    return new ResponseError(error.message, error);\n}\n", "import { ClientError, ClosedError, MisuseError } from \"./errors.js\";\n/** Text of an SQL statement cached on the server. */\nexport class Sql {\n    #owner;\n    #sqlId;\n    #closed;\n    /** @private */\n    constructor(owner, sqlId) {\n        this.#owner = owner;\n        this.#sqlId = sqlId;\n        this.#closed = undefined;\n    }\n    /** @private */\n    _getSqlId(owner) {\n        if (this.#owner !== owner) {\n            throw new MisuseError(\"Attempted to use SQL text opened with other object\");\n        }\n        else if (this.#closed !== undefined) {\n            throw new ClosedError(\"SQL text is closed\", this.#closed);\n        }\n        return this.#sqlId;\n    }\n    /** Remove the SQL text from the server, releasing resouces. */\n    close() {\n        this._setClosed(new ClientError(\"SQL text was manually closed\"));\n    }\n    /** @private */\n    _setClosed(error) {\n        if (this.#closed === undefined) {\n            this.#closed = error;\n            this.#owner._closeSql(this.#sqlId);\n        }\n    }\n    /** True if the SQL text is closed (removed from the server). */\n    get closed() {\n        return this.#closed !== undefined;\n    }\n}\nexport function sqlToProto(owner, sql) {\n    if (sql instanceof Sql) {\n        return { sqlId: sql._getSqlId(owner) };\n    }\n    else {\n        return { sql: \"\" + sql };\n    }\n}\n", "export class Queue {\n    #pushStack;\n    #shiftStack;\n    constructor() {\n        this.#pushStack = [];\n        this.#shiftStack = [];\n    }\n    get length() {\n        return this.#pushStack.length + this.#shiftStack.length;\n    }\n    push(elem) {\n        this.#pushStack.push(elem);\n    }\n    shift() {\n        if (this.#shiftStack.length === 0 && this.#pushStack.length > 0) {\n            this.#shiftStack = this.#pushStack.reverse();\n            this.#pushStack = [];\n        }\n        return this.#shiftStack.pop();\n    }\n    first() {\n        return this.#shiftStack.length !== 0\n            ? this.#shiftStack[this.#shiftStack.length - 1]\n            : this.#pushStack[0];\n    }\n}\n", "import { sqlToProto } from \"./sql.js\";\nimport { valueToProto } from \"./value.js\";\n/** A statement that can be evaluated by the database. Besides the SQL text, it also contains the positional\n * and named arguments. */\nexport class Stmt {\n    /** The SQL statement text. */\n    sql;\n    /** @private */\n    _args;\n    /** @private */\n    _namedArgs;\n    /** Initialize the statement with given SQL text. */\n    constructor(sql) {\n        this.sql = sql;\n        this._args = [];\n        this._namedArgs = new Map();\n    }\n    /** Binds positional parameters from the given `values`. All previous positional bindings are cleared. */\n    bindIndexes(values) {\n        this._args.length = 0;\n        for (const value of values) {\n            this._args.push(valueToProto(value));\n        }\n        return this;\n    }\n    /** Binds a parameter by a 1-based index. */\n    bindIndex(index, value) {\n        if (index !== (index | 0) || index <= 0) {\n            throw new RangeError(\"Index of a positional argument must be positive integer\");\n        }\n        while (this._args.length < index) {\n            this._args.push(null);\n        }\n        this._args[index - 1] = valueToProto(value);\n        return this;\n    }\n    /** Binds a parameter by name. */\n    bindName(name, value) {\n        this._namedArgs.set(name, valueToProto(value));\n        return this;\n    }\n    /** Clears all bindings. */\n    unbindAll() {\n        this._args.length = 0;\n        this._namedArgs.clear();\n        return this;\n    }\n}\nexport function stmtToProto(sqlOwner, stmt, wantRows) {\n    let inSql;\n    let args = [];\n    let namedArgs = [];\n    if (stmt instanceof Stmt) {\n        inSql = stmt.sql;\n        args = stmt._args;\n        for (const [name, value] of stmt._namedArgs.entries()) {\n            namedArgs.push({ name, value });\n        }\n    }\n    else if (Array.isArray(stmt)) {\n        inSql = stmt[0];\n        if (Array.isArray(stmt[1])) {\n            args = stmt[1].map((arg) => valueToProto(arg));\n        }\n        else {\n            namedArgs = Object.entries(stmt[1]).map(([name, value]) => {\n                return { name, value: valueToProto(value) };\n            });\n        }\n    }\n    else {\n        inSql = stmt;\n    }\n    const { sql, sqlId } = sqlToProto(sqlOwner, inSql);\n    return { sql, sqlId, args, namedArgs, wantRows };\n}\n", "import { ProtoError, MisuseError } from \"./errors.js\";\nimport { stmtResultFromProto, rowsResultFromProto, rowResultFromProto, valueResultFromProto, errorFromProto, } from \"./result.js\";\nimport { stmtToProto } from \"./stmt.js\";\nimport { impossible } from \"./util.js\";\n/** A builder for creating a batch and executing it on the server. */\nexport class Batch {\n    /** @private */\n    _stream;\n    #useCursor;\n    /** @private */\n    _steps;\n    #executed;\n    /** @private */\n    constructor(stream, useCursor) {\n        this._stream = stream;\n        this.#useCursor = useCursor;\n        this._steps = [];\n        this.#executed = false;\n    }\n    /** Return a builder for adding a step to the batch. */\n    step() {\n        return new BatchStep(this);\n    }\n    /** Execute the batch. */\n    execute() {\n        if (this.#executed) {\n            throw new MisuseError(\"This batch has already been executed\");\n        }\n        this.#executed = true;\n        const batch = {\n            steps: this._steps.map((step) => step.proto),\n        };\n        if (this.#useCursor) {\n            return executeCursor(this._stream, this._steps, batch);\n        }\n        else {\n            return executeRegular(this._stream, this._steps, batch);\n        }\n    }\n}\nfunction executeRegular(stream, steps, batch) {\n    return stream._batch(batch).then((result) => {\n        for (let step = 0; step < steps.length; ++step) {\n            const stepResult = result.stepResults.get(step);\n            const stepError = result.stepErrors.get(step);\n            steps[step].callback(stepResult, stepError);\n        }\n    });\n}\nasync function executeCursor(stream, steps, batch) {\n    const cursor = await stream._openCursor(batch);\n    try {\n        let nextStep = 0;\n        let beginEntry = undefined;\n        let rows = [];\n        for (;;) {\n            const entry = await cursor.next();\n            if (entry === undefined) {\n                break;\n            }\n            if (entry.type === \"step_begin\") {\n                if (entry.step < nextStep || entry.step >= steps.length) {\n                    throw new ProtoError(\"Server produced StepBeginEntry for unexpected step\");\n                }\n                else if (beginEntry !== undefined) {\n                    throw new ProtoError(\"Server produced StepBeginEntry before terminating previous step\");\n                }\n                for (let step = nextStep; step < entry.step; ++step) {\n                    steps[step].callback(undefined, undefined);\n                }\n                nextStep = entry.step + 1;\n                beginEntry = entry;\n                rows = [];\n            }\n            else if (entry.type === \"step_end\") {\n                if (beginEntry === undefined) {\n                    throw new ProtoError(\"Server produced StepEndEntry but no step is active\");\n                }\n                const stmtResult = {\n                    cols: beginEntry.cols,\n                    rows,\n                    affectedRowCount: entry.affectedRowCount,\n                    lastInsertRowid: entry.lastInsertRowid,\n                };\n                steps[beginEntry.step].callback(stmtResult, undefined);\n                beginEntry = undefined;\n                rows = [];\n            }\n            else if (entry.type === \"step_error\") {\n                if (beginEntry === undefined) {\n                    if (entry.step >= steps.length) {\n                        throw new ProtoError(\"Server produced StepErrorEntry for unexpected step\");\n                    }\n                    for (let step = nextStep; step < entry.step; ++step) {\n                        steps[step].callback(undefined, undefined);\n                    }\n                }\n                else {\n                    if (entry.step !== beginEntry.step) {\n                        throw new ProtoError(\"Server produced StepErrorEntry for unexpected step\");\n                    }\n                    beginEntry = undefined;\n                    rows = [];\n                }\n                steps[entry.step].callback(undefined, entry.error);\n                nextStep = entry.step + 1;\n            }\n            else if (entry.type === \"row\") {\n                if (beginEntry === undefined) {\n                    throw new ProtoError(\"Server produced RowEntry but no step is active\");\n                }\n                rows.push(entry.row);\n            }\n            else if (entry.type === \"error\") {\n                throw errorFromProto(entry.error);\n            }\n            else if (entry.type === \"none\") {\n                throw new ProtoError(\"Server produced unrecognized CursorEntry\");\n            }\n            else {\n                throw impossible(entry, \"Impossible CursorEntry\");\n            }\n        }\n        if (beginEntry !== undefined) {\n            throw new ProtoError(\"Server closed Cursor before terminating active step\");\n        }\n        for (let step = nextStep; step < steps.length; ++step) {\n            steps[step].callback(undefined, undefined);\n        }\n    }\n    finally {\n        cursor.close();\n    }\n}\n/** A builder for adding a step to the batch. */\nexport class BatchStep {\n    /** @private */\n    _batch;\n    #conds;\n    /** @private */\n    _index;\n    /** @private */\n    constructor(batch) {\n        this._batch = batch;\n        this.#conds = [];\n        this._index = undefined;\n    }\n    /** Add the condition that needs to be satisfied to execute the statement. If you use this method multiple\n     * times, we join the conditions with a logical AND. */\n    condition(cond) {\n        this.#conds.push(cond._proto);\n        return this;\n    }\n    /** Add a statement that returns rows. */\n    query(stmt) {\n        return this.#add(stmt, true, rowsResultFromProto);\n    }\n    /** Add a statement that returns at most a single row. */\n    queryRow(stmt) {\n        return this.#add(stmt, true, rowResultFromProto);\n    }\n    /** Add a statement that returns at most a single value. */\n    queryValue(stmt) {\n        return this.#add(stmt, true, valueResultFromProto);\n    }\n    /** Add a statement without returning rows. */\n    run(stmt) {\n        return this.#add(stmt, false, stmtResultFromProto);\n    }\n    #add(inStmt, wantRows, fromProto) {\n        if (this._index !== undefined) {\n            throw new MisuseError(\"This BatchStep has already been added to the batch\");\n        }\n        const stmt = stmtToProto(this._batch._stream._sqlOwner(), inStmt, wantRows);\n        let condition;\n        if (this.#conds.length === 0) {\n            condition = undefined;\n        }\n        else if (this.#conds.length === 1) {\n            condition = this.#conds[0];\n        }\n        else {\n            condition = { type: \"and\", conds: this.#conds.slice() };\n        }\n        const proto = { stmt, condition };\n        return new Promise((outputCallback, errorCallback) => {\n            const callback = (stepResult, stepError) => {\n                if (stepResult !== undefined && stepError !== undefined) {\n                    errorCallback(new ProtoError(\"Server returned both result and error\"));\n                }\n                else if (stepError !== undefined) {\n                    errorCallback(errorFromProto(stepError));\n                }\n                else if (stepResult !== undefined) {\n                    outputCallback(fromProto(stepResult, this._batch._stream.intMode));\n                }\n                else {\n                    outputCallback(undefined);\n                }\n            };\n            this._index = this._batch._steps.length;\n            this._batch._steps.push({ proto, callback });\n        });\n    }\n}\nexport class BatchCond {\n    /** @private */\n    _batch;\n    /** @private */\n    _proto;\n    /** @private */\n    constructor(batch, proto) {\n        this._batch = batch;\n        this._proto = proto;\n    }\n    /** Create a condition that evaluates to true when the given step executes successfully.\n     *\n     * If the given step fails error or is skipped because its condition evaluated to false, this\n     * condition evaluates to false.\n     */\n    static ok(step) {\n        return new BatchCond(step._batch, { type: \"ok\", step: stepIndex(step) });\n    }\n    /** Create a condition that evaluates to true when the given step fails.\n     *\n     * If the given step succeeds or is skipped because its condition evaluated to false, this condition\n     * evaluates to false.\n     */\n    static error(step) {\n        return new BatchCond(step._batch, { type: \"error\", step: stepIndex(step) });\n    }\n    /** Create a condition that is a logical negation of another condition.\n     */\n    static not(cond) {\n        return new BatchCond(cond._batch, { type: \"not\", cond: cond._proto });\n    }\n    /** Create a condition that is a logical AND of other conditions.\n     */\n    static and(batch, conds) {\n        for (const cond of conds) {\n            checkCondBatch(batch, cond);\n        }\n        return new BatchCond(batch, { type: \"and\", conds: conds.map(e => e._proto) });\n    }\n    /** Create a condition that is a logical OR of other conditions.\n     */\n    static or(batch, conds) {\n        for (const cond of conds) {\n            checkCondBatch(batch, cond);\n        }\n        return new BatchCond(batch, { type: \"or\", conds: conds.map(e => e._proto) });\n    }\n    /** Create a condition that evaluates to true when the SQL connection is in autocommit mode (not inside an\n     * explicit transaction). This requires protocol version 3 or higher.\n     */\n    static isAutocommit(batch) {\n        batch._stream.client()._ensureVersion(3, \"BatchCond.isAutocommit()\");\n        return new BatchCond(batch, { type: \"is_autocommit\" });\n    }\n}\nfunction stepIndex(step) {\n    if (step._index === undefined) {\n        throw new MisuseError(\"Cannot add a condition referencing a step that has not been added to the batch\");\n    }\n    return step._index;\n}\nfunction checkCondBatch(expectedBatch, cond) {\n    if (cond._batch !== expectedBatch) {\n        throw new MisuseError(\"Cannot mix BatchCond objects for different Batch objects\");\n    }\n}\n", "export function describeResultFromProto(result) {\n    return {\n        paramNames: result.params.map((p) => p.name),\n        columns: result.cols,\n        isExplain: result.isExplain,\n        isReadonly: result.isReadonly,\n    };\n}\n", "import { Batch } from \"./batch.js\";\nimport { describeResultFromProto } from \"./describe.js\";\nimport { stmtResultFromProto, rowsResultFromProto, rowResultFromProto, valueResultFromProto, } from \"./result.js\";\nimport { sqlToProto } from \"./sql.js\";\nimport { stmtToProto } from \"./stmt.js\";\n/** A stream for executing SQL statements (a \"database connection\"). */\nexport class Stream {\n    /** @private */\n    constructor(intMode) {\n        this.intMode = intMode;\n    }\n    /** Execute a statement and return rows. */\n    query(stmt) {\n        return this.#execute(stmt, true, rowsResultFromProto);\n    }\n    /** Execute a statement and return at most a single row. */\n    queryRow(stmt) {\n        return this.#execute(stmt, true, rowResultFromProto);\n    }\n    /** Execute a statement and return at most a single value. */\n    queryValue(stmt) {\n        return this.#execute(stmt, true, valueResultFromProto);\n    }\n    /** Execute a statement without returning rows. */\n    run(stmt) {\n        return this.#execute(stmt, false, stmtResultFromProto);\n    }\n    #execute(inStmt, wantRows, fromProto) {\n        const stmt = stmtToProto(this._sqlOwner(), inStmt, wantRows);\n        return this._execute(stmt).then((r) => fromProto(r, this.intMode));\n    }\n    /** Return a builder for creating and executing a batch.\n     *\n     * If `useCursor` is true, the batch will be executed using a Hrana cursor, which will stream results from\n     * the server to the client, which consumes less memory on the server. This requires protocol version 3 or\n     * higher.\n     */\n    batch(useCursor = false) {\n        return new Batch(this, useCursor);\n    }\n    /** Parse and analyze a statement. This requires protocol version 2 or higher. */\n    describe(inSql) {\n        const protoSql = sqlToProto(this._sqlOwner(), inSql);\n        return this._describe(protoSql).then(describeResultFromProto);\n    }\n    /** Execute a sequence of statements separated by semicolons. This requires protocol version 2 or higher.\n     * */\n    sequence(inSql) {\n        const protoSql = sqlToProto(this._sqlOwner(), inSql);\n        return this._sequence(protoSql);\n    }\n    /** Representation of integers returned from the database. See {@link IntMode}.\n     *\n     * This value affects the results of all operations on this stream.\n     */\n    intMode;\n}\n", "export class Cursor {\n}\n", "import { ClientError, ClosedError } from \"../errors.js\";\nimport { Cursor } from \"../cursor.js\";\nimport { Queue } from \"../queue.js\";\nconst fetchChunkSize = 1000;\nconst fetchQueueSize = 10;\nexport class WsCursor extends Cursor {\n    #client;\n    #stream;\n    #cursorId;\n    #entryQueue;\n    #fetchQueue;\n    #closed;\n    #done;\n    /** @private */\n    constructor(client, stream, cursorId) {\n        super();\n        this.#client = client;\n        this.#stream = stream;\n        this.#cursorId = cursorId;\n        this.#entryQueue = new Queue();\n        this.#fetchQueue = new Queue();\n        this.#closed = undefined;\n        this.#done = false;\n    }\n    /** Fetch the next entry from the cursor. */\n    async next() {\n        for (;;) {\n            if (this.#closed !== undefined) {\n                throw new ClosedError(\"Cursor is closed\", this.#closed);\n            }\n            while (!this.#done && this.#fetchQueue.length < fetchQueueSize) {\n                this.#fetchQueue.push(this.#fetch());\n            }\n            const entry = this.#entryQueue.shift();\n            if (this.#done || entry !== undefined) {\n                return entry;\n            }\n            // we assume that `Cursor.next()` is never called concurrently\n            await this.#fetchQueue.shift().then((response) => {\n                if (response === undefined) {\n                    return;\n                }\n                for (const entry of response.entries) {\n                    this.#entryQueue.push(entry);\n                }\n                this.#done ||= response.done;\n            });\n        }\n    }\n    #fetch() {\n        return this.#stream._sendCursorRequest(this, {\n            type: \"fetch_cursor\",\n            cursorId: this.#cursorId,\n            maxCount: fetchChunkSize,\n        }).then((resp) => resp, (error) => {\n            this._setClosed(error);\n            return undefined;\n        });\n    }\n    /** @private */\n    _setClosed(error) {\n        if (this.#closed !== undefined) {\n            return;\n        }\n        this.#closed = error;\n        this.#stream._sendCursorRequest(this, {\n            type: \"close_cursor\",\n            cursorId: this.#cursorId,\n        }).catch(() => undefined);\n        this.#stream._cursorClosed(this);\n    }\n    /** Close the cursor. */\n    close() {\n        this._setClosed(new ClientError(\"Cursor was manually closed\"));\n    }\n    /** True if the cursor is closed. */\n    get closed() {\n        return this.#closed !== undefined;\n    }\n}\n", "import { ClientError, ClosedError, InternalError } from \"../errors.js\";\nimport { Queue } from \"../queue.js\";\nimport { Stream } from \"../stream.js\";\nimport { WsCursor } from \"./cursor.js\";\nexport class WsStream extends Stream {\n    #client;\n    #streamId;\n    #queue;\n    #cursor;\n    #closing;\n    #closed;\n    /** @private */\n    static open(client) {\n        const streamId = client._streamIdAlloc.alloc();\n        const stream = new WsStream(client, streamId);\n        const responseCallback = () => undefined;\n        const errorCallback = (e) => stream.#setClosed(e);\n        const request = { type: \"open_stream\", streamId };\n        client._sendRequest(request, { responseCallback, errorCallback });\n        return stream;\n    }\n    /** @private */\n    constructor(client, streamId) {\n        super(client.intMode);\n        this.#client = client;\n        this.#streamId = streamId;\n        this.#queue = new Queue();\n        this.#cursor = undefined;\n        this.#closing = false;\n        this.#closed = undefined;\n    }\n    /** Get the {@link WsClient} object that this stream belongs to. */\n    client() {\n        return this.#client;\n    }\n    /** @private */\n    _sqlOwner() {\n        return this.#client;\n    }\n    /** @private */\n    _execute(stmt) {\n        return this.#sendStreamRequest({\n            type: \"execute\",\n            streamId: this.#streamId,\n            stmt,\n        }).then((response) => {\n            return response.result;\n        });\n    }\n    /** @private */\n    _batch(batch) {\n        return this.#sendStreamRequest({\n            type: \"batch\",\n            streamId: this.#streamId,\n            batch,\n        }).then((response) => {\n            return response.result;\n        });\n    }\n    /** @private */\n    _describe(protoSql) {\n        this.#client._ensureVersion(2, \"describe()\");\n        return this.#sendStreamRequest({\n            type: \"describe\",\n            streamId: this.#streamId,\n            sql: protoSql.sql,\n            sqlId: protoSql.sqlId,\n        }).then((response) => {\n            return response.result;\n        });\n    }\n    /** @private */\n    _sequence(protoSql) {\n        this.#client._ensureVersion(2, \"sequence()\");\n        return this.#sendStreamRequest({\n            type: \"sequence\",\n            streamId: this.#streamId,\n            sql: protoSql.sql,\n            sqlId: protoSql.sqlId,\n        }).then((_response) => {\n            return undefined;\n        });\n    }\n    /** Check whether the SQL connection underlying this stream is in autocommit state (i.e., outside of an\n     * explicit transaction). This requires protocol version 3 or higher.\n     */\n    getAutocommit() {\n        this.#client._ensureVersion(3, \"getAutocommit()\");\n        return this.#sendStreamRequest({\n            type: \"get_autocommit\",\n            streamId: this.#streamId,\n        }).then((response) => {\n            return response.isAutocommit;\n        });\n    }\n    #sendStreamRequest(request) {\n        return new Promise((responseCallback, errorCallback) => {\n            this.#pushToQueue({ type: \"request\", request, responseCallback, errorCallback });\n        });\n    }\n    /** @private */\n    _openCursor(batch) {\n        this.#client._ensureVersion(3, \"cursor\");\n        return new Promise((cursorCallback, errorCallback) => {\n            this.#pushToQueue({ type: \"cursor\", batch, cursorCallback, errorCallback });\n        });\n    }\n    /** @private */\n    _sendCursorRequest(cursor, request) {\n        if (cursor !== this.#cursor) {\n            throw new InternalError(\"Cursor not associated with the stream attempted to execute a request\");\n        }\n        return new Promise((responseCallback, errorCallback) => {\n            if (this.#closed !== undefined) {\n                errorCallback(new ClosedError(\"Stream is closed\", this.#closed));\n            }\n            else {\n                this.#client._sendRequest(request, { responseCallback, errorCallback });\n            }\n        });\n    }\n    /** @private */\n    _cursorClosed(cursor) {\n        if (cursor !== this.#cursor) {\n            throw new InternalError(\"Cursor was closed, but it was not associated with the stream\");\n        }\n        this.#cursor = undefined;\n        this.#flushQueue();\n    }\n    #pushToQueue(entry) {\n        if (this.#closed !== undefined) {\n            entry.errorCallback(new ClosedError(\"Stream is closed\", this.#closed));\n        }\n        else if (this.#closing) {\n            entry.errorCallback(new ClosedError(\"Stream is closing\", undefined));\n        }\n        else {\n            this.#queue.push(entry);\n            this.#flushQueue();\n        }\n    }\n    #flushQueue() {\n        for (;;) {\n            const entry = this.#queue.first();\n            if (entry === undefined && this.#cursor === undefined && this.#closing) {\n                this.#setClosed(new ClientError(\"Stream was gracefully closed\"));\n                break;\n            }\n            else if (entry?.type === \"request\" && this.#cursor === undefined) {\n                const { request, responseCallback, errorCallback } = entry;\n                this.#queue.shift();\n                this.#client._sendRequest(request, { responseCallback, errorCallback });\n            }\n            else if (entry?.type === \"cursor\" && this.#cursor === undefined) {\n                const { batch, cursorCallback } = entry;\n                this.#queue.shift();\n                const cursorId = this.#client._cursorIdAlloc.alloc();\n                const cursor = new WsCursor(this.#client, this, cursorId);\n                const request = {\n                    type: \"open_cursor\",\n                    streamId: this.#streamId,\n                    cursorId,\n                    batch,\n                };\n                const responseCallback = () => undefined;\n                const errorCallback = (e) => cursor._setClosed(e);\n                this.#client._sendRequest(request, { responseCallback, errorCallback });\n                this.#cursor = cursor;\n                cursorCallback(cursor);\n            }\n            else {\n                break;\n            }\n        }\n    }\n    #setClosed(error) {\n        if (this.#closed !== undefined) {\n            return;\n        }\n        this.#closed = error;\n        if (this.#cursor !== undefined) {\n            this.#cursor._setClosed(error);\n        }\n        for (;;) {\n            const entry = this.#queue.shift();\n            if (entry !== undefined) {\n                entry.errorCallback(error);\n            }\n            else {\n                break;\n            }\n        }\n        const request = { type: \"close_stream\", streamId: this.#streamId };\n        const responseCallback = () => this.#client._streamIdAlloc.free(this.#streamId);\n        const errorCallback = () => undefined;\n        this.#client._sendRequest(request, { responseCallback, errorCallback });\n    }\n    /** Immediately close the stream. */\n    close() {\n        this.#setClosed(new ClientError(\"Stream was manually closed\"));\n    }\n    /** Gracefully close the stream. */\n    closeGracefully() {\n        this.#closing = true;\n        this.#flushQueue();\n    }\n    /** True if the stream is closed or closing. */\n    get closed() {\n        return this.#closed !== undefined || this.#closing;\n    }\n}\n", "import { Base64 } from \"js-base64\";\nimport { impossible } from \"../util.js\";\nexport function Stmt(w, msg) {\n    if (msg.sql !== undefined) {\n        w.string(\"sql\", msg.sql);\n    }\n    if (msg.sqlId !== undefined) {\n        w.number(\"sql_id\", msg.sqlId);\n    }\n    w.arrayObjects(\"args\", msg.args, Value);\n    w.arrayObjects(\"named_args\", msg.namedArgs, NamedArg);\n    w.boolean(\"want_rows\", msg.wantRows);\n}\nfunction NamedArg(w, msg) {\n    w.string(\"name\", msg.name);\n    w.object(\"value\", msg.value, Value);\n}\nexport function Batch(w, msg) {\n    w.arrayObjects(\"steps\", msg.steps, BatchStep);\n}\nfunction BatchStep(w, msg) {\n    if (msg.condition !== undefined) {\n        w.object(\"condition\", msg.condition, BatchCond);\n    }\n    w.object(\"stmt\", msg.stmt, Stmt);\n}\nfunction BatchCond(w, msg) {\n    w.stringRaw(\"type\", msg.type);\n    if (msg.type === \"ok\" || msg.type === \"error\") {\n        w.number(\"step\", msg.step);\n    }\n    else if (msg.type === \"not\") {\n        w.object(\"cond\", msg.cond, BatchCond);\n    }\n    else if (msg.type === \"and\" || msg.type === \"or\") {\n        w.arrayObjects(\"conds\", msg.conds, BatchCond);\n    }\n    else if (msg.type === \"is_autocommit\") {\n        // do nothing\n    }\n    else {\n        throw impossible(msg, \"Impossible type of BatchCond\");\n    }\n}\nfunction Value(w, msg) {\n    if (msg === null) {\n        w.stringRaw(\"type\", \"null\");\n    }\n    else if (typeof msg === \"bigint\") {\n        w.stringRaw(\"type\", \"integer\");\n        w.stringRaw(\"value\", \"\" + msg);\n    }\n    else if (typeof msg === \"number\") {\n        w.stringRaw(\"type\", \"float\");\n        w.number(\"value\", msg);\n    }\n    else if (typeof msg === \"string\") {\n        w.stringRaw(\"type\", \"text\");\n        w.string(\"value\", msg);\n    }\n    else if (msg instanceof Uint8Array) {\n        w.stringRaw(\"type\", \"blob\");\n        w.stringRaw(\"base64\", Base64.fromUint8Array(msg));\n    }\n    else if (msg === undefined) {\n        // do nothing\n    }\n    else {\n        throw impossible(msg, \"Impossible type of Value\");\n    }\n}\n", "import { Stmt, Batch } from \"../shared/json_encode.js\";\nimport { impossible } from \"../util.js\";\nexport function ClientMsg(w, msg) {\n    w.stringRaw(\"type\", msg.type);\n    if (msg.type === \"hello\") {\n        if (msg.jwt !== undefined) {\n            w.string(\"jwt\", msg.jwt);\n        }\n    }\n    else if (msg.type === \"request\") {\n        w.number(\"request_id\", msg.requestId);\n        w.object(\"request\", msg.request, Request);\n    }\n    else {\n        throw impossible(msg, \"Impossible type of ClientMsg\");\n    }\n}\nfunction Request(w, msg) {\n    w.stringRaw(\"type\", msg.type);\n    if (msg.type === \"open_stream\") {\n        w.number(\"stream_id\", msg.streamId);\n    }\n    else if (msg.type === \"close_stream\") {\n        w.number(\"stream_id\", msg.streamId);\n    }\n    else if (msg.type === \"execute\") {\n        w.number(\"stream_id\", msg.streamId);\n        w.object(\"stmt\", msg.stmt, Stmt);\n    }\n    else if (msg.type === \"batch\") {\n        w.number(\"stream_id\", msg.streamId);\n        w.object(\"batch\", msg.batch, Batch);\n    }\n    else if (msg.type === \"open_cursor\") {\n        w.number(\"stream_id\", msg.streamId);\n        w.number(\"cursor_id\", msg.cursorId);\n        w.object(\"batch\", msg.batch, Batch);\n    }\n    else if (msg.type === \"close_cursor\") {\n        w.number(\"cursor_id\", msg.cursorId);\n    }\n    else if (msg.type === \"fetch_cursor\") {\n        w.number(\"cursor_id\", msg.cursorId);\n        w.number(\"max_count\", msg.maxCount);\n    }\n    else if (msg.type === \"sequence\") {\n        w.number(\"stream_id\", msg.streamId);\n        if (msg.sql !== undefined) {\n            w.string(\"sql\", msg.sql);\n        }\n        if (msg.sqlId !== undefined) {\n            w.number(\"sql_id\", msg.sqlId);\n        }\n    }\n    else if (msg.type === \"describe\") {\n        w.number(\"stream_id\", msg.streamId);\n        if (msg.sql !== undefined) {\n            w.string(\"sql\", msg.sql);\n        }\n        if (msg.sqlId !== undefined) {\n            w.number(\"sql_id\", msg.sqlId);\n        }\n    }\n    else if (msg.type === \"store_sql\") {\n        w.number(\"sql_id\", msg.sqlId);\n        w.string(\"sql\", msg.sql);\n    }\n    else if (msg.type === \"close_sql\") {\n        w.number(\"sql_id\", msg.sqlId);\n    }\n    else if (msg.type === \"get_autocommit\") {\n        w.number(\"stream_id\", msg.streamId);\n    }\n    else {\n        throw impossible(msg, \"Impossible type of Request\");\n    }\n}\n", "import { impossible } from \"../util.js\";\nexport function Stmt(w, msg) {\n    if (msg.sql !== undefined) {\n        w.string(1, msg.sql);\n    }\n    if (msg.sqlId !== undefined) {\n        w.int32(2, msg.sqlId);\n    }\n    for (const arg of msg.args) {\n        w.message(3, arg, Value);\n    }\n    for (const arg of msg.namedArgs) {\n        w.message(4, arg, NamedArg);\n    }\n    w.bool(5, msg.wantRows);\n}\nfunction NamedArg(w, msg) {\n    w.string(1, msg.name);\n    w.message(2, msg.value, Value);\n}\nexport function Batch(w, msg) {\n    for (const step of msg.steps) {\n        w.message(1, step, BatchStep);\n    }\n}\nfunction BatchStep(w, msg) {\n    if (msg.condition !== undefined) {\n        w.message(1, msg.condition, BatchCond);\n    }\n    w.message(2, msg.stmt, Stmt);\n}\nfunction BatchCond(w, msg) {\n    if (msg.type === \"ok\") {\n        w.uint32(1, msg.step);\n    }\n    else if (msg.type === \"error\") {\n        w.uint32(2, msg.step);\n    }\n    else if (msg.type === \"not\") {\n        w.message(3, msg.cond, BatchCond);\n    }\n    else if (msg.type === \"and\") {\n        w.message(4, msg.conds, BatchCondList);\n    }\n    else if (msg.type === \"or\") {\n        w.message(5, msg.conds, BatchCondList);\n    }\n    else if (msg.type === \"is_autocommit\") {\n        w.message(6, undefined, Empty);\n    }\n    else {\n        throw impossible(msg, \"Impossible type of BatchCond\");\n    }\n}\nfunction BatchCondList(w, msg) {\n    for (const cond of msg) {\n        w.message(1, cond, BatchCond);\n    }\n}\nfunction Value(w, msg) {\n    if (msg === null) {\n        w.message(1, undefined, Empty);\n    }\n    else if (typeof msg === \"bigint\") {\n        w.sint64(2, msg);\n    }\n    else if (typeof msg === \"number\") {\n        w.double(3, msg);\n    }\n    else if (typeof msg === \"string\") {\n        w.string(4, msg);\n    }\n    else if (msg instanceof Uint8Array) {\n        w.bytes(5, msg);\n    }\n    else if (msg === undefined) {\n        // do nothing\n    }\n    else {\n        throw impossible(msg, \"Impossible type of Value\");\n    }\n}\nfunction Empty(_w, _msg) {\n    // do nothing\n}\n", "import { Stmt, Batch } from \"../shared/protobuf_encode.js\";\nimport { impossible } from \"../util.js\";\nexport function ClientMsg(w, msg) {\n    if (msg.type === \"hello\") {\n        w.message(1, msg, HelloMsg);\n    }\n    else if (msg.type === \"request\") {\n        w.message(2, msg, RequestMsg);\n    }\n    else {\n        throw impossible(msg, \"Impossible type of ClientMsg\");\n    }\n}\nfunction HelloMsg(w, msg) {\n    if (msg.jwt !== undefined) {\n        w.string(1, msg.jwt);\n    }\n}\nfunction RequestMsg(w, msg) {\n    w.int32(1, msg.requestId);\n    const request = msg.request;\n    if (request.type === \"open_stream\") {\n        w.message(2, request, OpenStreamReq);\n    }\n    else if (request.type === \"close_stream\") {\n        w.message(3, request, CloseStreamReq);\n    }\n    else if (request.type === \"execute\") {\n        w.message(4, request, ExecuteReq);\n    }\n    else if (request.type === \"batch\") {\n        w.message(5, request, BatchReq);\n    }\n    else if (request.type === \"open_cursor\") {\n        w.message(6, request, OpenCursorReq);\n    }\n    else if (request.type === \"close_cursor\") {\n        w.message(7, request, CloseCursorReq);\n    }\n    else if (request.type === \"fetch_cursor\") {\n        w.message(8, request, FetchCursorReq);\n    }\n    else if (request.type === \"sequence\") {\n        w.message(9, request, SequenceReq);\n    }\n    else if (request.type === \"describe\") {\n        w.message(10, request, DescribeReq);\n    }\n    else if (request.type === \"store_sql\") {\n        w.message(11, request, StoreSqlReq);\n    }\n    else if (request.type === \"close_sql\") {\n        w.message(12, request, CloseSqlReq);\n    }\n    else if (request.type === \"get_autocommit\") {\n        w.message(13, request, GetAutocommitReq);\n    }\n    else {\n        throw impossible(request, \"Impossible type of Request\");\n    }\n}\nfunction OpenStreamReq(w, msg) {\n    w.int32(1, msg.streamId);\n}\nfunction CloseStreamReq(w, msg) {\n    w.int32(1, msg.streamId);\n}\nfunction ExecuteReq(w, msg) {\n    w.int32(1, msg.streamId);\n    w.message(2, msg.stmt, Stmt);\n}\nfunction BatchReq(w, msg) {\n    w.int32(1, msg.streamId);\n    w.message(2, msg.batch, Batch);\n}\nfunction OpenCursorReq(w, msg) {\n    w.int32(1, msg.streamId);\n    w.int32(2, msg.cursorId);\n    w.message(3, msg.batch, Batch);\n}\nfunction CloseCursorReq(w, msg) {\n    w.int32(1, msg.cursorId);\n}\nfunction FetchCursorReq(w, msg) {\n    w.int32(1, msg.cursorId);\n    w.uint32(2, msg.maxCount);\n}\nfunction SequenceReq(w, msg) {\n    w.int32(1, msg.streamId);\n    if (msg.sql !== undefined) {\n        w.string(2, msg.sql);\n    }\n    if (msg.sqlId !== undefined) {\n        w.int32(3, msg.sqlId);\n    }\n}\nfunction DescribeReq(w, msg) {\n    w.int32(1, msg.streamId);\n    if (msg.sql !== undefined) {\n        w.string(2, msg.sql);\n    }\n    if (msg.sqlId !== undefined) {\n        w.int32(3, msg.sqlId);\n    }\n}\nfunction StoreSqlReq(w, msg) {\n    w.int32(1, msg.sqlId);\n    w.string(2, msg.sql);\n}\nfunction CloseSqlReq(w, msg) {\n    w.int32(1, msg.sqlId);\n}\nfunction GetAutocommitReq(w, msg) {\n    w.int32(1, msg.streamId);\n}\n", "import { Base64 } from \"js-base64\";\nimport { ProtoError } from \"../errors.js\";\nimport * as d from \"../encoding/json/decode.js\";\nexport function Error(obj) {\n    const message = d.string(obj[\"message\"]);\n    const code = d.stringOpt(obj[\"code\"]);\n    return { message, code };\n}\nexport function StmtResult(obj) {\n    const cols = d.arrayObjectsMap(obj[\"cols\"], Col);\n    const rows = d.array(obj[\"rows\"]).map((rowObj) => d.arrayObjectsMap(rowObj, Value));\n    const affectedRowCount = d.number(obj[\"affected_row_count\"]);\n    const lastInsertRowidStr = d.stringOpt(obj[\"last_insert_rowid\"]);\n    const lastInsertRowid = lastInsertRowidStr !== undefined\n        ? BigInt(lastInsertRowidStr) : undefined;\n    return { cols, rows, affectedRowCount, lastInsertRowid };\n}\nfunction Col(obj) {\n    const name = d.stringOpt(obj[\"name\"]);\n    const decltype = d.stringOpt(obj[\"decltype\"]);\n    return { name, decltype };\n}\nexport function BatchResult(obj) {\n    const stepResults = new Map();\n    d.array(obj[\"step_results\"]).forEach((value, i) => {\n        if (value !== null) {\n            stepResults.set(i, StmtResult(d.object(value)));\n        }\n    });\n    const stepErrors = new Map();\n    d.array(obj[\"step_errors\"]).forEach((value, i) => {\n        if (value !== null) {\n            stepErrors.set(i, Error(d.object(value)));\n        }\n    });\n    return { stepResults, stepErrors };\n}\nexport function CursorEntry(obj) {\n    const type = d.string(obj[\"type\"]);\n    if (type === \"step_begin\") {\n        const step = d.number(obj[\"step\"]);\n        const cols = d.arrayObjectsMap(obj[\"cols\"], Col);\n        return { type: \"step_begin\", step, cols };\n    }\n    else if (type === \"step_end\") {\n        const affectedRowCount = d.number(obj[\"affected_row_count\"]);\n        const lastInsertRowidStr = d.stringOpt(obj[\"last_insert_rowid\"]);\n        const lastInsertRowid = lastInsertRowidStr !== undefined\n            ? BigInt(lastInsertRowidStr) : undefined;\n        return { type: \"step_end\", affectedRowCount, lastInsertRowid };\n    }\n    else if (type === \"step_error\") {\n        const step = d.number(obj[\"step\"]);\n        const error = Error(d.object(obj[\"error\"]));\n        return { type: \"step_error\", step, error };\n    }\n    else if (type === \"row\") {\n        const row = d.arrayObjectsMap(obj[\"row\"], Value);\n        return { type: \"row\", row };\n    }\n    else if (type === \"error\") {\n        const error = Error(d.object(obj[\"error\"]));\n        return { type: \"error\", error };\n    }\n    else {\n        throw new ProtoError(\"Unexpected type of CursorEntry\");\n    }\n}\nexport function DescribeResult(obj) {\n    const params = d.arrayObjectsMap(obj[\"params\"], DescribeParam);\n    const cols = d.arrayObjectsMap(obj[\"cols\"], DescribeCol);\n    const isExplain = d.boolean(obj[\"is_explain\"]);\n    const isReadonly = d.boolean(obj[\"is_readonly\"]);\n    return { params, cols, isExplain, isReadonly };\n}\nfunction DescribeParam(obj) {\n    const name = d.stringOpt(obj[\"name\"]);\n    return { name };\n}\nfunction DescribeCol(obj) {\n    const name = d.string(obj[\"name\"]);\n    const decltype = d.stringOpt(obj[\"decltype\"]);\n    return { name, decltype };\n}\nexport function Value(obj) {\n    const type = d.string(obj[\"type\"]);\n    if (type === \"null\") {\n        return null;\n    }\n    else if (type === \"integer\") {\n        const value = d.string(obj[\"value\"]);\n        return BigInt(value);\n    }\n    else if (type === \"float\") {\n        return d.number(obj[\"value\"]);\n    }\n    else if (type === \"text\") {\n        return d.string(obj[\"value\"]);\n    }\n    else if (type === \"blob\") {\n        return Base64.toUint8Array(d.string(obj[\"base64\"]));\n    }\n    else {\n        throw new ProtoError(\"Unexpected type of Value\");\n    }\n}\n", "import { ProtoError } from \"../errors.js\";\nimport * as d from \"../encoding/json/decode.js\";\nimport { Error, StmtResult, BatchResult, CursorEntry, DescribeResult } from \"../shared/json_decode.js\";\nexport function ServerMsg(obj) {\n    const type = d.string(obj[\"type\"]);\n    if (type === \"hello_ok\") {\n        return { type: \"hello_ok\" };\n    }\n    else if (type === \"hello_error\") {\n        const error = Error(d.object(obj[\"error\"]));\n        return { type: \"hello_error\", error };\n    }\n    else if (type === \"response_ok\") {\n        const requestId = d.number(obj[\"request_id\"]);\n        const response = Response(d.object(obj[\"response\"]));\n        return { type: \"response_ok\", requestId, response };\n    }\n    else if (type === \"response_error\") {\n        const requestId = d.number(obj[\"request_id\"]);\n        const error = Error(d.object(obj[\"error\"]));\n        return { type: \"response_error\", requestId, error };\n    }\n    else {\n        throw new ProtoError(\"Unexpected type of ServerMsg\");\n    }\n}\nfunction Response(obj) {\n    const type = d.string(obj[\"type\"]);\n    if (type === \"open_stream\") {\n        return { type: \"open_stream\" };\n    }\n    else if (type === \"close_stream\") {\n        return { type: \"close_stream\" };\n    }\n    else if (type === \"execute\") {\n        const result = StmtResult(d.object(obj[\"result\"]));\n        return { type: \"execute\", result };\n    }\n    else if (type === \"batch\") {\n        const result = BatchResult(d.object(obj[\"result\"]));\n        return { type: \"batch\", result };\n    }\n    else if (type === \"open_cursor\") {\n        return { type: \"open_cursor\" };\n    }\n    else if (type === \"close_cursor\") {\n        return { type: \"close_cursor\" };\n    }\n    else if (type === \"fetch_cursor\") {\n        const entries = d.arrayObjectsMap(obj[\"entries\"], CursorEntry);\n        const done = d.boolean(obj[\"done\"]);\n        return { type: \"fetch_cursor\", entries, done };\n    }\n    else if (type === \"sequence\") {\n        return { type: \"sequence\" };\n    }\n    else if (type === \"describe\") {\n        const result = DescribeResult(d.object(obj[\"result\"]));\n        return { type: \"describe\", result };\n    }\n    else if (type === \"store_sql\") {\n        return { type: \"store_sql\" };\n    }\n    else if (type === \"close_sql\") {\n        return { type: \"close_sql\" };\n    }\n    else if (type === \"get_autocommit\") {\n        const isAutocommit = d.boolean(obj[\"is_autocommit\"]);\n        return { type: \"get_autocommit\", isAutocommit };\n    }\n    else {\n        throw new ProtoError(\"Unexpected type of Response\");\n    }\n}\n", "export const Error = {\n    default() { return { message: \"\", code: undefined }; },\n    1(r, msg) { msg.message = r.string(); },\n    2(r, msg) { msg.code = r.string(); },\n};\nexport const StmtResult = {\n    default() {\n        return {\n            cols: [],\n            rows: [],\n            affectedRowCount: 0,\n            lastInsertRowid: undefined,\n        };\n    },\n    1(r, msg) { msg.cols.push(r.message(Col)); },\n    2(r, msg) { msg.rows.push(r.message(Row)); },\n    3(r, msg) { msg.affectedRowCount = Number(r.uint64()); },\n    4(r, msg) { msg.lastInsertRowid = r.sint64(); },\n};\nconst Col = {\n    default() { return { name: undefined, decltype: undefined }; },\n    1(r, msg) { msg.name = r.string(); },\n    2(r, msg) { msg.decltype = r.string(); },\n};\nconst Row = {\n    default() { return []; },\n    1(r, msg) { msg.push(r.message(Value)); },\n};\nexport const BatchResult = {\n    default() { return { stepResults: new Map(), stepErrors: new Map() }; },\n    1(r, msg) {\n        const [key, value] = r.message(BatchResultStepResult);\n        msg.stepResults.set(key, value);\n    },\n    2(r, msg) {\n        const [key, value] = r.message(BatchResultStepError);\n        msg.stepErrors.set(key, value);\n    },\n};\nconst BatchResultStepResult = {\n    default() { return [0, StmtResult.default()]; },\n    1(r, msg) { msg[0] = r.uint32(); },\n    2(r, msg) { msg[1] = r.message(StmtResult); },\n};\nconst BatchResultStepError = {\n    default() { return [0, Error.default()]; },\n    1(r, msg) { msg[0] = r.uint32(); },\n    2(r, msg) { msg[1] = r.message(Error); },\n};\nexport const CursorEntry = {\n    default() { return { type: \"none\" }; },\n    1(r) { return r.message(StepBeginEntry); },\n    2(r) { return r.message(StepEndEntry); },\n    3(r) { return r.message(StepErrorEntry); },\n    4(r) { return { type: \"row\", row: r.message(Row) }; },\n    5(r) { return { type: \"error\", error: r.message(Error) }; },\n};\nconst StepBeginEntry = {\n    default() { return { type: \"step_begin\", step: 0, cols: [] }; },\n    1(r, msg) { msg.step = r.uint32(); },\n    2(r, msg) { msg.cols.push(r.message(Col)); },\n};\nconst StepEndEntry = {\n    default() {\n        return {\n            type: \"step_end\",\n            affectedRowCount: 0,\n            lastInsertRowid: undefined,\n        };\n    },\n    1(r, msg) { msg.affectedRowCount = r.uint32(); },\n    2(r, msg) { msg.lastInsertRowid = r.uint64(); },\n};\nconst StepErrorEntry = {\n    default() {\n        return {\n            type: \"step_error\",\n            step: 0,\n            error: Error.default(),\n        };\n    },\n    1(r, msg) { msg.step = r.uint32(); },\n    2(r, msg) { msg.error = r.message(Error); },\n};\nexport const DescribeResult = {\n    default() {\n        return {\n            params: [],\n            cols: [],\n            isExplain: false,\n            isReadonly: false,\n        };\n    },\n    1(r, msg) { msg.params.push(r.message(DescribeParam)); },\n    2(r, msg) { msg.cols.push(r.message(DescribeCol)); },\n    3(r, msg) { msg.isExplain = r.bool(); },\n    4(r, msg) { msg.isReadonly = r.bool(); },\n};\nconst DescribeParam = {\n    default() { return { name: undefined }; },\n    1(r, msg) { msg.name = r.string(); },\n};\nconst DescribeCol = {\n    default() { return { name: \"\", decltype: undefined }; },\n    1(r, msg) { msg.name = r.string(); },\n    2(r, msg) { msg.decltype = r.string(); },\n};\nconst Value = {\n    default() { return undefined; },\n    1(r) { return null; },\n    2(r) { return r.sint64(); },\n    3(r) { return r.double(); },\n    4(r) { return r.string(); },\n    5(r) { return r.bytes(); },\n};\n", "import { Error, StmtResult, BatchResult, CursorEntry, DescribeResult } from \"../shared/protobuf_decode.js\";\nexport const ServerMsg = {\n    default() { return { type: \"none\" }; },\n    1(r) { return { type: \"hello_ok\" }; },\n    2(r) { return r.message(HelloErrorMsg); },\n    3(r) { return r.message(ResponseOkMsg); },\n    4(r) { return r.message(ResponseErrorMsg); },\n};\nconst HelloErrorMsg = {\n    default() { return { type: \"hello_error\", error: Error.default() }; },\n    1(r, msg) { msg.error = r.message(Error); },\n};\nconst ResponseErrorMsg = {\n    default() { return { type: \"response_error\", requestId: 0, error: Error.default() }; },\n    1(r, msg) { msg.requestId = r.int32(); },\n    2(r, msg) { msg.error = r.message(Error); },\n};\nconst ResponseOkMsg = {\n    default() {\n        return {\n            type: \"response_ok\",\n            requestId: 0,\n            response: { type: \"none\" },\n        };\n    },\n    1(r, msg) { msg.requestId = r.int32(); },\n    2(r, msg) { msg.response = { type: \"open_stream\" }; },\n    3(r, msg) { msg.response = { type: \"close_stream\" }; },\n    4(r, msg) { msg.response = r.message(ExecuteResp); },\n    5(r, msg) { msg.response = r.message(BatchResp); },\n    6(r, msg) { msg.response = { type: \"open_cursor\" }; },\n    7(r, msg) { msg.response = { type: \"close_cursor\" }; },\n    8(r, msg) { msg.response = r.message(FetchCursorResp); },\n    9(r, msg) { msg.response = { type: \"sequence\" }; },\n    10(r, msg) { msg.response = r.message(DescribeResp); },\n    11(r, msg) { msg.response = { type: \"store_sql\" }; },\n    12(r, msg) { msg.response = { type: \"close_sql\" }; },\n    13(r, msg) { msg.response = r.message(GetAutocommitResp); },\n};\nconst ExecuteResp = {\n    default() { return { type: \"execute\", result: StmtResult.default() }; },\n    1(r, msg) { msg.result = r.message(StmtResult); },\n};\nconst BatchResp = {\n    default() { return { type: \"batch\", result: BatchResult.default() }; },\n    1(r, msg) { msg.result = r.message(BatchResult); },\n};\nconst FetchCursorResp = {\n    default() { return { type: \"fetch_cursor\", entries: [], done: false }; },\n    1(r, msg) { msg.entries.push(r.message(CursorEntry)); },\n    2(r, msg) { msg.done = r.bool(); },\n};\nconst DescribeResp = {\n    default() { return { type: \"describe\", result: DescribeResult.default() }; },\n    1(r, msg) { msg.result = r.message(DescribeResult); },\n};\nconst GetAutocommitResp = {\n    default() { return { type: \"get_autocommit\", isAutocommit: false }; },\n    1(r, msg) { msg.isAutocommit = r.bool(); },\n};\n", "import { Client } from \"../client.js\";\nimport { readJsonObject, writeJsonObject, readProtobufMessage, writeProtobufMessage, } from \"../encoding/index.js\";\nimport { ClientError, ProtoError, ClosedError, WebSocketError, ProtocolVersionError, InternalError, } from \"../errors.js\";\nimport { IdAlloc } from \"../id_alloc.js\";\nimport { errorFromProto } from \"../result.js\";\nimport { Sql } from \"../sql.js\";\nimport { impossible } from \"../util.js\";\nimport { WsStream } from \"./stream.js\";\nimport { ClientMsg as json_ClientMsg } from \"./json_encode.js\";\nimport { ClientMsg as protobuf_ClientMsg } from \"./protobuf_encode.js\";\nimport { ServerMsg as json_ServerMsg } from \"./json_decode.js\";\nimport { ServerMsg as protobuf_ServerMsg } from \"./protobuf_decode.js\";\nexport const subprotocolsV2 = new Map([\n    [\"hrana2\", { version: 2, encoding: \"json\" }],\n    [\"hrana1\", { version: 1, encoding: \"json\" }],\n]);\nexport const subprotocolsV3 = new Map([\n    [\"hrana3-protobuf\", { version: 3, encoding: \"protobuf\" }],\n    [\"hrana3\", { version: 3, encoding: \"json\" }],\n    [\"hrana2\", { version: 2, encoding: \"json\" }],\n    [\"hrana1\", { version: 1, encoding: \"json\" }],\n]);\n/** A client for the Hrana protocol over a WebSocket. */\nexport class WsClient extends Client {\n    #socket;\n    // List of callbacks that we queue until the socket transitions from the CONNECTING to the OPEN state.\n    #openCallbacks;\n    // Have we already transitioned from CONNECTING to OPEN and fired the callbacks in #openCallbacks?\n    #opened;\n    // Stores the error that caused us to close the client (and the socket). If we are not closed, this is\n    // `undefined`.\n    #closed;\n    // Have we received a response to our \"hello\" from the server?\n    #recvdHello;\n    // Subprotocol negotiated with the server. It is only available after the socket transitions to the OPEN\n    // state.\n    #subprotocol;\n    // Has the `getVersion()` function been called? This is only used to validate that the API is used\n    // correctly.\n    #getVersionCalled;\n    // A map from request id to the responses that we expect to receive from the server.\n    #responseMap;\n    // An allocator of request ids.\n    #requestIdAlloc;\n    // An allocator of stream ids.\n    /** @private */\n    _streamIdAlloc;\n    // An allocator of cursor ids.\n    /** @private */\n    _cursorIdAlloc;\n    // An allocator of SQL text ids.\n    #sqlIdAlloc;\n    /** @private */\n    constructor(socket, jwt) {\n        super();\n        this.#socket = socket;\n        this.#openCallbacks = [];\n        this.#opened = false;\n        this.#closed = undefined;\n        this.#recvdHello = false;\n        this.#subprotocol = undefined;\n        this.#getVersionCalled = false;\n        this.#responseMap = new Map();\n        this.#requestIdAlloc = new IdAlloc();\n        this._streamIdAlloc = new IdAlloc();\n        this._cursorIdAlloc = new IdAlloc();\n        this.#sqlIdAlloc = new IdAlloc();\n        this.#socket.binaryType = \"arraybuffer\";\n        this.#socket.addEventListener(\"open\", () => this.#onSocketOpen());\n        this.#socket.addEventListener(\"close\", (event) => this.#onSocketClose(event));\n        this.#socket.addEventListener(\"error\", (event) => this.#onSocketError(event));\n        this.#socket.addEventListener(\"message\", (event) => this.#onSocketMessage(event));\n        this.#send({ type: \"hello\", jwt });\n    }\n    // Send (or enqueue to send) a message to the server.\n    #send(msg) {\n        if (this.#closed !== undefined) {\n            throw new InternalError(\"Trying to send a message on a closed client\");\n        }\n        if (this.#opened) {\n            this.#sendToSocket(msg);\n        }\n        else {\n            const openCallback = () => this.#sendToSocket(msg);\n            const errorCallback = () => undefined;\n            this.#openCallbacks.push({ openCallback, errorCallback });\n        }\n    }\n    // The socket transitioned from CONNECTING to OPEN\n    #onSocketOpen() {\n        const protocol = this.#socket.protocol;\n        if (protocol === undefined) {\n            this.#setClosed(new ClientError(\"The `WebSocket.protocol` property is undefined. This most likely means that the WebSocket \" +\n                \"implementation provided by the environment is broken. If you are using Miniflare 2, \" +\n                \"please update to Miniflare 3, which fixes this problem.\"));\n            return;\n        }\n        else if (protocol === \"\") {\n            this.#subprotocol = { version: 1, encoding: \"json\" };\n        }\n        else {\n            this.#subprotocol = subprotocolsV3.get(protocol);\n            if (this.#subprotocol === undefined) {\n                this.#setClosed(new ProtoError(`Unrecognized WebSocket subprotocol: ${JSON.stringify(protocol)}`));\n                return;\n            }\n        }\n        for (const callbacks of this.#openCallbacks) {\n            callbacks.openCallback();\n        }\n        this.#openCallbacks.length = 0;\n        this.#opened = true;\n    }\n    #sendToSocket(msg) {\n        const encoding = this.#subprotocol.encoding;\n        if (encoding === \"json\") {\n            const jsonMsg = writeJsonObject(msg, json_ClientMsg);\n            this.#socket.send(jsonMsg);\n        }\n        else if (encoding === \"protobuf\") {\n            const protobufMsg = writeProtobufMessage(msg, protobuf_ClientMsg);\n            this.#socket.send(protobufMsg);\n        }\n        else {\n            throw impossible(encoding, \"Impossible encoding\");\n        }\n    }\n    /** Get the protocol version negotiated with the server, possibly waiting until the socket is open. */\n    getVersion() {\n        return new Promise((versionCallback, errorCallback) => {\n            this.#getVersionCalled = true;\n            if (this.#closed !== undefined) {\n                errorCallback(this.#closed);\n            }\n            else if (!this.#opened) {\n                const openCallback = () => versionCallback(this.#subprotocol.version);\n                this.#openCallbacks.push({ openCallback, errorCallback });\n            }\n            else {\n                versionCallback(this.#subprotocol.version);\n            }\n        });\n    }\n    // Make sure that the negotiated version is at least `minVersion`.\n    /** @private */\n    _ensureVersion(minVersion, feature) {\n        if (this.#subprotocol === undefined || !this.#getVersionCalled) {\n            throw new ProtocolVersionError(`${feature} is supported only on protocol version ${minVersion} and higher, ` +\n                \"but the version supported by the WebSocket server is not yet known. \" +\n                \"Use Client.getVersion() to wait until the version is available.\");\n        }\n        else if (this.#subprotocol.version < minVersion) {\n            throw new ProtocolVersionError(`${feature} is supported on protocol version ${minVersion} and higher, ` +\n                `but the WebSocket server only supports version ${this.#subprotocol.version}`);\n        }\n    }\n    // Send a request to the server and invoke a callback when we get the response.\n    /** @private */\n    _sendRequest(request, callbacks) {\n        if (this.#closed !== undefined) {\n            callbacks.errorCallback(new ClosedError(\"Client is closed\", this.#closed));\n            return;\n        }\n        const requestId = this.#requestIdAlloc.alloc();\n        this.#responseMap.set(requestId, { ...callbacks, type: request.type });\n        this.#send({ type: \"request\", requestId, request });\n    }\n    // The socket encountered an error.\n    #onSocketError(event) {\n        const eventMessage = event.message;\n        const message = eventMessage ?? \"WebSocket was closed due to an error\";\n        this.#setClosed(new WebSocketError(message));\n    }\n    // The socket was closed.\n    #onSocketClose(event) {\n        let message = `WebSocket was closed with code ${event.code}`;\n        if (event.reason) {\n            message += `: ${event.reason}`;\n        }\n        this.#setClosed(new WebSocketError(message));\n    }\n    // Close the client with the given error.\n    #setClosed(error) {\n        if (this.#closed !== undefined) {\n            return;\n        }\n        this.#closed = error;\n        for (const callbacks of this.#openCallbacks) {\n            callbacks.errorCallback(error);\n        }\n        this.#openCallbacks.length = 0;\n        for (const [requestId, responseState] of this.#responseMap.entries()) {\n            responseState.errorCallback(error);\n            this.#requestIdAlloc.free(requestId);\n        }\n        this.#responseMap.clear();\n        this.#socket.close();\n    }\n    // We received a message from the socket.\n    #onSocketMessage(event) {\n        if (this.#closed !== undefined) {\n            return;\n        }\n        try {\n            let msg;\n            const encoding = this.#subprotocol.encoding;\n            if (encoding === \"json\") {\n                if (typeof event.data !== \"string\") {\n                    this.#socket.close(3003, \"Only text messages are accepted with JSON encoding\");\n                    this.#setClosed(new ProtoError(\"Received non-text message from server with JSON encoding\"));\n                    return;\n                }\n                msg = readJsonObject(JSON.parse(event.data), json_ServerMsg);\n            }\n            else if (encoding === \"protobuf\") {\n                if (!(event.data instanceof ArrayBuffer)) {\n                    this.#socket.close(3003, \"Only binary messages are accepted with Protobuf encoding\");\n                    this.#setClosed(new ProtoError(\"Received non-binary message from server with Protobuf encoding\"));\n                    return;\n                }\n                msg = readProtobufMessage(new Uint8Array(event.data), protobuf_ServerMsg);\n            }\n            else {\n                throw impossible(encoding, \"Impossible encoding\");\n            }\n            this.#handleMsg(msg);\n        }\n        catch (e) {\n            this.#socket.close(3007, \"Could not handle message\");\n            this.#setClosed(e);\n        }\n    }\n    // Handle a message from the server.\n    #handleMsg(msg) {\n        if (msg.type === \"none\") {\n            throw new ProtoError(\"Received an unrecognized ServerMsg\");\n        }\n        else if (msg.type === \"hello_ok\" || msg.type === \"hello_error\") {\n            if (this.#recvdHello) {\n                throw new ProtoError(\"Received a duplicated hello response\");\n            }\n            this.#recvdHello = true;\n            if (msg.type === \"hello_error\") {\n                throw errorFromProto(msg.error);\n            }\n            return;\n        }\n        else if (!this.#recvdHello) {\n            throw new ProtoError(\"Received a non-hello message before a hello response\");\n        }\n        if (msg.type === \"response_ok\") {\n            const requestId = msg.requestId;\n            const responseState = this.#responseMap.get(requestId);\n            this.#responseMap.delete(requestId);\n            if (responseState === undefined) {\n                throw new ProtoError(\"Received unexpected OK response\");\n            }\n            this.#requestIdAlloc.free(requestId);\n            try {\n                if (responseState.type !== msg.response.type) {\n                    console.dir({ responseState, msg });\n                    throw new ProtoError(\"Received unexpected type of response\");\n                }\n                responseState.responseCallback(msg.response);\n            }\n            catch (e) {\n                responseState.errorCallback(e);\n                throw e;\n            }\n        }\n        else if (msg.type === \"response_error\") {\n            const requestId = msg.requestId;\n            const responseState = this.#responseMap.get(requestId);\n            this.#responseMap.delete(requestId);\n            if (responseState === undefined) {\n                throw new ProtoError(\"Received unexpected error response\");\n            }\n            this.#requestIdAlloc.free(requestId);\n            responseState.errorCallback(errorFromProto(msg.error));\n        }\n        else {\n            throw impossible(msg, \"Impossible ServerMsg type\");\n        }\n    }\n    /** Open a {@link WsStream}, a stream for executing SQL statements. */\n    openStream() {\n        return WsStream.open(this);\n    }\n    /** Cache a SQL text on the server. This requires protocol version 2 or higher. */\n    storeSql(sql) {\n        this._ensureVersion(2, \"storeSql()\");\n        const sqlId = this.#sqlIdAlloc.alloc();\n        const sqlObj = new Sql(this, sqlId);\n        const responseCallback = () => undefined;\n        const errorCallback = (e) => sqlObj._setClosed(e);\n        const request = { type: \"store_sql\", sqlId, sql };\n        this._sendRequest(request, { responseCallback, errorCallback });\n        return sqlObj;\n    }\n    /** @private */\n    _closeSql(sqlId) {\n        if (this.#closed !== undefined) {\n            return;\n        }\n        const responseCallback = () => this.#sqlIdAlloc.free(sqlId);\n        const errorCallback = (e) => this.#setClosed(e);\n        const request = { type: \"close_sql\", sqlId };\n        this._sendRequest(request, { responseCallback, errorCallback });\n    }\n    /** Close the client and the WebSocket. */\n    close() {\n        this.#setClosed(new ClientError(\"Client was manually closed\"));\n    }\n    /** True if the client is closed. */\n    get closed() {\n        return this.#closed !== undefined;\n    }\n}\n", "const _fetch = fetch;\nconst _Request = Request;\nconst _Headers = Headers;\nexport {\n    _fetch as fetch,\n    _Request as Request,\n    _Headers as Headers,\n};\n", "// queueMicrotask() ponyfill\n// https://github.com/libsql/libsql-client-ts/issues/47\nlet _queueMicrotask;\nif (typeof queueMicrotask !== \"undefined\") {\n    _queueMicrotask = queueMicrotask;\n}\nelse {\n    const resolved = Promise.resolve();\n    _queueMicrotask = (callback) => {\n        resolved.then(callback);\n    };\n}\nexport { _queueMicrotask as queueMicrotask };\n", "export class ByteQueue {\n    #array;\n    #shiftPos;\n    #pushPos;\n    constructor(initialCap) {\n        this.#array = new Uint8Array(new ArrayBuffer(initialCap));\n        this.#shiftPos = 0;\n        this.#pushPos = 0;\n    }\n    get length() {\n        return this.#pushPos - this.#shiftPos;\n    }\n    data() {\n        return this.#array.slice(this.#shiftPos, this.#pushPos);\n    }\n    push(chunk) {\n        this.#ensurePush(chunk.byteLength);\n        this.#array.set(chunk, this.#pushPos);\n        this.#pushPos += chunk.byteLength;\n    }\n    #ensurePush(pushLength) {\n        if (this.#pushPos + pushLength <= this.#array.byteLength) {\n            return;\n        }\n        const filledLength = this.#pushPos - this.#shiftPos;\n        if (filledLength + pushLength <= this.#array.byteLength &&\n            2 * this.#pushPos >= this.#array.byteLength) {\n            this.#array.copyWithin(0, this.#shiftPos, this.#pushPos);\n        }\n        else {\n            let newCap = this.#array.byteLength;\n            do {\n                newCap *= 2;\n            } while (filledLength + pushLength > newCap);\n            const newArray = new Uint8Array(new ArrayBuffer(newCap));\n            newArray.set(this.#array.slice(this.#shiftPos, this.#pushPos), 0);\n            this.#array = newArray;\n        }\n        this.#pushPos = filledLength;\n        this.#shiftPos = 0;\n    }\n    shift(length) {\n        this.#shiftPos += length;\n    }\n}\n", "import { ProtoError } from \"../errors.js\";\nimport * as d from \"../encoding/json/decode.js\";\nimport { Error, StmtResult, BatchResult, DescribeResult } from \"../shared/json_decode.js\";\nexport function PipelineRespBody(obj) {\n    const baton = d.stringOpt(obj[\"baton\"]);\n    const baseUrl = d.stringOpt(obj[\"base_url\"]);\n    const results = d.arrayObjectsMap(obj[\"results\"], StreamResult);\n    return { baton, baseUrl, results };\n}\nfunction StreamResult(obj) {\n    const type = d.string(obj[\"type\"]);\n    if (type === \"ok\") {\n        const response = StreamResponse(d.object(obj[\"response\"]));\n        return { type: \"ok\", response };\n    }\n    else if (type === \"error\") {\n        const error = Error(d.object(obj[\"error\"]));\n        return { type: \"error\", error };\n    }\n    else {\n        throw new ProtoError(\"Unexpected type of StreamResult\");\n    }\n}\nfunction StreamResponse(obj) {\n    const type = d.string(obj[\"type\"]);\n    if (type === \"close\") {\n        return { type: \"close\" };\n    }\n    else if (type === \"execute\") {\n        const result = StmtResult(d.object(obj[\"result\"]));\n        return { type: \"execute\", result };\n    }\n    else if (type === \"batch\") {\n        const result = BatchResult(d.object(obj[\"result\"]));\n        return { type: \"batch\", result };\n    }\n    else if (type === \"sequence\") {\n        return { type: \"sequence\" };\n    }\n    else if (type === \"describe\") {\n        const result = DescribeResult(d.object(obj[\"result\"]));\n        return { type: \"describe\", result };\n    }\n    else if (type === \"store_sql\") {\n        return { type: \"store_sql\" };\n    }\n    else if (type === \"close_sql\") {\n        return { type: \"close_sql\" };\n    }\n    else if (type === \"get_autocommit\") {\n        const isAutocommit = d.boolean(obj[\"is_autocommit\"]);\n        return { type: \"get_autocommit\", isAutocommit };\n    }\n    else {\n        throw new ProtoError(\"Unexpected type of StreamResponse\");\n    }\n}\nexport function CursorRespBody(obj) {\n    const baton = d.stringOpt(obj[\"baton\"]);\n    const baseUrl = d.stringOpt(obj[\"base_url\"]);\n    return { baton, baseUrl };\n}\n", "import { Error, StmtResult, BatchResult, DescribeResult } from \"../shared/protobuf_decode.js\";\nexport const PipelineRespBody = {\n    default() { return { baton: undefined, baseUrl: undefined, results: [] }; },\n    1(r, msg) { msg.baton = r.string(); },\n    2(r, msg) { msg.baseUrl = r.string(); },\n    3(r, msg) { msg.results.push(r.message(StreamResult)); },\n};\nconst StreamResult = {\n    default() { return { type: \"none\" }; },\n    1(r) { return { type: \"ok\", response: r.message(StreamResponse) }; },\n    2(r) { return { type: \"error\", error: r.message(Error) }; },\n};\nconst StreamResponse = {\n    default() { return { type: \"none\" }; },\n    1(r) { return { type: \"close\" }; },\n    2(r) { return r.message(ExecuteStreamResp); },\n    3(r) { return r.message(BatchStreamResp); },\n    4(r) { return { type: \"sequence\" }; },\n    5(r) { return r.message(DescribeStreamResp); },\n    6(r) { return { type: \"store_sql\" }; },\n    7(r) { return { type: \"close_sql\" }; },\n    8(r) { return r.message(GetAutocommitStreamResp); },\n};\nconst ExecuteStreamResp = {\n    default() { return { type: \"execute\", result: StmtResult.default() }; },\n    1(r, msg) { msg.result = r.message(StmtResult); },\n};\nconst BatchStreamResp = {\n    default() { return { type: \"batch\", result: BatchResult.default() }; },\n    1(r, msg) { msg.result = r.message(BatchResult); },\n};\nconst DescribeStreamResp = {\n    default() { return { type: \"describe\", result: DescribeResult.default() }; },\n    1(r, msg) { msg.result = r.message(DescribeResult); },\n};\nconst GetAutocommitStreamResp = {\n    default() { return { type: \"get_autocommit\", isAutocommit: false }; },\n    1(r, msg) { msg.isAutocommit = r.bool(); },\n};\nexport const CursorRespBody = {\n    default() { return { baton: undefined, baseUrl: undefined }; },\n    1(r, msg) { msg.baton = r.string(); },\n    2(r, msg) { msg.baseUrl = r.string(); },\n};\n", "import { ByteQueue } from \"../byte_queue.js\";\nimport { Cursor } from \"../cursor.js\";\nimport * as jsond from \"../encoding/json/decode.js\";\nimport * as protobufd from \"../encoding/protobuf/decode.js\";\nimport { ClientError, ClosedError, ProtoError, InternalError } from \"../errors.js\";\nimport { impossible } from \"../util.js\";\nimport { CursorRespBody as json_CursorRespBody } from \"./json_decode.js\";\nimport { CursorRespBody as protobuf_CursorRespBody } from \"./protobuf_decode.js\";\nimport { CursorEntry as json_CursorEntry } from \"../shared/json_decode.js\";\nimport { CursorEntry as protobuf_CursorEntry } from \"../shared/protobuf_decode.js\";\nexport class HttpCursor extends Cursor {\n    #stream;\n    #encoding;\n    #reader;\n    #queue;\n    #closed;\n    #done;\n    /** @private */\n    constructor(stream, encoding) {\n        super();\n        this.#stream = stream;\n        this.#encoding = encoding;\n        this.#reader = undefined;\n        this.#queue = new ByteQueue(16 * 1024);\n        this.#closed = undefined;\n        this.#done = false;\n    }\n    async open(response) {\n        if (response.body === null) {\n            throw new ProtoError(\"No response body for cursor request\");\n        }\n        this.#reader = response.body.getReader();\n        const respBody = await this.#nextItem(json_CursorRespBody, protobuf_CursorRespBody);\n        if (respBody === undefined) {\n            throw new ProtoError(\"Empty response to cursor request\");\n        }\n        return respBody;\n    }\n    /** Fetch the next entry from the cursor. */\n    next() {\n        return this.#nextItem(json_CursorEntry, protobuf_CursorEntry);\n    }\n    /** Close the cursor. */\n    close() {\n        this._setClosed(new ClientError(\"Cursor was manually closed\"));\n    }\n    /** @private */\n    _setClosed(error) {\n        if (this.#closed !== undefined) {\n            return;\n        }\n        this.#closed = error;\n        this.#stream._cursorClosed(this);\n        if (this.#reader !== undefined) {\n            this.#reader.cancel();\n        }\n    }\n    /** True if the cursor is closed. */\n    get closed() {\n        return this.#closed !== undefined;\n    }\n    async #nextItem(jsonFun, protobufDef) {\n        for (;;) {\n            if (this.#done) {\n                return undefined;\n            }\n            else if (this.#closed !== undefined) {\n                throw new ClosedError(\"Cursor is closed\", this.#closed);\n            }\n            if (this.#encoding === \"json\") {\n                const jsonData = this.#parseItemJson();\n                if (jsonData !== undefined) {\n                    const jsonText = new TextDecoder().decode(jsonData);\n                    const jsonValue = JSON.parse(jsonText);\n                    return jsond.readJsonObject(jsonValue, jsonFun);\n                }\n            }\n            else if (this.#encoding === \"protobuf\") {\n                const protobufData = this.#parseItemProtobuf();\n                if (protobufData !== undefined) {\n                    return protobufd.readProtobufMessage(protobufData, protobufDef);\n                }\n            }\n            else {\n                throw impossible(this.#encoding, \"Impossible encoding\");\n            }\n            if (this.#reader === undefined) {\n                throw new InternalError(\"Attempted to read from HTTP cursor before it was opened\");\n            }\n            const { value, done } = await this.#reader.read();\n            if (done && this.#queue.length === 0) {\n                this.#done = true;\n            }\n            else if (done) {\n                throw new ProtoError(\"Unexpected end of cursor stream\");\n            }\n            else {\n                this.#queue.push(value);\n            }\n        }\n    }\n    #parseItemJson() {\n        const data = this.#queue.data();\n        const newlineByte = 10;\n        const newlinePos = data.indexOf(newlineByte);\n        if (newlinePos < 0) {\n            return undefined;\n        }\n        const jsonData = data.slice(0, newlinePos);\n        this.#queue.shift(newlinePos + 1);\n        return jsonData;\n    }\n    #parseItemProtobuf() {\n        const data = this.#queue.data();\n        let varintValue = 0;\n        let varintLength = 0;\n        for (;;) {\n            if (varintLength >= data.byteLength) {\n                return undefined;\n            }\n            const byte = data[varintLength];\n            varintValue |= (byte & 0x7f) << (7 * varintLength);\n            varintLength += 1;\n            if (!(byte & 0x80)) {\n                break;\n            }\n        }\n        if (data.byteLength < varintLength + varintValue) {\n            return undefined;\n        }\n        const protobufData = data.slice(varintLength, varintLength + varintValue);\n        this.#queue.shift(varintLength + varintValue);\n        return protobufData;\n    }\n}\n", "import { Stmt, Batch } from \"../shared/json_encode.js\";\nimport { impossible } from \"../util.js\";\nexport function PipelineReqBody(w, msg) {\n    if (msg.baton !== undefined) {\n        w.string(\"baton\", msg.baton);\n    }\n    w.arrayObjects(\"requests\", msg.requests, StreamRequest);\n}\nfunction StreamRequest(w, msg) {\n    w.stringRaw(\"type\", msg.type);\n    if (msg.type === \"close\") {\n        // do nothing\n    }\n    else if (msg.type === \"execute\") {\n        w.object(\"stmt\", msg.stmt, Stmt);\n    }\n    else if (msg.type === \"batch\") {\n        w.object(\"batch\", msg.batch, Batch);\n    }\n    else if (msg.type === \"sequence\") {\n        if (msg.sql !== undefined) {\n            w.string(\"sql\", msg.sql);\n        }\n        if (msg.sqlId !== undefined) {\n            w.number(\"sql_id\", msg.sqlId);\n        }\n    }\n    else if (msg.type === \"describe\") {\n        if (msg.sql !== undefined) {\n            w.string(\"sql\", msg.sql);\n        }\n        if (msg.sqlId !== undefined) {\n            w.number(\"sql_id\", msg.sqlId);\n        }\n    }\n    else if (msg.type === \"store_sql\") {\n        w.number(\"sql_id\", msg.sqlId);\n        w.string(\"sql\", msg.sql);\n    }\n    else if (msg.type === \"close_sql\") {\n        w.number(\"sql_id\", msg.sqlId);\n    }\n    else if (msg.type === \"get_autocommit\") {\n        // do nothing\n    }\n    else {\n        throw impossible(msg, \"Impossible type of StreamRequest\");\n    }\n}\nexport function CursorReqBody(w, msg) {\n    if (msg.baton !== undefined) {\n        w.string(\"baton\", msg.baton);\n    }\n    w.object(\"batch\", msg.batch, Batch);\n}\n", "import { Stmt, Batch } from \"../shared/protobuf_encode.js\";\nimport { impossible } from \"../util.js\";\nexport function PipelineReqBody(w, msg) {\n    if (msg.baton !== undefined) {\n        w.string(1, msg.baton);\n    }\n    for (const req of msg.requests) {\n        w.message(2, req, StreamRequest);\n    }\n}\nfunction StreamRequest(w, msg) {\n    if (msg.type === \"close\") {\n        w.message(1, msg, CloseStreamReq);\n    }\n    else if (msg.type === \"execute\") {\n        w.message(2, msg, ExecuteStreamReq);\n    }\n    else if (msg.type === \"batch\") {\n        w.message(3, msg, BatchStreamReq);\n    }\n    else if (msg.type === \"sequence\") {\n        w.message(4, msg, SequenceStreamReq);\n    }\n    else if (msg.type === \"describe\") {\n        w.message(5, msg, DescribeStreamReq);\n    }\n    else if (msg.type === \"store_sql\") {\n        w.message(6, msg, StoreSqlStreamReq);\n    }\n    else if (msg.type === \"close_sql\") {\n        w.message(7, msg, CloseSqlStreamReq);\n    }\n    else if (msg.type === \"get_autocommit\") {\n        w.message(8, msg, GetAutocommitStreamReq);\n    }\n    else {\n        throw impossible(msg, \"Impossible type of StreamRequest\");\n    }\n}\nfunction CloseStreamReq(_w, _msg) {\n}\nfunction ExecuteStreamReq(w, msg) {\n    w.message(1, msg.stmt, Stmt);\n}\nfunction BatchStreamReq(w, msg) {\n    w.message(1, msg.batch, Batch);\n}\nfunction SequenceStreamReq(w, msg) {\n    if (msg.sql !== undefined) {\n        w.string(1, msg.sql);\n    }\n    if (msg.sqlId !== undefined) {\n        w.int32(2, msg.sqlId);\n    }\n}\nfunction DescribeStreamReq(w, msg) {\n    if (msg.sql !== undefined) {\n        w.string(1, msg.sql);\n    }\n    if (msg.sqlId !== undefined) {\n        w.int32(2, msg.sqlId);\n    }\n}\nfunction StoreSqlStreamReq(w, msg) {\n    w.int32(1, msg.sqlId);\n    w.string(2, msg.sql);\n}\nfunction CloseSqlStreamReq(w, msg) {\n    w.int32(1, msg.sqlId);\n}\nfunction GetAutocommitStreamReq(_w, _msg) {\n}\nexport function CursorReqBody(w, msg) {\n    if (msg.baton !== undefined) {\n        w.string(1, msg.baton);\n    }\n    w.message(2, msg.batch, Batch);\n}\n", "import { Request, Headers } from \"@libsql/isomorphic-fetch\";\nimport { ClientError, HttpServerError, ProtocolVersionError, ProtoError, ClosedError, InternalError, } from \"../errors.js\";\nimport { readJsonObject, writeJsonObject, readProtobufMessage, writeProtobufMessage, } from \"../encoding/index.js\";\nimport { IdAlloc } from \"../id_alloc.js\";\nimport { Queue } from \"../queue.js\";\nimport { queueMicrotask } from \"../queue_microtask.js\";\nimport { errorFromProto } from \"../result.js\";\nimport { Sql } from \"../sql.js\";\nimport { Stream } from \"../stream.js\";\nimport { impossible } from \"../util.js\";\nimport { HttpCursor } from \"./cursor.js\";\nimport { PipelineReqBody as json_PipelineReqBody } from \"./json_encode.js\";\nimport { PipelineReqBody as protobuf_PipelineReqBody } from \"./protobuf_encode.js\";\nimport { CursorReqBody as json_CursorReqBody } from \"./json_encode.js\";\nimport { CursorReqBody as protobuf_CursorReqBody } from \"./protobuf_encode.js\";\nimport { PipelineRespBody as json_PipelineRespBody } from \"./json_decode.js\";\nimport { PipelineRespBody as protobuf_PipelineRespBody } from \"./protobuf_decode.js\";\nexport class HttpStream extends Stream {\n    #client;\n    #baseUrl;\n    #jwt;\n    #fetch;\n    #baton;\n    #queue;\n    #flushing;\n    #cursor;\n    #closing;\n    #closeQueued;\n    #closed;\n    #sqlIdAlloc;\n    /** @private */\n    constructor(client, baseUrl, jwt, customFetch) {\n        super(client.intMode);\n        this.#client = client;\n        this.#baseUrl = baseUrl.toString();\n        this.#jwt = jwt;\n        this.#fetch = customFetch;\n        this.#baton = undefined;\n        this.#queue = new Queue();\n        this.#flushing = false;\n        this.#closing = false;\n        this.#closeQueued = false;\n        this.#closed = undefined;\n        this.#sqlIdAlloc = new IdAlloc();\n    }\n    /** Get the {@link HttpClient} object that this stream belongs to. */\n    client() {\n        return this.#client;\n    }\n    /** @private */\n    _sqlOwner() {\n        return this;\n    }\n    /** Cache a SQL text on the server. */\n    storeSql(sql) {\n        const sqlId = this.#sqlIdAlloc.alloc();\n        this.#sendStreamRequest({ type: \"store_sql\", sqlId, sql }).then(() => undefined, (error) => this._setClosed(error));\n        return new Sql(this, sqlId);\n    }\n    /** @private */\n    _closeSql(sqlId) {\n        if (this.#closed !== undefined) {\n            return;\n        }\n        this.#sendStreamRequest({ type: \"close_sql\", sqlId }).then(() => this.#sqlIdAlloc.free(sqlId), (error) => this._setClosed(error));\n    }\n    /** @private */\n    _execute(stmt) {\n        return this.#sendStreamRequest({ type: \"execute\", stmt }).then((response) => {\n            return response.result;\n        });\n    }\n    /** @private */\n    _batch(batch) {\n        return this.#sendStreamRequest({ type: \"batch\", batch }).then((response) => {\n            return response.result;\n        });\n    }\n    /** @private */\n    _describe(protoSql) {\n        return this.#sendStreamRequest({\n            type: \"describe\",\n            sql: protoSql.sql,\n            sqlId: protoSql.sqlId\n        }).then((response) => {\n            return response.result;\n        });\n    }\n    /** @private */\n    _sequence(protoSql) {\n        return this.#sendStreamRequest({\n            type: \"sequence\",\n            sql: protoSql.sql,\n            sqlId: protoSql.sqlId,\n        }).then((_response) => {\n            return undefined;\n        });\n    }\n    /** Check whether the SQL connection underlying this stream is in autocommit state (i.e., outside of an\n     * explicit transaction). This requires protocol version 3 or higher.\n     */\n    getAutocommit() {\n        this.#client._ensureVersion(3, \"getAutocommit()\");\n        return this.#sendStreamRequest({\n            type: \"get_autocommit\",\n        }).then((response) => {\n            return response.isAutocommit;\n        });\n    }\n    #sendStreamRequest(request) {\n        return new Promise((responseCallback, errorCallback) => {\n            this.#pushToQueue({ type: \"pipeline\", request, responseCallback, errorCallback });\n        });\n    }\n    /** @private */\n    _openCursor(batch) {\n        return new Promise((cursorCallback, errorCallback) => {\n            this.#pushToQueue({ type: \"cursor\", batch, cursorCallback, errorCallback });\n        });\n    }\n    /** @private */\n    _cursorClosed(cursor) {\n        if (cursor !== this.#cursor) {\n            throw new InternalError(\"Cursor was closed, but it was not associated with the stream\");\n        }\n        this.#cursor = undefined;\n        queueMicrotask(() => this.#flushQueue());\n    }\n    /** Immediately close the stream. */\n    close() {\n        this._setClosed(new ClientError(\"Stream was manually closed\"));\n    }\n    /** Gracefully close the stream. */\n    closeGracefully() {\n        this.#closing = true;\n        queueMicrotask(() => this.#flushQueue());\n    }\n    /** True if the stream is closed. */\n    get closed() {\n        return this.#closed !== undefined || this.#closing;\n    }\n    /** @private */\n    _setClosed(error) {\n        if (this.#closed !== undefined) {\n            return;\n        }\n        this.#closed = error;\n        if (this.#cursor !== undefined) {\n            this.#cursor._setClosed(error);\n        }\n        this.#client._streamClosed(this);\n        for (;;) {\n            const entry = this.#queue.shift();\n            if (entry !== undefined) {\n                entry.errorCallback(error);\n            }\n            else {\n                break;\n            }\n        }\n        if ((this.#baton !== undefined || this.#flushing) && !this.#closeQueued) {\n            this.#queue.push({\n                type: \"pipeline\",\n                request: { type: \"close\" },\n                responseCallback: () => undefined,\n                errorCallback: () => undefined,\n            });\n            this.#closeQueued = true;\n            queueMicrotask(() => this.#flushQueue());\n        }\n    }\n    #pushToQueue(entry) {\n        if (this.#closed !== undefined) {\n            throw new ClosedError(\"Stream is closed\", this.#closed);\n        }\n        else if (this.#closing) {\n            throw new ClosedError(\"Stream is closing\", undefined);\n        }\n        else {\n            this.#queue.push(entry);\n            queueMicrotask(() => this.#flushQueue());\n        }\n    }\n    #flushQueue() {\n        if (this.#flushing || this.#cursor !== undefined) {\n            return;\n        }\n        if (this.#closing && this.#queue.length === 0) {\n            this._setClosed(new ClientError(\"Stream was gracefully closed\"));\n            return;\n        }\n        const endpoint = this.#client._endpoint;\n        if (endpoint === undefined) {\n            this.#client._endpointPromise.then(() => this.#flushQueue(), (error) => this._setClosed(error));\n            return;\n        }\n        const firstEntry = this.#queue.shift();\n        if (firstEntry === undefined) {\n            return;\n        }\n        else if (firstEntry.type === \"pipeline\") {\n            const pipeline = [firstEntry];\n            for (;;) {\n                const entry = this.#queue.first();\n                if (entry !== undefined && entry.type === \"pipeline\") {\n                    pipeline.push(entry);\n                    this.#queue.shift();\n                }\n                else if (entry === undefined && this.#closing && !this.#closeQueued) {\n                    pipeline.push({\n                        type: \"pipeline\",\n                        request: { type: \"close\" },\n                        responseCallback: () => undefined,\n                        errorCallback: () => undefined,\n                    });\n                    this.#closeQueued = true;\n                    break;\n                }\n                else {\n                    break;\n                }\n            }\n            this.#flushPipeline(endpoint, pipeline);\n        }\n        else if (firstEntry.type === \"cursor\") {\n            this.#flushCursor(endpoint, firstEntry);\n        }\n        else {\n            throw impossible(firstEntry, \"Impossible type of QueueEntry\");\n        }\n    }\n    #flushPipeline(endpoint, pipeline) {\n        this.#flush(() => this.#createPipelineRequest(pipeline, endpoint), (resp) => decodePipelineResponse(resp, endpoint.encoding), (respBody) => respBody.baton, (respBody) => respBody.baseUrl, (respBody) => handlePipelineResponse(pipeline, respBody), (error) => pipeline.forEach((entry) => entry.errorCallback(error)));\n    }\n    #flushCursor(endpoint, entry) {\n        const cursor = new HttpCursor(this, endpoint.encoding);\n        this.#cursor = cursor;\n        this.#flush(() => this.#createCursorRequest(entry, endpoint), (resp) => cursor.open(resp), (respBody) => respBody.baton, (respBody) => respBody.baseUrl, (_respBody) => entry.cursorCallback(cursor), (error) => entry.errorCallback(error));\n    }\n    #flush(createRequest, decodeResponse, getBaton, getBaseUrl, handleResponse, handleError) {\n        let promise;\n        try {\n            const request = createRequest();\n            const fetch = this.#fetch;\n            promise = fetch(request);\n        }\n        catch (error) {\n            promise = Promise.reject(error);\n        }\n        this.#flushing = true;\n        promise.then((resp) => {\n            if (!resp.ok) {\n                return errorFromResponse(resp).then((error) => {\n                    throw error;\n                });\n            }\n            return decodeResponse(resp);\n        }).then((r) => {\n            this.#baton = getBaton(r);\n            this.#baseUrl = getBaseUrl(r) ?? this.#baseUrl;\n            handleResponse(r);\n        }).catch((error) => {\n            this._setClosed(error);\n            handleError(error);\n        }).finally(() => {\n            this.#flushing = false;\n            this.#flushQueue();\n        });\n    }\n    #createPipelineRequest(pipeline, endpoint) {\n        return this.#createRequest(new URL(endpoint.pipelinePath, this.#baseUrl), {\n            baton: this.#baton,\n            requests: pipeline.map((entry) => entry.request),\n        }, endpoint.encoding, json_PipelineReqBody, protobuf_PipelineReqBody);\n    }\n    #createCursorRequest(entry, endpoint) {\n        if (endpoint.cursorPath === undefined) {\n            throw new ProtocolVersionError(\"Cursors are supported only on protocol version 3 and higher, \" +\n                `but the HTTP server only supports version ${endpoint.version}.`);\n        }\n        return this.#createRequest(new URL(endpoint.cursorPath, this.#baseUrl), {\n            baton: this.#baton,\n            batch: entry.batch,\n        }, endpoint.encoding, json_CursorReqBody, protobuf_CursorReqBody);\n    }\n    #createRequest(url, reqBody, encoding, jsonFun, protobufFun) {\n        let bodyData;\n        let contentType;\n        if (encoding === \"json\") {\n            bodyData = writeJsonObject(reqBody, jsonFun);\n            contentType = \"application/json\";\n        }\n        else if (encoding === \"protobuf\") {\n            bodyData = writeProtobufMessage(reqBody, protobufFun);\n            contentType = \"application/x-protobuf\";\n        }\n        else {\n            throw impossible(encoding, \"Impossible encoding\");\n        }\n        const headers = new Headers();\n        headers.set(\"content-type\", contentType);\n        if (this.#jwt !== undefined) {\n            headers.set(\"authorization\", `Bearer ${this.#jwt}`);\n        }\n        return new Request(url.toString(), { method: \"POST\", headers, body: bodyData });\n    }\n}\nfunction handlePipelineResponse(pipeline, respBody) {\n    if (respBody.results.length !== pipeline.length) {\n        throw new ProtoError(\"Server returned unexpected number of pipeline results\");\n    }\n    for (let i = 0; i < pipeline.length; ++i) {\n        const result = respBody.results[i];\n        const entry = pipeline[i];\n        if (result.type === \"ok\") {\n            if (result.response.type !== entry.request.type) {\n                throw new ProtoError(\"Received unexpected type of response\");\n            }\n            entry.responseCallback(result.response);\n        }\n        else if (result.type === \"error\") {\n            entry.errorCallback(errorFromProto(result.error));\n        }\n        else if (result.type === \"none\") {\n            throw new ProtoError(\"Received unrecognized type of StreamResult\");\n        }\n        else {\n            throw impossible(result, \"Received impossible type of StreamResult\");\n        }\n    }\n}\nasync function decodePipelineResponse(resp, encoding) {\n    if (encoding === \"json\") {\n        const respJson = await resp.json();\n        return readJsonObject(respJson, json_PipelineRespBody);\n    }\n    else if (encoding === \"protobuf\") {\n        const respData = await resp.arrayBuffer();\n        return readProtobufMessage(new Uint8Array(respData), protobuf_PipelineRespBody);\n    }\n    else {\n        throw impossible(encoding, \"Impossible encoding\");\n    }\n}\nasync function errorFromResponse(resp) {\n    const respType = resp.headers.get(\"content-type\") ?? \"text/plain\";\n    if (respType === \"application/json\") {\n        const respBody = await resp.json();\n        if (\"message\" in respBody) {\n            return errorFromProto(respBody);\n        }\n    }\n    let message = `Server returned HTTP status ${resp.status}`;\n    if (respType === \"text/plain\") {\n        const respBody = (await resp.text()).trim();\n        if (respBody !== \"\") {\n            message += `: ${respBody}`;\n        }\n    }\n    if (resp.status === 404) {\n        message += \". It seems that the libsql server is outdated, please try updating the database.\";\n    }\n    return new HttpServerError(message, resp.status);\n}\n", "import { fetch, Request } from \"@libsql/isomorphic-fetch\";\nimport { Client } from \"../client.js\";\nimport { ClientError, ClosedError, ProtocolVersionError } from \"../errors.js\";\nimport { HttpStream } from \"./stream.js\";\nexport const checkEndpoints = [\n    {\n        versionPath: \"v3-protobuf\",\n        pipelinePath: \"v3-protobuf/pipeline\",\n        cursorPath: \"v3-protobuf/cursor\",\n        version: 3,\n        encoding: \"protobuf\",\n    },\n    /*\n    {\n        versionPath: \"v3\",\n        pipelinePath: \"v3/pipeline\",\n        cursorPath: \"v3/cursor\",\n        version: 3,\n        encoding: \"json\",\n    },\n    */\n];\nconst fallbackEndpoint = {\n    versionPath: \"v2\",\n    pipelinePath: \"v2/pipeline\",\n    cursorPath: undefined,\n    version: 2,\n    encoding: \"json\",\n};\n/** A client for the Hrana protocol over HTTP. */\nexport class HttpClient extends Client {\n    #url;\n    #jwt;\n    #fetch;\n    #closed;\n    #streams;\n    /** @private */\n    _endpointPromise;\n    /** @private */\n    _endpoint;\n    /** @private */\n    constructor(url, jwt, customFetch, protocolVersion = 2) {\n        super();\n        this.#url = url;\n        this.#jwt = jwt;\n        this.#fetch = customFetch ?? fetch;\n        this.#closed = undefined;\n        this.#streams = new Set();\n        if (protocolVersion == 3) {\n            this._endpointPromise = findEndpoint(this.#fetch, this.#url);\n            this._endpointPromise.then((endpoint) => this._endpoint = endpoint, (error) => this.#setClosed(error));\n        }\n        else {\n            this._endpointPromise = Promise.resolve(fallbackEndpoint);\n            this._endpointPromise.then((endpoint) => this._endpoint = endpoint, (error) => this.#setClosed(error));\n        }\n    }\n    /** Get the protocol version supported by the server. */\n    async getVersion() {\n        if (this._endpoint !== undefined) {\n            return this._endpoint.version;\n        }\n        return (await this._endpointPromise).version;\n    }\n    // Make sure that the negotiated version is at least `minVersion`.\n    /** @private */\n    _ensureVersion(minVersion, feature) {\n        if (minVersion <= fallbackEndpoint.version) {\n            return;\n        }\n        else if (this._endpoint === undefined) {\n            throw new ProtocolVersionError(`${feature} is supported only on protocol version ${minVersion} and higher, ` +\n                \"but the version supported by the HTTP server is not yet known. \" +\n                \"Use Client.getVersion() to wait until the version is available.\");\n        }\n        else if (this._endpoint.version < minVersion) {\n            throw new ProtocolVersionError(`${feature} is supported only on protocol version ${minVersion} and higher, ` +\n                `but the HTTP server only supports version ${this._endpoint.version}.`);\n        }\n    }\n    /** Open a {@link HttpStream}, a stream for executing SQL statements. */\n    openStream() {\n        if (this.#closed !== undefined) {\n            throw new ClosedError(\"Client is closed\", this.#closed);\n        }\n        const stream = new HttpStream(this, this.#url, this.#jwt, this.#fetch);\n        this.#streams.add(stream);\n        return stream;\n    }\n    /** @private */\n    _streamClosed(stream) {\n        this.#streams.delete(stream);\n    }\n    /** Close the client and all its streams. */\n    close() {\n        this.#setClosed(new ClientError(\"Client was manually closed\"));\n    }\n    /** True if the client is closed. */\n    get closed() {\n        return this.#closed !== undefined;\n    }\n    #setClosed(error) {\n        if (this.#closed !== undefined) {\n            return;\n        }\n        this.#closed = error;\n        for (const stream of Array.from(this.#streams)) {\n            stream._setClosed(new ClosedError(\"Client was closed\", error));\n        }\n    }\n}\nasync function findEndpoint(customFetch, clientUrl) {\n    const fetch = customFetch;\n    for (const endpoint of checkEndpoints) {\n        const url = new URL(endpoint.versionPath, clientUrl);\n        const request = new Request(url.toString(), { method: \"GET\" });\n        const response = await fetch(request);\n        await response.arrayBuffer();\n        if (response.ok) {\n            return endpoint;\n        }\n    }\n    return fallbackEndpoint;\n}\n", "import { WebSocket } from \"@libsql/isomorphic-ws\";\nimport { subprotocolsV2, subprotocolsV3 } from \"./ws/client.js\";\nimport { WebSocketUnsupportedError } from \"./errors.js\";\nimport { HttpClient } from \"./http/client.js\";\nimport { WsClient } from \"./ws/client.js\";\nexport { WebSocket } from \"@libsql/isomorphic-ws\";\nexport { fetch, Request, Headers } from \"@libsql/isomorphic-fetch\";\nexport { Client } from \"./client.js\";\nexport * from \"./errors.js\";\nexport { Batch, BatchStep, BatchCond } from \"./batch.js\";\nexport { parseLibsqlUrl } from \"./libsql_url.js\";\nexport { Sql } from \"./sql.js\";\nexport { Stmt } from \"./stmt.js\";\nexport { Stream } from \"./stream.js\";\nexport { HttpClient } from \"./http/client.js\";\nexport { HttpStream } from \"./http/stream.js\";\nexport { WsClient } from \"./ws/client.js\";\nexport { WsStream } from \"./ws/stream.js\";\n/** Open a Hrana client over WebSocket connected to the given `url`. */\nexport function openWs(url, jwt, protocolVersion = 2) {\n    if (typeof WebSocket === \"undefined\") {\n        throw new WebSocketUnsupportedError(\"WebSockets are not supported in this environment\");\n    }\n    var subprotocols = undefined;\n    if (protocolVersion == 3) {\n        subprotocols = Array.from(subprotocolsV3.keys());\n    }\n    else {\n        subprotocols = Array.from(subprotocolsV2.keys());\n    }\n    const socket = new WebSocket(url, subprotocols);\n    return new WsClient(socket, jwt);\n}\n/** Open a Hrana client over HTTP connected to the given `url`.\n *\n * If the `customFetch` argument is passed and not `undefined`, it is used in place of the `fetch` function\n * from `@libsql/isomorphic-fetch`. This function is always called with a `Request` object from\n * `@libsql/isomorphic-fetch`.\n */\nexport function openHttp(url, jwt, customFetch, protocolVersion = 2) {\n    return new HttpClient(url instanceof URL ? url : new URL(url), jwt, customFetch, protocolVersion);\n}\n", "import * as hrana from \"@libsql/hrana-client\";\nimport { LibsqlError } from \"@libsql/core/api\";\nimport { transactionModeToBegin, ResultSetImpl } from \"@libsql/core/util\";\nexport class HranaTransaction {\n    #mode;\n    #version;\n    // Promise that is resolved when the BEGIN statement completes, or `undefined` if we haven't executed the\n    // BEGIN statement yet.\n    #started;\n    /** @private */\n    constructor(mode, version) {\n        this.#mode = mode;\n        this.#version = version;\n        this.#started = undefined;\n    }\n    execute(stmt) {\n        return this.batch([stmt]).then((results) => results[0]);\n    }\n    async batch(stmts) {\n        const stream = this._getStream();\n        if (stream.closed) {\n            throw new LibsqlError(\"Cannot execute statements because the transaction is closed\", \"TRANSACTION_CLOSED\");\n        }\n        try {\n            const hranaStmts = stmts.map(stmtToHrana);\n            let rowsPromises;\n            if (this.#started === undefined) {\n                // The transaction hasn't started yet, so we need to send the BEGIN statement in a batch with\n                // `hranaStmts`.\n                this._getSqlCache().apply(hranaStmts);\n                const batch = stream.batch(this.#version >= 3);\n                const beginStep = batch.step();\n                const beginPromise = beginStep.run(transactionModeToBegin(this.#mode));\n                // Execute the `hranaStmts` only if the BEGIN succeeded, to make sure that we don't execute it\n                // outside of a transaction.\n                let lastStep = beginStep;\n                rowsPromises = hranaStmts.map((hranaStmt) => {\n                    const stmtStep = batch.step()\n                        .condition(hrana.BatchCond.ok(lastStep));\n                    if (this.#version >= 3) {\n                        // If the Hrana version supports it, make sure that we are still in a transaction\n                        stmtStep.condition(hrana.BatchCond.not(hrana.BatchCond.isAutocommit(batch)));\n                    }\n                    const rowsPromise = stmtStep.query(hranaStmt);\n                    rowsPromise.catch(() => undefined); // silence Node warning\n                    lastStep = stmtStep;\n                    return rowsPromise;\n                });\n                // `this.#started` is resolved successfully only if the batch and the BEGIN statement inside\n                // of the batch are both successful.\n                this.#started = batch.execute()\n                    .then(() => beginPromise)\n                    .then(() => undefined);\n                try {\n                    await this.#started;\n                }\n                catch (e) {\n                    // If the BEGIN failed, the transaction is unusable and we must close it. However, if the\n                    // BEGIN suceeds and `hranaStmts` fail, the transaction is _not_ closed.\n                    this.close();\n                    throw e;\n                }\n            }\n            else {\n                if (this.#version < 3) {\n                    // The transaction has started, so we must wait until the BEGIN statement completed to make\n                    // sure that we don't execute `hranaStmts` outside of a transaction.\n                    await this.#started;\n                }\n                else {\n                    // The transaction has started, but we will use `hrana.BatchCond.isAutocommit()` to make\n                    // sure that we don't execute `hranaStmts` outside of a transaction, so we don't have to\n                    // wait for `this.#started`\n                }\n                this._getSqlCache().apply(hranaStmts);\n                const batch = stream.batch(this.#version >= 3);\n                let lastStep = undefined;\n                rowsPromises = hranaStmts.map((hranaStmt) => {\n                    const stmtStep = batch.step();\n                    if (lastStep !== undefined) {\n                        stmtStep.condition(hrana.BatchCond.ok(lastStep));\n                    }\n                    if (this.#version >= 3) {\n                        stmtStep.condition(hrana.BatchCond.not(hrana.BatchCond.isAutocommit(batch)));\n                    }\n                    const rowsPromise = stmtStep.query(hranaStmt);\n                    rowsPromise.catch(() => undefined); // silence Node warning\n                    lastStep = stmtStep;\n                    return rowsPromise;\n                });\n                await batch.execute();\n            }\n            const resultSets = [];\n            for (const rowsPromise of rowsPromises) {\n                const rows = await rowsPromise;\n                if (rows === undefined) {\n                    throw new LibsqlError(\"Statement in a transaction was not executed, \" +\n                        \"probably because the transaction has been rolled back\", \"TRANSACTION_CLOSED\");\n                }\n                resultSets.push(resultSetFromHrana(rows));\n            }\n            return resultSets;\n        }\n        catch (e) {\n            throw mapHranaError(e);\n        }\n    }\n    async executeMultiple(sql) {\n        const stream = this._getStream();\n        if (stream.closed) {\n            throw new LibsqlError(\"Cannot execute statements because the transaction is closed\", \"TRANSACTION_CLOSED\");\n        }\n        try {\n            if (this.#started === undefined) {\n                // If the transaction hasn't started yet, start it now\n                this.#started = stream.run(transactionModeToBegin(this.#mode))\n                    .then(() => undefined);\n                try {\n                    await this.#started;\n                }\n                catch (e) {\n                    this.close();\n                    throw e;\n                }\n            }\n            else {\n                // Wait until the transaction has started\n                await this.#started;\n            }\n            await stream.sequence(sql);\n        }\n        catch (e) {\n            throw mapHranaError(e);\n        }\n    }\n    async rollback() {\n        try {\n            const stream = this._getStream();\n            if (stream.closed) {\n                return;\n            }\n            if (this.#started !== undefined) {\n                // We don't have to wait for the BEGIN statement to complete. If the BEGIN fails, we will\n                // execute a ROLLBACK outside of an active transaction, which should be harmless.\n            }\n            else {\n                // We did nothing in the transaction, so there is nothing to rollback.\n                return;\n            }\n            // Pipeline the ROLLBACK statement and the stream close.\n            const promise = stream.run(\"ROLLBACK\")\n                .catch(e => { throw mapHranaError(e); });\n            stream.closeGracefully();\n            await promise;\n        }\n        catch (e) {\n            throw mapHranaError(e);\n        }\n        finally {\n            // `this.close()` may close the `hrana.Client`, which aborts all pending stream requests, so we\n            // must call it _after_ we receive the ROLLBACK response.\n            // Also note that the current stream should already be closed, but we need to call `this.close()`\n            // anyway, because it may need to do more cleanup.\n            this.close();\n        }\n    }\n    async commit() {\n        // (this method is analogous to `rollback()`)\n        try {\n            const stream = this._getStream();\n            if (stream.closed) {\n                throw new LibsqlError(\"Cannot commit the transaction because it is already closed\", \"TRANSACTION_CLOSED\");\n            }\n            if (this.#started !== undefined) {\n                // Make sure to execute the COMMIT only if the BEGIN was successful.\n                await this.#started;\n            }\n            else {\n                return;\n            }\n            const promise = stream.run(\"COMMIT\")\n                .catch(e => { throw mapHranaError(e); });\n            stream.closeGracefully();\n            await promise;\n        }\n        catch (e) {\n            throw mapHranaError(e);\n        }\n        finally {\n            this.close();\n        }\n    }\n}\nexport async function executeHranaBatch(mode, version, batch, hranaStmts) {\n    const beginStep = batch.step();\n    const beginPromise = beginStep.run(transactionModeToBegin(mode));\n    let lastStep = beginStep;\n    const stmtPromises = hranaStmts.map((hranaStmt) => {\n        const stmtStep = batch.step()\n            .condition(hrana.BatchCond.ok(lastStep));\n        if (version >= 3) {\n            stmtStep.condition(hrana.BatchCond.not(hrana.BatchCond.isAutocommit(batch)));\n        }\n        const stmtPromise = stmtStep.query(hranaStmt);\n        lastStep = stmtStep;\n        return stmtPromise;\n    });\n    const commitStep = batch.step()\n        .condition(hrana.BatchCond.ok(lastStep));\n    if (version >= 3) {\n        commitStep.condition(hrana.BatchCond.not(hrana.BatchCond.isAutocommit(batch)));\n    }\n    const commitPromise = commitStep.run(\"COMMIT\");\n    const rollbackStep = batch.step()\n        .condition(hrana.BatchCond.not(hrana.BatchCond.ok(commitStep)));\n    rollbackStep.run(\"ROLLBACK\").catch(_ => undefined);\n    await batch.execute();\n    const resultSets = [];\n    await beginPromise;\n    for (const stmtPromise of stmtPromises) {\n        const hranaRows = await stmtPromise;\n        if (hranaRows === undefined) {\n            throw new LibsqlError(\"Statement in a batch was not executed, probably because the transaction has been rolled back\", \"TRANSACTION_CLOSED\");\n        }\n        resultSets.push(resultSetFromHrana(hranaRows));\n    }\n    await commitPromise;\n    return resultSets;\n}\nexport function stmtToHrana(stmt) {\n    if (typeof stmt === \"string\") {\n        return new hrana.Stmt(stmt);\n    }\n    const hranaStmt = new hrana.Stmt(stmt.sql);\n    if (Array.isArray(stmt.args)) {\n        hranaStmt.bindIndexes(stmt.args);\n    }\n    else {\n        for (const [key, value] of Object.entries(stmt.args)) {\n            hranaStmt.bindName(key, value);\n        }\n    }\n    return hranaStmt;\n}\nexport function resultSetFromHrana(hranaRows) {\n    const columns = hranaRows.columnNames.map(c => c ?? \"\");\n    const columnTypes = hranaRows.columnDecltypes.map(c => c ?? \"\");\n    const rows = hranaRows.rows;\n    const rowsAffected = hranaRows.affectedRowCount;\n    const lastInsertRowid = hranaRows.lastInsertRowid !== undefined\n        ? hranaRows.lastInsertRowid : undefined;\n    return new ResultSetImpl(columns, columnTypes, rows, rowsAffected, lastInsertRowid);\n}\nexport function mapHranaError(e) {\n    if (e instanceof hrana.ClientError) {\n        const code = mapHranaErrorCode(e);\n        return new LibsqlError(e.message, code, undefined, e);\n    }\n    return e;\n}\nfunction mapHranaErrorCode(e) {\n    if (e instanceof hrana.ResponseError && e.code !== undefined) {\n        return e.code;\n    }\n    else if (e instanceof hrana.ProtoError) {\n        return \"HRANA_PROTO_ERROR\";\n    }\n    else if (e instanceof hrana.ClosedError) {\n        return e.cause instanceof hrana.ClientError\n            ? mapHranaErrorCode(e.cause) : \"HRANA_CLOSED_ERROR\";\n    }\n    else if (e instanceof hrana.WebSocketError) {\n        return \"HRANA_WEBSOCKET_ERROR\";\n    }\n    else if (e instanceof hrana.HttpServerError) {\n        return \"SERVER_ERROR\";\n    }\n    else if (e instanceof hrana.ProtocolVersionError) {\n        return \"PROTOCOL_VERSION_ERROR\";\n    }\n    else if (e instanceof hrana.InternalError) {\n        return \"INTERNAL_ERROR\";\n    }\n    else {\n        return \"UNKNOWN\";\n    }\n}\n", "export class SqlCache {\n    #owner;\n    #sqls;\n    capacity;\n    constructor(owner, capacity) {\n        this.#owner = owner;\n        this.#sqls = new Lru();\n        this.capacity = capacity;\n    }\n    // Replaces SQL strings with cached `hrana.Sql` objects in the statements in `hranaStmts`. After this\n    // function returns, we guarantee that all `hranaStmts` refer to valid (not closed) `hrana.Sql` objects,\n    // but _we may invalidate any other `hrana.Sql` objects_ (by closing them, thus removing them from the\n    // server).\n    //\n    // In practice, this means that after calling this function, you can use the statements only up to the\n    // first `await`, because concurrent code may also use the cache and invalidate those statements.\n    apply(hranaStmts) {\n        if (this.capacity <= 0) {\n            return;\n        }\n        const usedSqlObjs = new Set();\n        for (const hranaStmt of hranaStmts) {\n            if (typeof hranaStmt.sql !== \"string\") {\n                continue;\n            }\n            const sqlText = hranaStmt.sql;\n            let sqlObj = this.#sqls.get(sqlText);\n            if (sqlObj === undefined) {\n                while (this.#sqls.size + 1 > this.capacity) {\n                    const [evictSqlText, evictSqlObj] = this.#sqls.peekLru();\n                    if (usedSqlObjs.has(evictSqlObj)) {\n                        // The SQL object that we are trying to evict is already in use in this batch, so we\n                        // must not evict and close it.\n                        break;\n                    }\n                    evictSqlObj.close();\n                    this.#sqls.delete(evictSqlText);\n                }\n                if (this.#sqls.size + 1 <= this.capacity) {\n                    sqlObj = this.#owner.storeSql(sqlText);\n                    this.#sqls.set(sqlText, sqlObj);\n                }\n            }\n            if (sqlObj !== undefined) {\n                hranaStmt.sql = sqlObj;\n                usedSqlObjs.add(sqlObj);\n            }\n        }\n    }\n}\nclass Lru {\n    // This maps keys to the cache values. The entries are ordered by their last use (entires that were used\n    // most recently are at the end).\n    #cache;\n    constructor() {\n        this.#cache = new Map();\n    }\n    get(key) {\n        const value = this.#cache.get(key);\n        if (value !== undefined) {\n            // move the entry to the back of the Map\n            this.#cache.delete(key);\n            this.#cache.set(key, value);\n        }\n        return value;\n    }\n    set(key, value) {\n        this.#cache.set(key, value);\n    }\n    peekLru() {\n        for (const entry of this.#cache.entries()) {\n            return entry;\n        }\n        return undefined;\n    }\n    delete(key) {\n        this.#cache.delete(key);\n    }\n    get size() {\n        return this.#cache.size;\n    }\n}\n", "import * as hrana from \"@libsql/hrana-client\";\nimport { LibsqlError } from \"@libsql/core/api\";\nimport { expandConfig } from \"@libsql/core/config\";\nimport { HranaTransaction, executeHranaBatch, stmtToHrana, resultSetFromHrana, mapHranaError, } from \"./hrana.js\";\nimport { SqlCache } from \"./sql_cache.js\";\nimport { encodeBaseUrl } from \"@libsql/core/uri\";\nimport { supportedUrlLink } from \"@libsql/core/util\";\nexport * from \"@libsql/core/api\";\nexport function createClient(config) {\n    return _createClient(expandConfig(config, false));\n}\n/** @private */\nexport function _createClient(config) {\n    if (config.scheme !== \"wss\" && config.scheme !== \"ws\") {\n        throw new LibsqlError('The WebSocket client supports only \"libsql:\", \"wss:\" and \"ws:\" URLs, ' +\n            `got ${JSON.stringify(config.scheme + \":\")}. For more information, please read ${supportedUrlLink}`, \"URL_SCHEME_NOT_SUPPORTED\");\n    }\n    if (config.scheme === \"ws\" && config.tls) {\n        throw new LibsqlError(`A \"ws:\" URL cannot opt into TLS by using ?tls=1`, \"URL_INVALID\");\n    }\n    else if (config.scheme === \"wss\" && !config.tls) {\n        throw new LibsqlError(`A \"wss:\" URL cannot opt out of TLS by using ?tls=0`, \"URL_INVALID\");\n    }\n    const url = encodeBaseUrl(config.scheme, config.authority, config.path);\n    let client;\n    try {\n        client = hrana.openWs(url, config.authToken);\n    }\n    catch (e) {\n        if (e instanceof hrana.WebSocketUnsupportedError) {\n            const suggestedScheme = config.scheme === \"wss\" ? \"https\" : \"http\";\n            const suggestedUrl = encodeBaseUrl(suggestedScheme, config.authority, config.path);\n            throw new LibsqlError(\"This environment does not support WebSockets, please switch to the HTTP client by using \" +\n                `a \"${suggestedScheme}:\" URL (${JSON.stringify(suggestedUrl)}). ` +\n                `For more information, please read ${supportedUrlLink}`, \"WEBSOCKETS_NOT_SUPPORTED\");\n        }\n        throw mapHranaError(e);\n    }\n    return new WsClient(client, url, config.authToken, config.intMode);\n}\nconst maxConnAgeMillis = 60 * 1000;\nconst sqlCacheCapacity = 100;\nexport class WsClient {\n    #url;\n    #authToken;\n    #intMode;\n    // State of the current connection. The `hrana.WsClient` inside may be closed at any moment due to an\n    // asynchronous error.\n    #connState;\n    // If defined, this is a connection that will be used in the future, once it is ready.\n    #futureConnState;\n    closed;\n    protocol;\n    /** @private */\n    constructor(client, url, authToken, intMode) {\n        this.#url = url;\n        this.#authToken = authToken;\n        this.#intMode = intMode;\n        this.#connState = this.#openConn(client);\n        this.#futureConnState = undefined;\n        this.closed = false;\n        this.protocol = \"ws\";\n    }\n    async execute(stmt) {\n        const streamState = await this.#openStream();\n        try {\n            const hranaStmt = stmtToHrana(stmt);\n            // Schedule all operations synchronously, so they will be pipelined and executed in a single\n            // network roundtrip.\n            streamState.conn.sqlCache.apply([hranaStmt]);\n            const hranaRowsPromise = streamState.stream.query(hranaStmt);\n            streamState.stream.closeGracefully();\n            return resultSetFromHrana(await hranaRowsPromise);\n        }\n        catch (e) {\n            throw mapHranaError(e);\n        }\n        finally {\n            this._closeStream(streamState);\n        }\n    }\n    async batch(stmts, mode = \"deferred\") {\n        const streamState = await this.#openStream();\n        try {\n            const hranaStmts = stmts.map(stmtToHrana);\n            const version = await streamState.conn.client.getVersion();\n            // Schedule all operations synchronously, so they will be pipelined and executed in a single\n            // network roundtrip.\n            streamState.conn.sqlCache.apply(hranaStmts);\n            const batch = streamState.stream.batch(version >= 3);\n            const resultsPromise = executeHranaBatch(mode, version, batch, hranaStmts);\n            return await resultsPromise;\n        }\n        catch (e) {\n            throw mapHranaError(e);\n        }\n        finally {\n            this._closeStream(streamState);\n        }\n    }\n    async transaction(mode = \"write\") {\n        const streamState = await this.#openStream();\n        try {\n            const version = await streamState.conn.client.getVersion();\n            // the BEGIN statement will be batched with the first statement on the transaction to save a\n            // network roundtrip\n            return new WsTransaction(this, streamState, mode, version);\n        }\n        catch (e) {\n            this._closeStream(streamState);\n            throw mapHranaError(e);\n        }\n    }\n    async executeMultiple(sql) {\n        const streamState = await this.#openStream();\n        try {\n            // Schedule all operations synchronously, so they will be pipelined and executed in a single\n            // network roundtrip.\n            const promise = streamState.stream.sequence(sql);\n            streamState.stream.closeGracefully();\n            await promise;\n        }\n        catch (e) {\n            throw mapHranaError(e);\n        }\n        finally {\n            this._closeStream(streamState);\n        }\n    }\n    sync() {\n        return Promise.resolve();\n    }\n    async #openStream() {\n        if (this.closed) {\n            throw new LibsqlError(\"The client is closed\", \"CLIENT_CLOSED\");\n        }\n        const now = new Date();\n        const ageMillis = now.valueOf() - this.#connState.openTime.valueOf();\n        if (ageMillis > maxConnAgeMillis && this.#futureConnState === undefined) {\n            // The existing connection is too old, let's open a new one.\n            const futureConnState = this.#openConn();\n            this.#futureConnState = futureConnState;\n            // However, if we used `futureConnState` immediately, we would introduce additional latency,\n            // because we would have to wait for the WebSocket handshake to complete, even though we may a\n            // have perfectly good existing connection in `this.#connState`!\n            //\n            // So we wait until the `hrana.Client.getVersion()` operation completes (which happens when the\n            // WebSocket hanshake completes), and only then we replace `this.#connState` with\n            // `futureConnState`, which is stored in `this.#futureConnState` in the meantime.\n            futureConnState.client.getVersion().then((_version) => {\n                if (this.#connState !== futureConnState) {\n                    // We need to close `this.#connState` before we replace it. However, it is possible\n                    // that `this.#connState` has already been replaced: see the code below.\n                    if (this.#connState.streamStates.size === 0) {\n                        this.#connState.client.close();\n                    }\n                    else {\n                        // If there are existing streams on the connection, we must not close it, because\n                        // these streams would be broken. The last stream to be closed will also close the\n                        // connection in `_closeStream()`.\n                    }\n                }\n                this.#connState = futureConnState;\n                this.#futureConnState = undefined;\n            }, (_e) => {\n                // If the new connection could not be established, let's just ignore the error and keep\n                // using the existing connection.\n                this.#futureConnState = undefined;\n            });\n        }\n        if (this.#connState.client.closed) {\n            // An error happened on this connection and it has been closed. Let's try to seamlessly reconnect.\n            try {\n                if (this.#futureConnState !== undefined) {\n                    // We are already in the process of opening a new connection, so let's just use it\n                    // immediately.\n                    this.#connState = this.#futureConnState;\n                }\n                else {\n                    this.#connState = this.#openConn();\n                }\n            }\n            catch (e) {\n                throw mapHranaError(e);\n            }\n        }\n        const connState = this.#connState;\n        try {\n            // Now we wait for the WebSocket handshake to complete (if it hasn't completed yet). Note that\n            // this does not increase latency, because any messages that we would send on the WebSocket before\n            // the handshake would be queued until the handshake is completed anyway.\n            if (connState.useSqlCache === undefined) {\n                connState.useSqlCache = await connState.client.getVersion() >= 2;\n                if (connState.useSqlCache) {\n                    connState.sqlCache.capacity = sqlCacheCapacity;\n                }\n            }\n            const stream = connState.client.openStream();\n            stream.intMode = this.#intMode;\n            const streamState = { conn: connState, stream };\n            connState.streamStates.add(streamState);\n            return streamState;\n        }\n        catch (e) {\n            throw mapHranaError(e);\n        }\n    }\n    #openConn(client) {\n        try {\n            client ??= hrana.openWs(this.#url, this.#authToken);\n            return {\n                client,\n                useSqlCache: undefined,\n                sqlCache: new SqlCache(client, 0),\n                openTime: new Date(),\n                streamStates: new Set(),\n            };\n        }\n        catch (e) {\n            throw mapHranaError(e);\n        }\n    }\n    _closeStream(streamState) {\n        streamState.stream.close();\n        const connState = streamState.conn;\n        connState.streamStates.delete(streamState);\n        if (connState.streamStates.size === 0 && connState !== this.#connState) {\n            // We are not using this connection anymore and this is the last stream that was using it, so we\n            // must close it now.\n            connState.client.close();\n        }\n    }\n    close() {\n        this.#connState.client.close();\n        this.closed = true;\n    }\n}\nexport class WsTransaction extends HranaTransaction {\n    #client;\n    #streamState;\n    /** @private */\n    constructor(client, state, mode, version) {\n        super(mode, version);\n        this.#client = client;\n        this.#streamState = state;\n    }\n    /** @private */\n    _getStream() {\n        return this.#streamState.stream;\n    }\n    /** @private */\n    _getSqlCache() {\n        return this.#streamState.conn.sqlCache;\n    }\n    close() {\n        this.#client._closeStream(this.#streamState);\n    }\n    get closed() {\n        return this.#streamState.stream.closed;\n    }\n}\n", "import * as hrana from \"@libsql/hrana-client\";\nimport { LibsqlError } from \"@libsql/core/api\";\nimport { expandConfig } from \"@libsql/core/config\";\nimport { HranaTransaction, executeHranaBatch, stmtToHrana, resultSetFromHrana, mapHranaError, } from \"./hrana.js\";\nimport { SqlCache } from \"./sql_cache.js\";\nimport { encodeBaseUrl } from \"@libsql/core/uri\";\nimport { supportedUrlLink } from \"@libsql/core/util\";\nexport * from \"@libsql/core/api\";\nexport function createClient(config) {\n    return _createClient(expandConfig(config, true));\n}\n/** @private */\nexport function _createClient(config) {\n    if (config.scheme !== \"https\" && config.scheme !== \"http\") {\n        throw new LibsqlError('The HTTP client supports only \"libsql:\", \"https:\" and \"http:\" URLs, ' +\n            `got ${JSON.stringify(config.scheme + \":\")}. For more information, please read ${supportedUrlLink}`, \"URL_SCHEME_NOT_SUPPORTED\");\n    }\n    if (config.scheme === \"http\" && config.tls) {\n        throw new LibsqlError(`A \"http:\" URL cannot opt into TLS by using ?tls=1`, \"URL_INVALID\");\n    }\n    else if (config.scheme === \"https\" && !config.tls) {\n        throw new LibsqlError(`A \"https:\" URL cannot opt out of TLS by using ?tls=0`, \"URL_INVALID\");\n    }\n    const url = encodeBaseUrl(config.scheme, config.authority, config.path);\n    return new HttpClient(url, config.authToken, config.intMode, config.fetch);\n}\nconst sqlCacheCapacity = 30;\nexport class HttpClient {\n    #client;\n    protocol;\n    /** @private */\n    constructor(url, authToken, intMode, customFetch) {\n        this.#client = hrana.openHttp(url, authToken, customFetch);\n        this.#client.intMode = intMode;\n        this.protocol = \"http\";\n    }\n    async execute(stmt) {\n        try {\n            const hranaStmt = stmtToHrana(stmt);\n            // Pipeline all operations, so `hrana.HttpClient` can open the stream, execute the statement and\n            // close the stream in a single HTTP request.\n            let rowsPromise;\n            const stream = this.#client.openStream();\n            try {\n                rowsPromise = stream.query(hranaStmt);\n            }\n            finally {\n                stream.closeGracefully();\n            }\n            return resultSetFromHrana(await rowsPromise);\n        }\n        catch (e) {\n            throw mapHranaError(e);\n        }\n    }\n    async batch(stmts, mode = \"deferred\") {\n        try {\n            const hranaStmts = stmts.map(stmtToHrana);\n            const version = await this.#client.getVersion();\n            // Pipeline all operations, so `hrana.HttpClient` can open the stream, execute the batch and\n            // close the stream in a single HTTP request.\n            let resultsPromise;\n            const stream = this.#client.openStream();\n            try {\n                // It makes sense to use a SQL cache even for a single batch, because it may contain the same\n                // statement repeated multiple times.\n                const sqlCache = new SqlCache(stream, sqlCacheCapacity);\n                sqlCache.apply(hranaStmts);\n                // TODO: we do not use a cursor here, because it would cause three roundtrips:\n                // 1. pipeline request to store SQL texts\n                // 2. cursor request\n                // 3. pipeline request to close the stream\n                const batch = stream.batch(false);\n                resultsPromise = executeHranaBatch(mode, version, batch, hranaStmts);\n            }\n            finally {\n                stream.closeGracefully();\n            }\n            return await resultsPromise;\n        }\n        catch (e) {\n            throw mapHranaError(e);\n        }\n    }\n    async transaction(mode = \"write\") {\n        try {\n            const version = await this.#client.getVersion();\n            return new HttpTransaction(this.#client.openStream(), mode, version);\n        }\n        catch (e) {\n            throw mapHranaError(e);\n        }\n    }\n    async executeMultiple(sql) {\n        try {\n            // Pipeline all operations, so `hrana.HttpClient` can open the stream, execute the sequence and\n            // close the stream in a single HTTP request.\n            let promise;\n            const stream = this.#client.openStream();\n            try {\n                promise = stream.sequence(sql);\n            }\n            finally {\n                stream.closeGracefully();\n            }\n            await promise;\n        }\n        catch (e) {\n            throw mapHranaError(e);\n        }\n    }\n    sync() {\n        throw new LibsqlError(\"sync not supported in http mode\", \"SYNC_NOT_SUPPORTED\");\n    }\n    close() {\n        this.#client.close();\n    }\n    get closed() {\n        return this.#client.closed;\n    }\n}\nexport class HttpTransaction extends HranaTransaction {\n    #stream;\n    #sqlCache;\n    /** @private */\n    constructor(stream, mode, version) {\n        super(mode, version);\n        this.#stream = stream;\n        this.#sqlCache = new SqlCache(stream, sqlCacheCapacity);\n    }\n    /** @private */\n    _getStream() {\n        return this.#stream;\n    }\n    /** @private */\n    _getSqlCache() {\n        return this.#sqlCache;\n    }\n    close() {\n        this.#stream.close();\n    }\n    get closed() {\n        return this.#stream.closed;\n    }\n}\n", "import { LibsqlError } from \"@libsql/core/api\";\nimport { expandConfig } from \"@libsql/core/config\";\nimport { supportedUrlLink } from \"@libsql/core/util\";\nimport { _createClient as _createWsClient } from \"./ws.js\";\nimport { _createClient as _createHttpClient } from \"./http.js\";\nexport * from \"@libsql/core/api\";\nexport function createClient(config) {\n    return _createClient(expandConfig(config, true));\n}\n/** @private */\nexport function _createClient(config) {\n    if (config.scheme === \"ws\" || config.scheme === \"wss\") {\n        return _createWsClient(config);\n    }\n    else if (config.scheme === \"http\" || config.scheme === \"https\") {\n        return _createHttpClient(config);\n    }\n    else {\n        throw new LibsqlError('The client that uses Web standard APIs supports only \"libsql:\", \"wss:\", \"ws:\", \"https:\" and \"http:\" URLs, ' +\n            `got ${JSON.stringify(config.scheme + \":\")}. For more information, please read ${supportedUrlLink}`, \"URL_SCHEME_NOT_SUPPORTED\");\n    }\n}\n", "import { drizzle as drizzleTurso, type LibSQLDatabase } from 'drizzle-orm/libsql';\nimport { createClient } from '@libsql/client';\nimport * as schema from './schema';\n\nexport type DatabasePool = LibSQLDatabase;\n\nfunction makeTursoDatabaseClient(url: string, authToken: string) {\n  const client = createClient({ url, authToken });\n  return drizzleTurso(client, {\n    schema,\n    logger: true\n  });\n}\n\nexport function makeDatabaseClient() {\n  const url = process.env.DATABASE_URL!;\n  const authToken = process.env.DATABASE_AUTH_TOKEN!;\n\n  return makeTursoDatabaseClient(url, authToken);\n}\n", "var util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    get errors() {\n        return this.issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: issueData.message || errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap,\n            ctx.schemaErrorMap,\n            getErrorMap(),\n            errorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            syncPairs.push({\n                key: await pair.key,\n                value: await pair.value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" &&\n                (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        if (typeof ctx.data === \"undefined\") {\n            return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };\n        }\n        return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n    }\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this, this._def);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[a-z][a-z0-9]*$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&\u2019*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\nconst ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;\nconst ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\n// Adapted from https://stackoverflow.com/a/3143231\nconst datetimeRegex = (args) => {\n    if (args.precision) {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${args.precision}}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        }\n        else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${args.precision}}Z$`);\n        }\n    }\n    else if (args.precision === 0) {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        }\n        else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}Z$`);\n        }\n    }\n    else {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        }\n        else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?Z$`);\n        }\n    }\n};\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            }\n            //\n            );\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        var _a;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * @deprecated Use z.string().min(1) instead.\n     * @see {@link ZodString.min}\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" ||\n                ch.kind === \"int\" ||\n                ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = BigInt(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.bigint,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    syncPairs.push({\n                        key,\n                        value: await pair.value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key) => {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return Object.keys(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else {\n        return null;\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (this._def.values.indexOf(input.data) === -1) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values) {\n        return ZodEnum.create(values);\n    }\n    exclude(values) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));\n    }\n}\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (nativeEnumValues.indexOf(input.data) === -1) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.issues.length) {\n                return {\n                    status: \"dirty\",\n                    value: ctx.data,\n                };\n            }\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then((processed) => {\n                    return this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                });\n            }\n            else {\n                return this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc\n            // effect: RefinementEffect<any>\n            ) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\"\n            ? params.default\n            : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        if (isValid(result)) {\n            result.value = Object.freeze(result.value);\n        }\n        return result;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\nconst custom = (check, params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) => {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            var _a, _b;\n            if (!check(data)) {\n                const p = typeof params === \"function\"\n                    ? params(data)\n                    : typeof params === \"string\"\n                        ? { message: params }\n                        : params;\n                const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                const p2 = typeof p === \"string\" ? { message: p } : p;\n                ctx.addIssue({ code: \"custom\", ...p2, fatal: _fatal });\n            }\n        });\n    return ZodAny.create();\n};\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nconst NEVER = INVALID;\n\nvar z = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () { return util; },\n    get objectUtil () { return objectUtil; },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nexport { BRAND, DIRTY, EMPTY_PATH, INVALID, NEVER, OK, ParseStatus, ZodType as Schema, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodBranded, ZodCatch, ZodDate, ZodDefault, ZodDiscriminatedUnion, ZodEffects, ZodEnum, ZodError, ZodFirstPartyTypeKind, ZodFunction, ZodIntersection, ZodIssueCode, ZodLazy, ZodLiteral, ZodMap, ZodNaN, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNumber, ZodObject, ZodOptional, ZodParsedType, ZodPipeline, ZodPromise, ZodReadonly, ZodRecord, ZodType as ZodSchema, ZodSet, ZodString, ZodSymbol, ZodEffects as ZodTransformer, ZodTuple, ZodType, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, addIssueToContext, anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, coerce, custom, dateType as date, z as default, errorMap as defaultErrorMap, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, getErrorMap, getParsedType, instanceOfType as instanceof, intersectionType as intersection, isAborted, isAsync, isDirty, isValid, late, lazyType as lazy, literalType as literal, makeIssue, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, objectUtil, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, quotelessJson, recordType as record, setType as set, setErrorMap, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, util, voidType as void, z };\n", "import { z } from 'zod';\n\nexport const TaskId = z.string().uuid();\nexport type TaskId = z.infer<typeof TaskId>;\n\nexport const TaskPriority = z.enum(['useless', 'low', 'medium', 'high']);\nexport type TaskPriority = z.infer<typeof TaskPriority>;\n\nexport const TaskCategory = z.enum(['work', 'coding', 'reading', 'home', 'hobby', 'other']);\nexport type TaskCategory = z.infer<typeof TaskCategory>;\n\nexport const Task = z.object({\n\tid: TaskId,\n\tname: z.string().min(1).max(127),\n\tdescription: z.string().min(1).max(2048).optional(),\n\tpriority: TaskPriority.optional(),\n\tcategory: TaskCategory.optional(),\n\tdueDate: z.number().optional(),\n\tcreatedAt: z.number()\n});\nexport type Task = z.infer<typeof Task>;\n\nexport const DueType = z.enum(['not-due', 'close-to-due', 'due-date', 'over-due']);\nexport type DueType = z.infer<typeof DueType>;\n\nexport const TaskViewModel = Task.merge(\n\tz.object({\n\t\tdueType: DueType.optional()\n\t})\n);\nexport type TaskViewModel = z.infer<typeof TaskViewModel>;\n", "import { Task } from './model';\nimport { z } from 'zod';\n\nexport const TaskParam = Task.pick({ id: true });\nexport type TaskParam = z.infer<typeof TaskParam>;\n\nexport const TaskCreateInput = Task.omit({ id: true, createdAt: true });\nexport type TaskCreateInput = z.infer<typeof TaskCreateInput>;\n\nexport const TaskCreateModel = Task.omit({ id: true, createdAt: true });\nexport type TaskCreateModel = z.infer<typeof TaskCreateModel>;\n", "// src/utils/url.ts\nvar splitPath = (path) => {\n  const paths = path.split(\"/\");\n  if (paths[0] === \"\") {\n    paths.shift();\n  }\n  return paths;\n};\nvar splitRoutingPath = (routePath) => {\n  const { groups, path } = extractGroupsFromPath(routePath);\n  const paths = splitPath(path);\n  return replaceGroupMarks(paths, groups);\n};\nvar extractGroupsFromPath = (path) => {\n  const groups = [];\n  path = path.replace(/\\{[^}]+\\}/g, (match, index) => {\n    const mark = `@${index}`;\n    groups.push([mark, match]);\n    return mark;\n  });\n  return { groups, path };\n};\nvar replaceGroupMarks = (paths, groups) => {\n  for (let i = groups.length - 1; i >= 0; i--) {\n    const [mark] = groups[i];\n    for (let j = paths.length - 1; j >= 0; j--) {\n      if (paths[j].includes(mark)) {\n        paths[j] = paths[j].replace(mark, groups[i][1]);\n        break;\n      }\n    }\n  }\n  return paths;\n};\nvar patternCache = {};\nvar getPattern = (label) => {\n  if (label === \"*\") {\n    return \"*\";\n  }\n  const match = label.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n  if (match) {\n    if (!patternCache[label]) {\n      if (match[2]) {\n        patternCache[label] = [label, match[1], new RegExp(\"^\" + match[2] + \"$\")];\n      } else {\n        patternCache[label] = [label, match[1], true];\n      }\n    }\n    return patternCache[label];\n  }\n  return null;\n};\nvar getPath = (request) => {\n  const match = request.url.match(/^https?:\\/\\/[^/]+(\\/[^?]*)/);\n  return match ? match[1] : \"\";\n};\nvar getQueryStrings = (url) => {\n  const queryIndex = url.indexOf(\"?\", 8);\n  return queryIndex === -1 ? \"\" : \"?\" + url.slice(queryIndex + 1);\n};\nvar getPathNoStrict = (request) => {\n  const result = getPath(request);\n  return result.length > 1 && result[result.length - 1] === \"/\" ? result.slice(0, -1) : result;\n};\nvar mergePath = (...paths) => {\n  let p = \"\";\n  let endsWithSlash = false;\n  for (let path of paths) {\n    if (p[p.length - 1] === \"/\") {\n      p = p.slice(0, -1);\n      endsWithSlash = true;\n    }\n    if (path[0] !== \"/\") {\n      path = `/${path}`;\n    }\n    if (path === \"/\" && endsWithSlash) {\n      p = `${p}/`;\n    } else if (path !== \"/\") {\n      p = `${p}${path}`;\n    }\n    if (path === \"/\" && p === \"\") {\n      p = \"/\";\n    }\n  }\n  return p;\n};\nvar checkOptionalParameter = (path) => {\n  if (!path.match(/\\:.+\\?$/)) {\n    return null;\n  }\n  const segments = path.split(\"/\");\n  const results = [];\n  let basePath = \"\";\n  segments.forEach((segment) => {\n    if (segment !== \"\" && !/\\:/.test(segment)) {\n      basePath += \"/\" + segment;\n    } else if (/\\:/.test(segment)) {\n      if (/\\?/.test(segment)) {\n        if (results.length === 0 && basePath === \"\") {\n          results.push(\"/\");\n        } else {\n          results.push(basePath);\n        }\n        const optionalSegment = segment.replace(\"?\", \"\");\n        basePath += \"/\" + optionalSegment;\n        results.push(basePath);\n      } else {\n        basePath += \"/\" + segment;\n      }\n    }\n  });\n  return results.filter((v, i, a) => a.indexOf(v) === i);\n};\nvar _decodeURI = (value) => {\n  if (!/[%+]/.test(value)) {\n    return value;\n  }\n  if (value.indexOf(\"+\") !== -1) {\n    value = value.replace(/\\+/g, \" \");\n  }\n  return /%/.test(value) ? decodeURIComponent_(value) : value;\n};\nvar _getQueryParam = (url, key, multiple) => {\n  let encoded;\n  if (!multiple && key && !/[%+]/.test(key)) {\n    let keyIndex2 = url.indexOf(`?${key}`, 8);\n    if (keyIndex2 === -1) {\n      keyIndex2 = url.indexOf(`&${key}`, 8);\n    }\n    while (keyIndex2 !== -1) {\n      const trailingKeyCode = url.charCodeAt(keyIndex2 + key.length + 1);\n      if (trailingKeyCode === 61) {\n        const valueIndex = keyIndex2 + key.length + 2;\n        const endIndex = url.indexOf(\"&\", valueIndex);\n        return _decodeURI(url.slice(valueIndex, endIndex === -1 ? void 0 : endIndex));\n      } else if (trailingKeyCode == 38 || isNaN(trailingKeyCode)) {\n        return \"\";\n      }\n      keyIndex2 = url.indexOf(`&${key}`, keyIndex2 + 1);\n    }\n    encoded = /[%+]/.test(url);\n    if (!encoded) {\n      return void 0;\n    }\n  }\n  const results = {};\n  encoded ?? (encoded = /[%+]/.test(url));\n  let keyIndex = url.indexOf(\"?\", 8);\n  while (keyIndex !== -1) {\n    const nextKeyIndex = url.indexOf(\"&\", keyIndex + 1);\n    let valueIndex = url.indexOf(\"=\", keyIndex);\n    if (valueIndex > nextKeyIndex && nextKeyIndex !== -1) {\n      valueIndex = -1;\n    }\n    let name = url.slice(\n      keyIndex + 1,\n      valueIndex === -1 ? nextKeyIndex === -1 ? void 0 : nextKeyIndex : valueIndex\n    );\n    if (encoded) {\n      name = _decodeURI(name);\n    }\n    keyIndex = nextKeyIndex;\n    if (name === \"\") {\n      continue;\n    }\n    let value;\n    if (valueIndex === -1) {\n      value = \"\";\n    } else {\n      value = url.slice(valueIndex + 1, nextKeyIndex === -1 ? void 0 : nextKeyIndex);\n      if (encoded) {\n        value = _decodeURI(value);\n      }\n    }\n    if (multiple) {\n      if (!(results[name] && Array.isArray(results[name]))) {\n        results[name] = [];\n      }\n      ;\n      results[name].push(value);\n    } else {\n      results[name] ?? (results[name] = value);\n    }\n  }\n  return key ? results[key] : results;\n};\nvar getQueryParam = _getQueryParam;\nvar getQueryParams = (url, key) => {\n  return _getQueryParam(url, key, true);\n};\nvar decodeURIComponent_ = decodeURIComponent;\nexport {\n  checkOptionalParameter,\n  decodeURIComponent_,\n  getPath,\n  getPathNoStrict,\n  getPattern,\n  getQueryParam,\n  getQueryParams,\n  getQueryStrings,\n  mergePath,\n  splitPath,\n  splitRoutingPath\n};\n", "// src/utils/cookie.ts\nimport { decodeURIComponent_ } from \"./url.js\";\nvar algorithm = { name: \"HMAC\", hash: \"SHA-256\" };\nvar getCryptoKey = async (secret) => {\n  const secretBuf = typeof secret === \"string\" ? new TextEncoder().encode(secret) : secret;\n  return await crypto.subtle.importKey(\"raw\", secretBuf, algorithm, false, [\"sign\", \"verify\"]);\n};\nvar makeSignature = async (value, secret) => {\n  const key = await getCryptoKey(secret);\n  const signature = await crypto.subtle.sign(algorithm.name, key, new TextEncoder().encode(value));\n  return btoa(String.fromCharCode(...new Uint8Array(signature)));\n};\nvar verifySignature = async (base64Signature, value, secret) => {\n  try {\n    const signatureBinStr = atob(base64Signature);\n    const signature = new Uint8Array(signatureBinStr.length);\n    for (let i = 0; i < signatureBinStr.length; i++) {\n      signature[i] = signatureBinStr.charCodeAt(i);\n    }\n    return await crypto.subtle.verify(algorithm, secret, signature, new TextEncoder().encode(value));\n  } catch (e) {\n    return false;\n  }\n};\nvar validCookieNameRegEx = /^[\\w!#$%&'*.^`|~+-]+$/;\nvar validCookieValueRegEx = /^[ !#-:<-[\\]-~]*$/;\nvar parse = (cookie, name) => {\n  const pairs = cookie.trim().split(\";\");\n  return pairs.reduce((parsedCookie, pairStr) => {\n    pairStr = pairStr.trim();\n    const valueStartPos = pairStr.indexOf(\"=\");\n    if (valueStartPos === -1) {\n      return parsedCookie;\n    }\n    const cookieName = pairStr.substring(0, valueStartPos).trim();\n    if (name && name !== cookieName || !validCookieNameRegEx.test(cookieName)) {\n      return parsedCookie;\n    }\n    let cookieValue = pairStr.substring(valueStartPos + 1).trim();\n    if (cookieValue.startsWith('\"') && cookieValue.endsWith('\"')) {\n      cookieValue = cookieValue.slice(1, -1);\n    }\n    if (validCookieValueRegEx.test(cookieValue)) {\n      parsedCookie[cookieName] = decodeURIComponent_(cookieValue);\n    }\n    return parsedCookie;\n  }, {});\n};\nvar parseSigned = async (cookie, secret, name) => {\n  const parsedCookie = {};\n  const secretKey = await getCryptoKey(secret);\n  for (const [key, value] of Object.entries(parse(cookie, name))) {\n    const signatureStartPos = value.lastIndexOf(\".\");\n    if (signatureStartPos < 1) {\n      continue;\n    }\n    const signedValue = value.substring(0, signatureStartPos);\n    const signature = value.substring(signatureStartPos + 1);\n    if (signature.length !== 44 || !signature.endsWith(\"=\")) {\n      continue;\n    }\n    const isVerified = await verifySignature(signature, signedValue, secretKey);\n    parsedCookie[key] = isVerified ? signedValue : false;\n  }\n  return parsedCookie;\n};\nvar _serialize = (name, value, opt = {}) => {\n  let cookie = `${name}=${value}`;\n  if (opt && typeof opt.maxAge === \"number\" && opt.maxAge >= 0) {\n    cookie += `; Max-Age=${Math.floor(opt.maxAge)}`;\n  }\n  if (opt.domain) {\n    cookie += `; Domain=${opt.domain}`;\n  }\n  if (opt.path) {\n    cookie += `; Path=${opt.path}`;\n  }\n  if (opt.expires) {\n    cookie += `; Expires=${opt.expires.toUTCString()}`;\n  }\n  if (opt.httpOnly) {\n    cookie += \"; HttpOnly\";\n  }\n  if (opt.secure) {\n    cookie += \"; Secure\";\n  }\n  if (opt.sameSite) {\n    cookie += `; SameSite=${opt.sameSite}`;\n  }\n  if (opt.partitioned) {\n    cookie += \"; Partitioned\";\n  }\n  return cookie;\n};\nvar serialize = (name, value, opt = {}) => {\n  value = encodeURIComponent(value);\n  return _serialize(name, value, opt);\n};\nvar serializeSigned = async (name, value, secret, opt = {}) => {\n  const signature = await makeSignature(value, secret);\n  value = `${value}.${signature}`;\n  value = encodeURIComponent(value);\n  return _serialize(name, value, opt);\n};\nexport {\n  parse,\n  parseSigned,\n  serialize,\n  serializeSigned\n};\n", "// src/helper/cookie/index.ts\nimport { parse, parseSigned, serialize, serializeSigned } from \"../../utils/cookie.js\";\nvar getCookie = (c, key) => {\n  const cookie = c.req.raw.headers.get(\"Cookie\");\n  if (typeof key === \"string\") {\n    if (!cookie) {\n      return void 0;\n    }\n    const obj2 = parse(cookie, key);\n    return obj2[key];\n  }\n  if (!cookie) {\n    return {};\n  }\n  const obj = parse(cookie);\n  return obj;\n};\nvar getSignedCookie = async (c, secret, key) => {\n  const cookie = c.req.raw.headers.get(\"Cookie\");\n  if (typeof key === \"string\") {\n    if (!cookie) {\n      return void 0;\n    }\n    const obj2 = await parseSigned(cookie, secret, key);\n    return obj2[key];\n  }\n  if (!cookie) {\n    return {};\n  }\n  const obj = await parseSigned(cookie, secret);\n  return obj;\n};\nvar setCookie = (c, name, value, opt) => {\n  const cookie = serialize(name, value, { path: \"/\", ...opt });\n  c.header(\"set-cookie\", cookie, { append: true });\n};\nvar setSignedCookie = async (c, name, value, secret, opt) => {\n  const cookie = await serializeSigned(name, value, secret, { path: \"/\", ...opt });\n  c.header(\"set-cookie\", cookie, { append: true });\n};\nvar deleteCookie = (c, name, opt) => {\n  setCookie(c, name, \"\", { ...opt, maxAge: 0 });\n};\nexport {\n  deleteCookie,\n  getCookie,\n  getSignedCookie,\n  setCookie,\n  setSignedCookie\n};\n", "// src/utils/crypto.ts\nvar sha256 = async (data) => {\n  const algorithm = { name: \"SHA-256\", alias: \"sha256\" };\n  const hash = await createHash(data, algorithm);\n  return hash;\n};\nvar sha1 = async (data) => {\n  const algorithm = { name: \"SHA-1\", alias: \"sha1\" };\n  const hash = await createHash(data, algorithm);\n  return hash;\n};\nvar md5 = async (data) => {\n  const algorithm = { name: \"MD5\", alias: \"md5\" };\n  const hash = await createHash(data, algorithm);\n  return hash;\n};\nvar createHash = async (data, algorithm) => {\n  let sourceBuffer;\n  if (data instanceof ReadableStream) {\n    let body = \"\";\n    const reader = data.getReader();\n    await reader?.read().then(async (chuck) => {\n      const value = await createHash(chuck.value || \"\", algorithm);\n      body += value;\n    });\n    return body;\n  }\n  if (ArrayBuffer.isView(data) || data instanceof ArrayBuffer) {\n    sourceBuffer = data;\n  } else {\n    if (typeof data === \"object\") {\n      data = JSON.stringify(data);\n    }\n    sourceBuffer = new TextEncoder().encode(String(data));\n  }\n  if (crypto && crypto.subtle) {\n    const buffer = await crypto.subtle.digest(\n      {\n        name: algorithm.name\n      },\n      sourceBuffer\n    );\n    const hash = Array.prototype.map.call(new Uint8Array(buffer), (x) => (\"00\" + x.toString(16)).slice(-2)).join(\"\");\n    return hash;\n  }\n  return null;\n};\nexport {\n  createHash,\n  md5,\n  sha1,\n  sha256\n};\n", "// src/utils/buffer.ts\nimport { sha256 } from \"./crypto.js\";\nvar equal = (a, b) => {\n  if (a === b) {\n    return true;\n  }\n  if (a.byteLength !== b.byteLength) {\n    return false;\n  }\n  const va = new DataView(a);\n  const vb = new DataView(b);\n  let i = va.byteLength;\n  while (i--) {\n    if (va.getUint8(i) !== vb.getUint8(i)) {\n      return false;\n    }\n  }\n  return true;\n};\nvar timingSafeEqual = async (a, b, hashFunction) => {\n  if (!hashFunction) {\n    hashFunction = sha256;\n  }\n  const sa = await hashFunction(a);\n  const sb = await hashFunction(b);\n  if (!sa || !sb) {\n    return false;\n  }\n  return sa === sb && a === b;\n};\nvar bufferToString = (buffer) => {\n  if (buffer instanceof ArrayBuffer) {\n    const enc = new TextDecoder(\"utf-8\");\n    return enc.decode(buffer);\n  }\n  return buffer;\n};\nvar bufferToFormData = (arrayBuffer, contentType) => {\n  const response = new Response(arrayBuffer, {\n    headers: {\n      \"Content-Type\": contentType\n    }\n  });\n  return response.formData();\n};\nexport {\n  bufferToFormData,\n  bufferToString,\n  equal,\n  timingSafeEqual\n};\n", "// src/validator/validator.ts\nimport { getCookie } from \"../helper/cookie/index.js\";\nimport { bufferToFormData } from \"../utils/buffer.js\";\nvar validator = (target, validationFunc) => {\n  return async (c, next) => {\n    let value = {};\n    const contentType = c.req.header(\"Content-Type\");\n    switch (target) {\n      case \"json\":\n        if (!contentType || !contentType.startsWith(\"application/json\")) {\n          const message = `Invalid HTTP header: Content-Type=${contentType}`;\n          console.error(message);\n          return c.json(\n            {\n              success: false,\n              message\n            },\n            400\n          );\n        }\n        try {\n          const arrayBuffer = c.req.bodyCache.arrayBuffer ?? await c.req.raw.arrayBuffer();\n          value = await new Response(arrayBuffer).json();\n          c.req.bodyCache.json = value;\n          c.req.bodyCache.arrayBuffer = arrayBuffer;\n        } catch {\n          console.error(\"Error: Malformed JSON in request body\");\n          return c.json(\n            {\n              success: false,\n              message: \"Malformed JSON in request body\"\n            },\n            400\n          );\n        }\n        break;\n      case \"form\": {\n        try {\n          const contentType2 = c.req.header(\"Content-Type\");\n          if (contentType2) {\n            const arrayBuffer = c.req.bodyCache.arrayBuffer ?? await c.req.raw.arrayBuffer();\n            const formData = await bufferToFormData(arrayBuffer, contentType2);\n            const form = {};\n            formData.forEach((value2, key) => {\n              form[key] = value2;\n            });\n            value = form;\n            c.req.bodyCache.formData = formData;\n            c.req.bodyCache.arrayBuffer = arrayBuffer;\n          }\n        } catch (e) {\n          let message = \"Malformed FormData request.\";\n          message += e instanceof Error ? ` ${e.message}` : ` ${String(e)}`;\n          return c.json(\n            {\n              success: false,\n              message\n            },\n            400\n          );\n        }\n        break;\n      }\n      case \"query\":\n        value = Object.fromEntries(\n          Object.entries(c.req.queries()).map(([k, v]) => {\n            return v.length === 1 ? [k, v[0]] : [k, v];\n          })\n        );\n        break;\n      case \"queries\":\n        value = c.req.queries();\n        console.log(\"Warnings: Validate type `queries` is deprecated. Use `query` instead.\");\n        break;\n      case \"param\":\n        value = c.req.param();\n        break;\n      case \"header\":\n        value = c.req.header();\n        break;\n      case \"cookie\":\n        value = getCookie(c);\n        break;\n    }\n    const res = await validationFunc(value, c);\n    if (res instanceof Response) {\n      return res;\n    }\n    c.req.addValidatedData(target, res);\n    await next();\n  };\n};\nexport {\n  validator\n};\n", "import { validator } from 'hono/validator';\nexport const zValidator = (target, schema, hook) => validator(target, async (value, c) => {\n    const result = await schema.safeParseAsync(value);\n    if (hook) {\n        const hookResult = hook({ data: value, ...result }, c);\n        if (hookResult) {\n            if (hookResult instanceof Response || hookResult instanceof Promise) {\n                return hookResult;\n            }\n            if ('response' in hookResult) {\n                return hookResult.response;\n            }\n        }\n    }\n    if (!result.success) {\n        return c.json(result, 400);\n    }\n    const data = result.data;\n    return data;\n});\n", "type DateFormat = 'DD-MM-YYYY' | 'MM-DD-YYYY' | 'D MMM, YYYY';\n\nexport function formatDate(date: Date, format: DateFormat = 'D MMM, YYYY') {\n\tswitch (format) {\n\t\tcase 'D MMM, YYYY':\n\t\t\treturn `${date.getDate()} ${getMonth(date)}, ${date.getFullYear()}`;\n\t\tcase 'DD-MM-YYYY':\n\t\t\treturn `${date.getDate()}-${date.getMonth()}-${date.getFullYear()}`;\n\t\tcase 'MM-DD-YYYY':\n\t\t\treturn `${date.getMonth()}-${date.getDate()}-${date.getFullYear()}`;\n\t}\n}\n\nfunction getMonth(date: Date) {\n\treturn new Intl.DateTimeFormat('en-US', { month: 'short' }).format(date);\n}\n\nexport function getDaysDiff(from: Date, to: Date): number {\n\tconst timeDiff = Math.abs(from.getTime() - to.getTime());\n\treturn Math.ceil(timeDiff / (1000 * 3600 * 24));\n}\n\nexport function isFutureDate(date: Date): boolean {\n\tconst now = new Date().getTime();\n\treturn date.getTime() > now;\n}\n\nexport function addDays(addTo: Date, days: number): Date {\n\tconst date = new Date(addTo.valueOf());\n\tdate.setDate(date.getDate() + days);\n\treturn date;\n}\n\nexport type Timestamp = number;\n\nexport function dateFromTimestamp(timestamp: Timestamp): Date {\n\treturn new Date(timestamp);\n}\n\nexport function formatTimestamp(timestamp: Timestamp, format?: DateFormat): string {\n\treturn formatDate(dateFromTimestamp(timestamp), format);\n}\n\nexport function isFutureTimestamp(date: Timestamp): boolean {\n\treturn isFutureDate(dateFromTimestamp(date));\n}\n\nexport function getDaysDiffTimestamp(from: Timestamp, to: Timestamp): number {\n\treturn getDaysDiff(dateFromTimestamp(from), dateFromTimestamp(to));\n}\n", "export type DataErrorType = 'not-found' | 'creating-failed'\n\nexport class DataError extends Error {\n\tconstructor(public readonly type: DataErrorType, message?: string) {\n\t\tsuper(message);\n\t}\n}", "import { and, eq, isNull } from 'drizzle-orm';\nimport { type TaskDataModel, tasks } from '@repo/db';\nimport type { DatabasePool } from '@repo/db';\nimport { Task, type TaskId } from './model';\nimport { DataError } from '../../errors/DataError';\n\nexport async function queryAllTasks(db: DatabasePool): Promise<Task[]> {\n  try {\n    const result = await db\n      .select()\n      .from(tasks).all();\n\n    return result.map(mapTaskToDomainModel);\n  } catch (error) {\n    console.log(error);\n    return []\n  }\n}\n\nexport async function deleteTaskById(id: TaskId, db: DatabasePool): Promise<void> {\n  const result = await db.delete(tasks).where(eq(tasks.id, id)).returning({ id: tasks.id });\n\n  if (result.length === 0) {\n    throw new DataError('not-found', \"Task doesn't exists\");\n  }\n}\n\nexport async function softDeleteTaskById(id: TaskId, db: DatabasePool): Promise<TaskId> {\n  const result = await db\n    .update(tasks)\n    .set({ deletedAt: new Date().getTime() })\n    .where(eq(tasks.id, id))\n    .returning({ id: tasks.id });\n\n  if (result.length === 0) {\n    throw new DataError('not-found', \"Task doesn't exists\");\n  }\n\n  return result[0].id;\n}\n\nexport async function createTask(task: Task, db: DatabasePool): Promise<Task> {\n  const result = await db\n    .insert(tasks)\n    .values({ ...task })\n    .returning({\n      id: tasks.id,\n      name: tasks.name,\n      description: tasks.description,\n      priority: tasks.priority,\n      category: tasks.category,\n      dueDate: tasks.dueDate,\n      createdAt: tasks.createdAt\n    });\n\n  if (result.length === 0) {\n    throw new DataError('creating-failed', 'Failed to create the task');\n  }\n\n  return mapTaskToDomainModel(result[0]);\n}\n\nexport type TaskUpdateInput = Partial<TaskDataModel>;\n\nexport async function updateTask(\n  id: TaskId,\n  taskInput: TaskUpdateInput,\n  db: DatabasePool\n): Promise<Task> {\n  const result = await db\n    .update(tasks)\n    .set({ ...taskInput })\n    .where(eq(tasks.id, id))\n    .returning({\n      id: tasks.id,\n      name: tasks.name,\n      description: tasks.description,\n      priority: tasks.priority,\n      category: tasks.category,\n      dueDate: tasks.dueDate,\n      createdAt: tasks.createdAt\n    });\n\n  if (result.length === 0) {\n    throw new DataError('not-found', \"Task doesn't exists\");\n  }\n\n  return mapTaskToDomainModel(result[0]);\n}\n\nexport function mapTaskToDomainModel(task: Omit<TaskDataModel, 'deletedAt'>): Task {\n  return {\n    id: task.id,\n    name: task.name,\n    description: task.description ?? undefined,\n    category: task.category ?? undefined,\n    dueDate: task.dueDate ?? undefined,\n    priority: task.priority ?? undefined,\n    createdAt: task.createdAt\n  };\n}\n", "import type { DatabasePool } from '@repo/db';\nimport { type FinishedTaskDataModel, tasks } from '@repo/db';\nimport { DataError } from '../../errors/DataError';\nimport { mapTaskToDomainModel } from '../task/queries';\nimport { desc, eq, isNotNull } from 'drizzle-orm';\nimport type { FinishedTask } from './model';\nimport type { Task, TaskId } from '../task/model';\n\nexport async function getAllFinishedTasks(db: DatabasePool): Promise<FinishedTask[]> {\n\tconst result = await db\n\t\t.select()\n\t\t.from(tasks)\n\t\t.where(isNotNull(tasks.resolutionDate))\n\t\t.orderBy(desc(tasks.resolutionDate));\n\n\treturn result.map(mapToDomainModel);\n}\n\nexport async function getFinishedTask(id: TaskId, db: DatabasePool): Promise<FinishedTask> {\n\tconst result = await db.select().from(tasks).where(eq(tasks.id, id)).limit(1);\n\n\tif (result.length === 0) {\n\t\tthrow new DataError('not-found', \"Task doesn't exists\");\n\t}\n\n\treturn mapToDomainModel(result[0]);\n}\n\nexport async function updateTaskResolutionDate(\n\tid: TaskId,\n\tdate: Date,\n\tdb: DatabasePool\n): Promise<void> {\n\tconst result = await db\n\t\t.update(tasks)\n\t\t.set({ resolutionDate: date.getTime() })\n\t\t.where(eq(tasks.id, id))\n\t\t.returning({ id: tasks.id });\n\n\tif (result.length === 0) {\n\t\tthrow new DataError('not-found', \"Task doesn't exists\");\n\t}\n}\n\nexport async function restoreTask(id: TaskId, db: DatabasePool): Promise<Task> {\n\tconst result = await db\n\t\t.update(tasks)\n\t\t.set({ resolutionDate: null })\n\t\t.where(eq(tasks.id, id))\n\t\t.returning();\n\n\tif (result.length === 0) {\n\t\tthrow new DataError('not-found', \"Task doesn't exists\");\n\t}\n\n\treturn mapTaskToDomainModel(result[0]);\n}\n\nfunction mapToDomainModel(task: FinishedTaskDataModel): FinishedTask {\n\treturn {\n\t\tid: task.id,\n\t\tname: task.name,\n\t\tdescription: task.description ?? undefined,\n\t\tcategory: task.category ?? undefined,\n\t\tdueDate: task.dueDate ?? undefined,\n\t\tpriority: task.priority ?? undefined,\n\t\tcreatedAt: task.createdAt,\n\t\tresolutionDate: task.resolutionDate!\n\t};\n}\n", "import { addDays, formatTimestamp, getDaysDiffTimestamp, isFutureTimestamp } from '@repo/date-utils';\nimport type { DatabasePool } from '@repo/db';\nimport { updateTask } from '../task/queries';\nimport type { Task, TaskId } from '../task/model';\nimport type { FinishedTask, FinishedTaskGroup } from './model';\nimport * as queries from './queries';\n\nexport async function getAllFinishedTasks(db: DatabasePool): Promise<FinishedTask[]> {\n  return queries.getAllFinishedTasks(db);\n}\n\nexport async function getAllGroupedFinishedTasks(db: DatabasePool): Promise<FinishedTaskGroup[]> {\n  const tasks = await queries.getAllFinishedTasks(db);\n\n  return Object.entries(\n    tasks.reduce(\n      (acc, task) => {\n        const date = formatTimestamp(task.resolutionDate, 'MM-DD-YYYY');\n        acc[date] ??= [];\n        acc[date].push(task);\n        return acc;\n      },\n      {} as Record<string, FinishedTask[]>\n    )\n  ).map(([date, list]) => ({ date, list }));\n}\n\nexport async function createFinishedTask(id: TaskId, db: DatabasePool): Promise<void> {\n  const date = new Date();\n  await queries.updateTaskResolutionDate(id, date, db);\n}\n\nexport async function restoreFinishedTask(id: TaskId, db: DatabasePool): Promise<Task> {\n  const { resolutionDate } = await queries.getFinishedTask(id, db);\n\n  let task = await queries.restoreTask(id, db);\n  if (task.dueDate && !isFutureTimestamp(task.dueDate)) {\n    const daysDiff = getDaysDiffTimestamp(task.createdAt, resolutionDate);\n    const dueDate = addDays(new Date(), daysDiff).getTime();\n    task = await updateTask(id, { dueDate }, db);\n  }\n  return task;\n}\n", "// src/helper/html/index.ts\nimport { escapeToBuffer, stringBufferToString } from \"../../utils/html.js\";\nvar raw = (value, callbacks) => {\n  const escapedString = new String(value);\n  escapedString.isEscaped = true;\n  escapedString.callbacks = callbacks;\n  return escapedString;\n};\nvar html = (strings, ...values) => {\n  const buffer = [\"\"];\n  for (let i = 0, len = strings.length - 1; i < len; i++) {\n    buffer[0] += strings[i];\n    const children = values[i] instanceof Array ? values[i].flat(Infinity) : [values[i]];\n    for (let i2 = 0, len2 = children.length; i2 < len2; i2++) {\n      const child = children[i2];\n      if (typeof child === \"string\") {\n        escapeToBuffer(child, buffer);\n      } else if (typeof child === \"boolean\" || child === null || child === void 0) {\n        continue;\n      } else if (typeof child === \"object\" && child.isEscaped || typeof child === \"number\") {\n        const tmp = child.toString();\n        if (tmp instanceof Promise) {\n          buffer.unshift(\"\", tmp);\n        } else {\n          buffer[0] += tmp;\n        }\n      } else if (child instanceof Promise) {\n        buffer.unshift(\"\", child);\n      } else {\n        escapeToBuffer(child.toString(), buffer);\n      }\n    }\n  }\n  buffer[0] += strings[strings.length - 1];\n  return buffer.length === 1 ? raw(buffer[0]) : stringBufferToString(buffer);\n};\nexport {\n  html,\n  raw\n};\n", "// src/utils/html.ts\nimport { raw } from \"../helper/html/index.js\";\nvar HtmlEscapedCallbackPhase = {\n  Stringify: 1,\n  BeforeStream: 2,\n  Stream: 3\n};\nvar escapeRe = /[&<>'\"]/;\nvar stringBufferToString = async (buffer) => {\n  let str = \"\";\n  const callbacks = [];\n  for (let i = buffer.length - 1; ; i--) {\n    str += buffer[i];\n    i--;\n    if (i < 0) {\n      break;\n    }\n    let r = await buffer[i];\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    const isEscaped = r.isEscaped;\n    r = await (typeof r === \"object\" ? r.toString() : r);\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    if (r.isEscaped ?? isEscaped) {\n      str += r;\n    } else {\n      const buf = [str];\n      escapeToBuffer(r, buf);\n      str = buf[0];\n    }\n  }\n  return raw(str, callbacks);\n};\nvar escapeToBuffer = (str, buffer) => {\n  const match = str.search(escapeRe);\n  if (match === -1) {\n    buffer[0] += str;\n    return;\n  }\n  let escape;\n  let index;\n  let lastIndex = 0;\n  for (index = match; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        escape = \"&quot;\";\n        break;\n      case 39:\n        escape = \"&#39;\";\n        break;\n      case 38:\n        escape = \"&amp;\";\n        break;\n      case 60:\n        escape = \"&lt;\";\n        break;\n      case 62:\n        escape = \"&gt;\";\n        break;\n      default:\n        continue;\n    }\n    buffer[0] += str.substring(lastIndex, index) + escape;\n    lastIndex = index + 1;\n  }\n  buffer[0] += str.substring(lastIndex, index);\n};\nvar resolveCallback = async (str, phase, preserveCallbacks, context, buffer) => {\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return Promise.resolve(str);\n  }\n  if (buffer) {\n    buffer[0] += str;\n  } else {\n    buffer = [str];\n  }\n  const resStr = Promise.all(callbacks.map((c) => c({ phase, buffer, context }))).then(\n    (res) => Promise.all(\n      res.filter(Boolean).map((str2) => resolveCallback(str2, phase, false, context, buffer))\n    ).then(() => buffer[0])\n  );\n  if (preserveCallbacks) {\n    return raw(await resStr, callbacks);\n  } else {\n    return resStr;\n  }\n};\nexport {\n  HtmlEscapedCallbackPhase,\n  escapeToBuffer,\n  resolveCallback,\n  stringBufferToString\n};\n", "// src/utils/stream.ts\nvar StreamingApi = class {\n  constructor(writable, _readable) {\n    this.abortSubscribers = [];\n    this.writable = writable;\n    this.writer = writable.getWriter();\n    this.encoder = new TextEncoder();\n    const reader = _readable.getReader();\n    this.responseReadable = new ReadableStream({\n      async pull(controller) {\n        const { done, value } = await reader.read();\n        done ? controller.close() : controller.enqueue(value);\n      },\n      cancel: () => {\n        this.abortSubscribers.forEach((subscriber) => subscriber());\n      }\n    });\n  }\n  async write(input) {\n    try {\n      if (typeof input === \"string\") {\n        input = this.encoder.encode(input);\n      }\n      await this.writer.write(input);\n    } catch (e) {\n    }\n    return this;\n  }\n  async writeln(input) {\n    await this.write(input + \"\\n\");\n    return this;\n  }\n  sleep(ms) {\n    return new Promise((res) => setTimeout(res, ms));\n  }\n  async close() {\n    try {\n      await this.writer.close();\n    } catch (e) {\n    }\n  }\n  async pipe(body) {\n    this.writer.releaseLock();\n    await body.pipeTo(this.writable, { preventClose: true });\n    this.writer = this.writable.getWriter();\n  }\n  async onAbort(listener) {\n    this.abortSubscribers.push(listener);\n  }\n};\nexport {\n  StreamingApi\n};\n", "var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\n\n// src/context.ts\nimport { serialize } from \"./utils/cookie.js\";\nimport { resolveCallback, HtmlEscapedCallbackPhase } from \"./utils/html.js\";\nimport { StreamingApi } from \"./utils/stream.js\";\nvar TEXT_PLAIN = \"text/plain; charset=UTF-8\";\nvar setHeaders = (headers, map = {}) => {\n  Object.entries(map).forEach(([key, value]) => headers.set(key, value));\n  return headers;\n};\nvar _status, _executionCtx, _headers, _preparedHeaders, _res, _isFresh;\nvar Context = class {\n  constructor(req, options) {\n    this.env = {};\n    this._var = {};\n    this.finalized = false;\n    this.error = void 0;\n    __privateAdd(this, _status, 200);\n    __privateAdd(this, _executionCtx, void 0);\n    __privateAdd(this, _headers, void 0);\n    __privateAdd(this, _preparedHeaders, void 0);\n    __privateAdd(this, _res, void 0);\n    __privateAdd(this, _isFresh, true);\n    this.renderer = (content) => this.html(content);\n    this.notFoundHandler = () => new Response();\n    this.render = (...args) => this.renderer(...args);\n    this.setRenderer = (renderer) => {\n      this.renderer = renderer;\n    };\n    this.header = (name, value, options) => {\n      if (value === void 0) {\n        if (__privateGet(this, _headers)) {\n          __privateGet(this, _headers).delete(name);\n        } else if (__privateGet(this, _preparedHeaders)) {\n          delete __privateGet(this, _preparedHeaders)[name.toLocaleLowerCase()];\n        }\n        if (this.finalized) {\n          this.res.headers.delete(name);\n        }\n        return;\n      }\n      if (options?.append) {\n        if (!__privateGet(this, _headers)) {\n          __privateSet(this, _isFresh, false);\n          __privateSet(this, _headers, new Headers(__privateGet(this, _preparedHeaders)));\n          __privateSet(this, _preparedHeaders, {});\n        }\n        __privateGet(this, _headers).append(name, value);\n      } else {\n        if (__privateGet(this, _headers)) {\n          __privateGet(this, _headers).set(name, value);\n        } else {\n          __privateGet(this, _preparedHeaders) ?? __privateSet(this, _preparedHeaders, {});\n          __privateGet(this, _preparedHeaders)[name.toLowerCase()] = value;\n        }\n      }\n      if (this.finalized) {\n        if (options?.append) {\n          this.res.headers.append(name, value);\n        } else {\n          this.res.headers.set(name, value);\n        }\n      }\n    };\n    this.status = (status) => {\n      __privateSet(this, _isFresh, false);\n      __privateSet(this, _status, status);\n    };\n    this.set = (key, value) => {\n      this._var ?? (this._var = {});\n      this._var[key] = value;\n    };\n    this.get = (key) => {\n      return this._var ? this._var[key] : void 0;\n    };\n    this.newResponse = (data, arg, headers) => {\n      if (__privateGet(this, _isFresh) && !headers && !arg && __privateGet(this, _status) === 200) {\n        return new Response(data, {\n          headers: __privateGet(this, _preparedHeaders)\n        });\n      }\n      if (arg && typeof arg !== \"number\") {\n        const headers2 = setHeaders(new Headers(arg.headers), __privateGet(this, _preparedHeaders));\n        return new Response(data, {\n          headers: headers2,\n          status: arg.status\n        });\n      }\n      const status = typeof arg === \"number\" ? arg : __privateGet(this, _status);\n      __privateGet(this, _preparedHeaders) ?? __privateSet(this, _preparedHeaders, {});\n      __privateGet(this, _headers) ?? __privateSet(this, _headers, new Headers());\n      setHeaders(__privateGet(this, _headers), __privateGet(this, _preparedHeaders));\n      if (__privateGet(this, _res)) {\n        __privateGet(this, _res).headers.forEach((v, k) => {\n          __privateGet(this, _headers)?.set(k, v);\n        });\n        setHeaders(__privateGet(this, _headers), __privateGet(this, _preparedHeaders));\n      }\n      headers ?? (headers = {});\n      for (const [k, v] of Object.entries(headers)) {\n        if (typeof v === \"string\") {\n          __privateGet(this, _headers).set(k, v);\n        } else {\n          __privateGet(this, _headers).delete(k);\n          for (const v2 of v) {\n            __privateGet(this, _headers).append(k, v2);\n          }\n        }\n      }\n      return new Response(data, {\n        status,\n        headers: __privateGet(this, _headers)\n      });\n    };\n    this.body = (data, arg, headers) => {\n      return typeof arg === \"number\" ? this.newResponse(data, arg, headers) : this.newResponse(data, arg);\n    };\n    this.text = (text, arg, headers) => {\n      if (!__privateGet(this, _preparedHeaders)) {\n        if (__privateGet(this, _isFresh) && !headers && !arg) {\n          return new Response(text);\n        }\n        __privateSet(this, _preparedHeaders, {});\n      }\n      __privateGet(this, _preparedHeaders)[\"content-type\"] = TEXT_PLAIN;\n      return typeof arg === \"number\" ? this.newResponse(text, arg, headers) : this.newResponse(text, arg);\n    };\n    this.json = (object, arg, headers) => {\n      const body = JSON.stringify(object);\n      __privateGet(this, _preparedHeaders) ?? __privateSet(this, _preparedHeaders, {});\n      __privateGet(this, _preparedHeaders)[\"content-type\"] = \"application/json; charset=UTF-8\";\n      return typeof arg === \"number\" ? this.newResponse(body, arg, headers) : this.newResponse(body, arg);\n    };\n    this.jsonT = (object, arg, headers) => {\n      return this.json(object, arg, headers);\n    };\n    this.html = (html, arg, headers) => {\n      __privateGet(this, _preparedHeaders) ?? __privateSet(this, _preparedHeaders, {});\n      __privateGet(this, _preparedHeaders)[\"content-type\"] = \"text/html; charset=UTF-8\";\n      if (typeof html === \"object\") {\n        if (!(html instanceof Promise)) {\n          html = html.toString();\n        }\n        if (html instanceof Promise) {\n          return html.then((html2) => resolveCallback(html2, HtmlEscapedCallbackPhase.Stringify, false, {})).then((html2) => {\n            return typeof arg === \"number\" ? this.newResponse(html2, arg, headers) : this.newResponse(html2, arg);\n          });\n        }\n      }\n      return typeof arg === \"number\" ? this.newResponse(html, arg, headers) : this.newResponse(html, arg);\n    };\n    this.redirect = (location, status = 302) => {\n      __privateGet(this, _headers) ?? __privateSet(this, _headers, new Headers());\n      __privateGet(this, _headers).set(\"Location\", location);\n      return this.newResponse(null, status);\n    };\n    this.streamText = (cb, arg, headers) => {\n      headers ?? (headers = {});\n      this.header(\"content-type\", TEXT_PLAIN);\n      this.header(\"x-content-type-options\", \"nosniff\");\n      this.header(\"transfer-encoding\", \"chunked\");\n      return this.stream(cb, arg, headers);\n    };\n    this.stream = (cb, arg, headers) => {\n      const { readable, writable } = new TransformStream();\n      const stream = new StreamingApi(writable, readable);\n      cb(stream).finally(() => stream.close());\n      return typeof arg === \"number\" ? this.newResponse(stream.responseReadable, arg, headers) : this.newResponse(stream.responseReadable, arg);\n    };\n    this.cookie = (name, value, opt) => {\n      const cookie = serialize(name, value, opt);\n      this.header(\"set-cookie\", cookie, { append: true });\n    };\n    this.notFound = () => {\n      return this.notFoundHandler(this);\n    };\n    this.req = req;\n    if (options) {\n      __privateSet(this, _executionCtx, options.executionCtx);\n      this.env = options.env;\n      if (options.notFoundHandler) {\n        this.notFoundHandler = options.notFoundHandler;\n      }\n    }\n  }\n  get event() {\n    if (__privateGet(this, _executionCtx) && \"respondWith\" in __privateGet(this, _executionCtx)) {\n      return __privateGet(this, _executionCtx);\n    } else {\n      throw Error(\"This context has no FetchEvent\");\n    }\n  }\n  get executionCtx() {\n    if (__privateGet(this, _executionCtx)) {\n      return __privateGet(this, _executionCtx);\n    } else {\n      throw Error(\"This context has no ExecutionContext\");\n    }\n  }\n  get res() {\n    __privateSet(this, _isFresh, false);\n    return __privateGet(this, _res) || __privateSet(this, _res, new Response(\"404 Not Found\", { status: 404 }));\n  }\n  set res(_res2) {\n    __privateSet(this, _isFresh, false);\n    if (__privateGet(this, _res) && _res2) {\n      __privateGet(this, _res).headers.delete(\"content-type\");\n      for (const [k, v] of __privateGet(this, _res).headers.entries()) {\n        if (k === \"set-cookie\") {\n          const cookies = __privateGet(this, _res).headers.getSetCookie();\n          _res2.headers.delete(\"set-cookie\");\n          for (const cookie of cookies) {\n            _res2.headers.append(\"set-cookie\", cookie);\n          }\n        } else {\n          _res2.headers.set(k, v);\n        }\n      }\n    }\n    __privateSet(this, _res, _res2);\n    this.finalized = true;\n  }\n  get var() {\n    return { ...this._var };\n  }\n  get runtime() {\n    const global = globalThis;\n    if (global?.Deno !== void 0) {\n      return \"deno\";\n    }\n    if (global?.Bun !== void 0) {\n      return \"bun\";\n    }\n    if (typeof global?.WebSocketPair === \"function\") {\n      return \"workerd\";\n    }\n    if (typeof global?.EdgeRuntime === \"string\") {\n      return \"edge-light\";\n    }\n    if (global?.fastly !== void 0) {\n      return \"fastly\";\n    }\n    if (global?.__lagon__ !== void 0) {\n      return \"lagon\";\n    }\n    if (global?.process?.release?.name === \"node\") {\n      return \"node\";\n    }\n    return \"other\";\n  }\n};\n_status = new WeakMap();\n_executionCtx = new WeakMap();\n_headers = new WeakMap();\n_preparedHeaders = new WeakMap();\n_res = new WeakMap();\n_isFresh = new WeakMap();\nexport {\n  Context,\n  TEXT_PLAIN\n};\n", "// src/compose.ts\nimport { Context } from \"./context.js\";\nvar compose = (middleware, onError, onNotFound) => {\n  return (context, next) => {\n    let index = -1;\n    return dispatch(0);\n    async function dispatch(i) {\n      if (i <= index) {\n        throw new Error(\"next() called multiple times\");\n      }\n      index = i;\n      let res;\n      let isError = false;\n      let handler;\n      if (middleware[i]) {\n        handler = middleware[i][0][0];\n        if (context instanceof Context) {\n          context.req.routeIndex = i;\n        }\n      } else {\n        handler = i === middleware.length && next || void 0;\n      }\n      if (!handler) {\n        if (context instanceof Context && context.finalized === false && onNotFound) {\n          res = await onNotFound(context);\n        }\n      } else {\n        try {\n          res = await handler(context, () => {\n            return dispatch(i + 1);\n          });\n        } catch (err) {\n          if (err instanceof Error && context instanceof Context && onError) {\n            context.error = err;\n            res = await onError(err, context);\n            isError = true;\n          } else {\n            throw err;\n          }\n        }\n      }\n      if (res && (context.finalized === false || isError)) {\n        context.res = res;\n      }\n      return context;\n    }\n  };\n};\nexport {\n  compose\n};\n", "// src/http-exception.ts\nvar HTTPException = class extends Error {\n  constructor(status = 500, options) {\n    super(options?.message);\n    this.res = options?.res;\n    this.status = status;\n  }\n  getResponse() {\n    if (this.res) {\n      return this.res;\n    }\n    return new Response(this.message, {\n      status: this.status\n    });\n  }\n};\nexport {\n  HTTPException\n};\n", "// src/utils/body.ts\nvar parseBody = async (request, options = { all: false }) => {\n  const contentType = request.headers.get(\"Content-Type\");\n  if (isFormDataContent(contentType)) {\n    return parseFormData(request, options);\n  }\n  return {};\n};\nfunction isFormDataContent(contentType) {\n  if (contentType === null) {\n    return false;\n  }\n  return contentType.startsWith(\"multipart/form-data\") || contentType.startsWith(\"application/x-www-form-urlencoded\");\n}\nasync function parseFormData(request, options) {\n  const formData = await request.formData();\n  if (formData) {\n    return convertFormDataToBodyData(formData, options);\n  }\n  return {};\n}\nfunction convertFormDataToBodyData(formData, options) {\n  const form = {};\n  formData.forEach((value, key) => {\n    const shouldParseAllValues = options.all || key.endsWith(\"[]\");\n    if (!shouldParseAllValues) {\n      form[key] = value;\n    } else {\n      handleParsingAllValues(form, key, value);\n    }\n  });\n  return form;\n}\nvar handleParsingAllValues = (form, key, value) => {\n  if (form[key] && isArrayField(form[key])) {\n    appendToExistingArray(form[key], value);\n  } else if (form[key]) {\n    convertToNewArray(form, key, value);\n  } else {\n    form[key] = value;\n  }\n};\nfunction isArrayField(field) {\n  return Array.isArray(field);\n}\nvar appendToExistingArray = (arr, value) => {\n  arr.push(value);\n};\nvar convertToNewArray = (form, key, value) => {\n  form[key] = [form[key], value];\n};\nexport {\n  parseBody\n};\n", "var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\n\n// src/request.ts\nimport { parseBody } from \"./utils/body.js\";\nimport { parse } from \"./utils/cookie.js\";\nimport { getQueryParam, getQueryParams, decodeURIComponent_ } from \"./utils/url.js\";\nvar _validatedData, _matchResult;\nvar HonoRequest = class {\n  constructor(request, path = \"/\", matchResult = [[]]) {\n    __privateAdd(this, _validatedData, void 0);\n    __privateAdd(this, _matchResult, void 0);\n    this.routeIndex = 0;\n    this.bodyCache = {};\n    this.cachedBody = (key) => {\n      const { bodyCache, raw } = this;\n      const cachedBody = bodyCache[key];\n      if (cachedBody) {\n        return cachedBody;\n      }\n      if (bodyCache.arrayBuffer) {\n        return (async () => {\n          return await new Response(bodyCache.arrayBuffer)[key]();\n        })();\n      }\n      return bodyCache[key] = raw[key]();\n    };\n    this.raw = request;\n    this.path = path;\n    __privateSet(this, _matchResult, matchResult);\n    __privateSet(this, _validatedData, {});\n  }\n  param(key) {\n    return key ? this.getDecodedParam(key) : this.getAllDecodedParams();\n  }\n  getDecodedParam(key) {\n    const paramKey = __privateGet(this, _matchResult)[0][this.routeIndex][1][key];\n    const param = this.getParamValue(paramKey);\n    return param ? /\\%/.test(param) ? decodeURIComponent_(param) : param : void 0;\n  }\n  getAllDecodedParams() {\n    const decoded = {};\n    const keys = Object.keys(__privateGet(this, _matchResult)[0][this.routeIndex][1]);\n    for (const key of keys) {\n      const value = this.getParamValue(__privateGet(this, _matchResult)[0][this.routeIndex][1][key]);\n      if (value && typeof value === \"string\") {\n        decoded[key] = /\\%/.test(value) ? decodeURIComponent_(value) : value;\n      }\n    }\n    return decoded;\n  }\n  getParamValue(paramKey) {\n    return __privateGet(this, _matchResult)[1] ? __privateGet(this, _matchResult)[1][paramKey] : paramKey;\n  }\n  query(key) {\n    return getQueryParam(this.url, key);\n  }\n  queries(key) {\n    return getQueryParams(this.url, key);\n  }\n  header(name) {\n    if (name) {\n      return this.raw.headers.get(name.toLowerCase()) ?? void 0;\n    }\n    const headerData = {};\n    this.raw.headers.forEach((value, key) => {\n      headerData[key] = value;\n    });\n    return headerData;\n  }\n  cookie(key) {\n    const cookie = this.raw.headers.get(\"Cookie\");\n    if (!cookie) {\n      return;\n    }\n    const obj = parse(cookie);\n    if (key) {\n      const value = obj[key];\n      return value;\n    } else {\n      return obj;\n    }\n  }\n  async parseBody(options) {\n    if (this.bodyCache.parsedBody) {\n      return this.bodyCache.parsedBody;\n    }\n    const parsedBody = await parseBody(this, options);\n    this.bodyCache.parsedBody = parsedBody;\n    return parsedBody;\n  }\n  json() {\n    return this.cachedBody(\"json\");\n  }\n  text() {\n    return this.cachedBody(\"text\");\n  }\n  arrayBuffer() {\n    return this.cachedBody(\"arrayBuffer\");\n  }\n  blob() {\n    return this.cachedBody(\"blob\");\n  }\n  formData() {\n    return this.cachedBody(\"formData\");\n  }\n  addValidatedData(target, data) {\n    __privateGet(this, _validatedData)[target] = data;\n  }\n  valid(target) {\n    return __privateGet(this, _validatedData)[target];\n  }\n  get url() {\n    return this.raw.url;\n  }\n  get method() {\n    return this.raw.method;\n  }\n  get matchedRoutes() {\n    return __privateGet(this, _matchResult)[0].map(([[, route]]) => route);\n  }\n  get routePath() {\n    return __privateGet(this, _matchResult)[0].map(([[, route]]) => route)[this.routeIndex].path;\n  }\n  get headers() {\n    return this.raw.headers;\n  }\n  get body() {\n    return this.raw.body;\n  }\n  get bodyUsed() {\n    return this.raw.bodyUsed;\n  }\n  get integrity() {\n    return this.raw.integrity;\n  }\n  get keepalive() {\n    return this.raw.keepalive;\n  }\n  get referrer() {\n    return this.raw.referrer;\n  }\n  get signal() {\n    return this.raw.signal;\n  }\n};\n_validatedData = new WeakMap();\n_matchResult = new WeakMap();\nexport {\n  HonoRequest\n};\n", "// src/router.ts\nvar METHOD_NAME_ALL = \"ALL\";\nvar METHOD_NAME_ALL_LOWERCASE = \"all\";\nvar METHODS = [\"get\", \"post\", \"put\", \"delete\", \"options\", \"patch\"];\nvar MESSAGE_MATCHER_IS_ALREADY_BUILT = \"Can not add a route since the matcher is already built.\";\nvar UnsupportedPathError = class extends Error {\n};\nexport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHODS,\n  METHOD_NAME_ALL,\n  METHOD_NAME_ALL_LOWERCASE,\n  UnsupportedPathError\n};\n", "var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\n\n// src/hono-base.ts\nimport { compose } from \"./compose.js\";\nimport { Context } from \"./context.js\";\nimport { HTTPException } from \"./http-exception.js\";\nimport { HonoRequest } from \"./request.js\";\nimport { METHOD_NAME_ALL, METHOD_NAME_ALL_LOWERCASE, METHODS } from \"./router.js\";\nimport { getPath, getPathNoStrict, getQueryStrings, mergePath } from \"./utils/url.js\";\nvar COMPOSED_HANDLER = Symbol(\"composedHandler\");\nfunction defineDynamicClass() {\n  return class {\n  };\n}\nvar notFoundHandler = (c) => {\n  return c.text(\"404 Not Found\", 404);\n};\nvar errorHandler = (err, c) => {\n  if (err instanceof HTTPException) {\n    return err.getResponse();\n  }\n  console.error(err);\n  const message = \"Internal Server Error\";\n  return c.text(message, 500);\n};\nvar _path;\nvar _Hono = class extends defineDynamicClass() {\n  constructor(options = {}) {\n    super();\n    this._basePath = \"/\";\n    __privateAdd(this, _path, \"/\");\n    this.routes = [];\n    this.notFoundHandler = notFoundHandler;\n    this.errorHandler = errorHandler;\n    this.onError = (handler) => {\n      this.errorHandler = handler;\n      return this;\n    };\n    this.notFound = (handler) => {\n      this.notFoundHandler = handler;\n      return this;\n    };\n    this.head = () => {\n      console.warn(\"`app.head()` is no longer used. `app.get()` implicitly handles the HEAD method.\");\n      return this;\n    };\n    this.handleEvent = (event) => {\n      return this.dispatch(event.request, event, void 0, event.request.method);\n    };\n    this.fetch = (request, Env, executionCtx) => {\n      return this.dispatch(request, executionCtx, Env, request.method);\n    };\n    this.request = (input, requestInit, Env, executionCtx) => {\n      if (input instanceof Request) {\n        if (requestInit !== void 0) {\n          input = new Request(input, requestInit);\n        }\n        return this.fetch(input, Env, executionCtx);\n      }\n      input = input.toString();\n      const path = /^https?:\\/\\//.test(input) ? input : `http://localhost${mergePath(\"/\", input)}`;\n      const req = new Request(path, requestInit);\n      return this.fetch(req, Env, executionCtx);\n    };\n    this.fire = () => {\n      addEventListener(\"fetch\", (event) => {\n        event.respondWith(this.dispatch(event.request, event, void 0, event.request.method));\n      });\n    };\n    const allMethods = [...METHODS, METHOD_NAME_ALL_LOWERCASE];\n    allMethods.map((method) => {\n      this[method] = (args1, ...args) => {\n        if (typeof args1 === \"string\") {\n          __privateSet(this, _path, args1);\n        } else {\n          this.addRoute(method, __privateGet(this, _path), args1);\n        }\n        args.map((handler) => {\n          if (typeof handler !== \"string\") {\n            this.addRoute(method, __privateGet(this, _path), handler);\n          }\n        });\n        return this;\n      };\n    });\n    this.on = (method, path, ...handlers) => {\n      if (!method) {\n        return this;\n      }\n      __privateSet(this, _path, path);\n      for (const m of [method].flat()) {\n        handlers.map((handler) => {\n          this.addRoute(m.toUpperCase(), __privateGet(this, _path), handler);\n        });\n      }\n      return this;\n    };\n    this.use = (arg1, ...handlers) => {\n      if (typeof arg1 === \"string\") {\n        __privateSet(this, _path, arg1);\n      } else {\n        handlers.unshift(arg1);\n      }\n      handlers.map((handler) => {\n        this.addRoute(METHOD_NAME_ALL, __privateGet(this, _path), handler);\n      });\n      return this;\n    };\n    const strict = options.strict ?? true;\n    delete options.strict;\n    Object.assign(this, options);\n    this.getPath = strict ? options.getPath ?? getPath : getPathNoStrict;\n  }\n  clone() {\n    const clone = new _Hono({\n      router: this.router,\n      getPath: this.getPath\n    });\n    clone.routes = this.routes;\n    return clone;\n  }\n  route(path, app) {\n    const subApp = this.basePath(path);\n    if (!app) {\n      return subApp;\n    }\n    app.routes.map((r) => {\n      let handler;\n      if (app.errorHandler === errorHandler) {\n        handler = r.handler;\n      } else {\n        handler = async (c, next) => (await compose([], app.errorHandler)(c, () => r.handler(c, next))).res;\n        handler[COMPOSED_HANDLER] = r.handler;\n      }\n      subApp.addRoute(r.method, r.path, handler);\n    });\n    return this;\n  }\n  basePath(path) {\n    const subApp = this.clone();\n    subApp._basePath = mergePath(this._basePath, path);\n    return subApp;\n  }\n  showRoutes() {\n    const length = 8;\n    this.routes.map((route) => {\n      console.log(\n        `\\x1B[32m${route.method}\\x1B[0m ${\" \".repeat(length - route.method.length)} ${route.path}`\n      );\n    });\n  }\n  mount(path, applicationHandler, optionHandler) {\n    const mergedPath = mergePath(this._basePath, path);\n    const pathPrefixLength = mergedPath === \"/\" ? 0 : mergedPath.length;\n    const handler = async (c, next) => {\n      let executionContext = void 0;\n      try {\n        executionContext = c.executionCtx;\n      } catch {\n      }\n      const options = optionHandler ? optionHandler(c) : [c.env, executionContext];\n      const optionsArray = Array.isArray(options) ? options : [options];\n      const queryStrings = getQueryStrings(c.req.url);\n      const res = await applicationHandler(\n        new Request(\n          new URL((c.req.path.slice(pathPrefixLength) || \"/\") + queryStrings, c.req.url),\n          c.req.raw\n        ),\n        ...optionsArray\n      );\n      if (res) {\n        return res;\n      }\n      await next();\n    };\n    this.addRoute(METHOD_NAME_ALL, mergePath(path, \"*\"), handler);\n    return this;\n  }\n  get routerName() {\n    this.matchRoute(\"GET\", \"/\");\n    return this.router.name;\n  }\n  addRoute(method, path, handler) {\n    method = method.toUpperCase();\n    path = mergePath(this._basePath, path);\n    const r = { path, method, handler };\n    this.router.add(method, path, [handler, r]);\n    this.routes.push(r);\n  }\n  matchRoute(method, path) {\n    return this.router.match(method, path);\n  }\n  handleError(err, c) {\n    if (err instanceof Error) {\n      return this.errorHandler(err, c);\n    }\n    throw err;\n  }\n  dispatch(request, executionCtx, env, method) {\n    if (method === \"HEAD\") {\n      return (async () => new Response(null, await this.dispatch(request, executionCtx, env, \"GET\")))();\n    }\n    const path = this.getPath(request, { env });\n    const matchResult = this.matchRoute(method, path);\n    const c = new Context(new HonoRequest(request, path, matchResult), {\n      env,\n      executionCtx,\n      notFoundHandler: this.notFoundHandler\n    });\n    if (matchResult[0].length === 1) {\n      let res;\n      try {\n        res = matchResult[0][0][0][0](c, async () => {\n          c.res = await this.notFoundHandler(c);\n        });\n      } catch (err) {\n        return this.handleError(err, c);\n      }\n      return res instanceof Promise ? res.then(\n        (resolved) => resolved || (c.finalized ? c.res : this.notFoundHandler(c))\n      ).catch((err) => this.handleError(err, c)) : res;\n    }\n    const composed = compose(matchResult[0], this.errorHandler, this.notFoundHandler);\n    return (async () => {\n      try {\n        const context = await composed(c);\n        if (!context.finalized) {\n          throw new Error(\n            \"Context is not finalized. You may forget returning Response object or `await next()`\"\n          );\n        }\n        return context.res;\n      } catch (err) {\n        return this.handleError(err, c);\n      }\n    })();\n  }\n};\nvar Hono = _Hono;\n_path = new WeakMap();\nexport {\n  COMPOSED_HANDLER,\n  Hono as HonoBase\n};\n", "// src/router/reg-exp-router/node.ts\nvar LABEL_REG_EXP_STR = \"[^/]+\";\nvar ONLY_WILDCARD_REG_EXP_STR = \".*\";\nvar TAIL_WILDCARD_REG_EXP_STR = \"(?:|/.*)\";\nvar PATH_ERROR = Symbol();\nfunction compareKey(a, b) {\n  if (a.length === 1) {\n    return b.length === 1 ? a < b ? -1 : 1 : -1;\n  }\n  if (b.length === 1) {\n    return 1;\n  }\n  if (a === ONLY_WILDCARD_REG_EXP_STR || a === TAIL_WILDCARD_REG_EXP_STR) {\n    return 1;\n  } else if (b === ONLY_WILDCARD_REG_EXP_STR || b === TAIL_WILDCARD_REG_EXP_STR) {\n    return -1;\n  }\n  if (a === LABEL_REG_EXP_STR) {\n    return 1;\n  } else if (b === LABEL_REG_EXP_STR) {\n    return -1;\n  }\n  return a.length === b.length ? a < b ? -1 : 1 : b.length - a.length;\n}\nvar Node = class {\n  constructor() {\n    this.children = {};\n  }\n  insert(tokens, index, paramMap, context, pathErrorCheckOnly) {\n    if (tokens.length === 0) {\n      if (this.index !== void 0) {\n        throw PATH_ERROR;\n      }\n      if (pathErrorCheckOnly) {\n        return;\n      }\n      this.index = index;\n      return;\n    }\n    const [token, ...restTokens] = tokens;\n    const pattern = token === \"*\" ? restTokens.length === 0 ? [\"\", \"\", ONLY_WILDCARD_REG_EXP_STR] : [\"\", \"\", LABEL_REG_EXP_STR] : token === \"/*\" ? [\"\", \"\", TAIL_WILDCARD_REG_EXP_STR] : token.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n    let node;\n    if (pattern) {\n      const name = pattern[1];\n      let regexpStr = pattern[2] || LABEL_REG_EXP_STR;\n      if (name && pattern[2]) {\n        regexpStr = regexpStr.replace(/^\\((?!\\?:)(?=[^)]+\\)$)/, \"(?:\");\n        if (/\\((?!\\?:)/.test(regexpStr)) {\n          throw PATH_ERROR;\n        }\n      }\n      node = this.children[regexpStr];\n      if (!node) {\n        if (Object.keys(this.children).some(\n          (k) => k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.children[regexpStr] = new Node();\n        if (name !== \"\") {\n          node.varIndex = context.varIndex++;\n        }\n      }\n      if (!pathErrorCheckOnly && name !== \"\") {\n        paramMap.push([name, node.varIndex]);\n      }\n    } else {\n      node = this.children[token];\n      if (!node) {\n        if (Object.keys(this.children).some(\n          (k) => k.length > 1 && k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.children[token] = new Node();\n      }\n    }\n    node.insert(restTokens, index, paramMap, context, pathErrorCheckOnly);\n  }\n  buildRegExpStr() {\n    const childKeys = Object.keys(this.children).sort(compareKey);\n    const strList = childKeys.map((k) => {\n      const c = this.children[k];\n      return (typeof c.varIndex === \"number\" ? `(${k})@${c.varIndex}` : k) + c.buildRegExpStr();\n    });\n    if (typeof this.index === \"number\") {\n      strList.unshift(`#${this.index}`);\n    }\n    if (strList.length === 0) {\n      return \"\";\n    }\n    if (strList.length === 1) {\n      return strList[0];\n    }\n    return \"(?:\" + strList.join(\"|\") + \")\";\n  }\n};\nexport {\n  Node,\n  PATH_ERROR\n};\n", "// src/router/reg-exp-router/trie.ts\nimport { Node } from \"./node.js\";\nvar Trie = class {\n  constructor() {\n    this.context = { varIndex: 0 };\n    this.root = new Node();\n  }\n  insert(path, index, pathErrorCheckOnly) {\n    const paramAssoc = [];\n    const groups = [];\n    for (let i = 0; ; ) {\n      let replaced = false;\n      path = path.replace(/\\{[^}]+\\}/g, (m) => {\n        const mark = `@\\\\${i}`;\n        groups[i] = [mark, m];\n        i++;\n        replaced = true;\n        return mark;\n      });\n      if (!replaced) {\n        break;\n      }\n    }\n    const tokens = path.match(/(?::[^\\/]+)|(?:\\/\\*$)|./g) || [];\n    for (let i = groups.length - 1; i >= 0; i--) {\n      const [mark] = groups[i];\n      for (let j = tokens.length - 1; j >= 0; j--) {\n        if (tokens[j].indexOf(mark) !== -1) {\n          tokens[j] = tokens[j].replace(mark, groups[i][1]);\n          break;\n        }\n      }\n    }\n    this.root.insert(tokens, index, paramAssoc, this.context, pathErrorCheckOnly);\n    return paramAssoc;\n  }\n  buildRegExp() {\n    let regexp = this.root.buildRegExpStr();\n    if (regexp === \"\") {\n      return [/^$/, [], []];\n    }\n    let captureIndex = 0;\n    const indexReplacementMap = [];\n    const paramReplacementMap = [];\n    regexp = regexp.replace(/#(\\d+)|@(\\d+)|\\.\\*\\$/g, (_, handlerIndex, paramIndex) => {\n      if (typeof handlerIndex !== \"undefined\") {\n        indexReplacementMap[++captureIndex] = Number(handlerIndex);\n        return \"$()\";\n      }\n      if (typeof paramIndex !== \"undefined\") {\n        paramReplacementMap[Number(paramIndex)] = ++captureIndex;\n        return \"\";\n      }\n      return \"\";\n    });\n    return [new RegExp(`^${regexp}`), indexReplacementMap, paramReplacementMap];\n  }\n};\nexport {\n  Trie\n};\n", "// src/router/reg-exp-router/router.ts\nimport {\n  METHOD_NAME_ALL,\n  METHODS,\n  UnsupportedPathError,\n  MESSAGE_MATCHER_IS_ALREADY_BUILT\n} from \"../../router.js\";\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { PATH_ERROR } from \"./node.js\";\nimport { Trie } from \"./trie.js\";\nvar methodNames = [METHOD_NAME_ALL, ...METHODS].map((method) => method.toUpperCase());\nvar emptyParam = [];\nvar nullMatcher = [/^$/, [], {}];\nvar wildcardRegExpCache = {};\nfunction buildWildcardRegExp(path) {\n  return wildcardRegExpCache[path] ?? (wildcardRegExpCache[path] = new RegExp(\n    path === \"*\" ? \"\" : `^${path.replace(/\\/\\*/, \"(?:|/.*)\")}$`\n  ));\n}\nfunction clearWildcardRegExpCache() {\n  wildcardRegExpCache = {};\n}\nfunction buildMatcherFromPreprocessedRoutes(routes) {\n  const trie = new Trie();\n  const handlerData = [];\n  if (routes.length === 0) {\n    return nullMatcher;\n  }\n  const routesWithStaticPathFlag = routes.map(\n    (route) => [!/\\*|\\/:/.test(route[0]), ...route]\n  ).sort(\n    ([isStaticA, pathA], [isStaticB, pathB]) => isStaticA ? 1 : isStaticB ? -1 : pathA.length - pathB.length\n  );\n  const staticMap = {};\n  for (let i = 0, j = -1, len = routesWithStaticPathFlag.length; i < len; i++) {\n    const [pathErrorCheckOnly, path, handlers] = routesWithStaticPathFlag[i];\n    if (pathErrorCheckOnly) {\n      staticMap[path] = [handlers.map(([h]) => [h, {}]), emptyParam];\n    } else {\n      j++;\n    }\n    let paramAssoc;\n    try {\n      paramAssoc = trie.insert(path, j, pathErrorCheckOnly);\n    } catch (e) {\n      throw e === PATH_ERROR ? new UnsupportedPathError(path) : e;\n    }\n    if (pathErrorCheckOnly) {\n      continue;\n    }\n    handlerData[j] = handlers.map(([h, paramCount]) => {\n      const paramIndexMap = {};\n      paramCount -= 1;\n      for (; paramCount >= 0; paramCount--) {\n        const [key, value] = paramAssoc[paramCount];\n        paramIndexMap[key] = value;\n      }\n      return [h, paramIndexMap];\n    });\n  }\n  const [regexp, indexReplacementMap, paramReplacementMap] = trie.buildRegExp();\n  for (let i = 0, len = handlerData.length; i < len; i++) {\n    for (let j = 0, len2 = handlerData[i].length; j < len2; j++) {\n      const map = handlerData[i][j]?.[1];\n      if (!map) {\n        continue;\n      }\n      const keys = Object.keys(map);\n      for (let k = 0, len3 = keys.length; k < len3; k++) {\n        map[keys[k]] = paramReplacementMap[map[keys[k]]];\n      }\n    }\n  }\n  const handlerMap = [];\n  for (const i in indexReplacementMap) {\n    handlerMap[i] = handlerData[indexReplacementMap[i]];\n  }\n  return [regexp, handlerMap, staticMap];\n}\nfunction findMiddleware(middleware, path) {\n  if (!middleware) {\n    return void 0;\n  }\n  for (const k of Object.keys(middleware).sort((a, b) => b.length - a.length)) {\n    if (buildWildcardRegExp(k).test(path)) {\n      return [...middleware[k]];\n    }\n  }\n  return void 0;\n}\nvar RegExpRouter = class {\n  constructor() {\n    this.name = \"RegExpRouter\";\n    this.middleware = { [METHOD_NAME_ALL]: {} };\n    this.routes = { [METHOD_NAME_ALL]: {} };\n  }\n  add(method, path, handler) {\n    var _a;\n    const { middleware, routes } = this;\n    if (!middleware || !routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    if (methodNames.indexOf(method) === -1) {\n      methodNames.push(method);\n    }\n    if (!middleware[method]) {\n      ;\n      [middleware, routes].forEach((handlerMap) => {\n        handlerMap[method] = {};\n        Object.keys(handlerMap[METHOD_NAME_ALL]).forEach((p) => {\n          handlerMap[method][p] = [...handlerMap[METHOD_NAME_ALL][p]];\n        });\n      });\n    }\n    if (path === \"/*\") {\n      path = \"*\";\n    }\n    const paramCount = (path.match(/\\/:/g) || []).length;\n    if (/\\*$/.test(path)) {\n      const re = buildWildcardRegExp(path);\n      if (method === METHOD_NAME_ALL) {\n        Object.keys(middleware).forEach((m) => {\n          var _a2;\n          (_a2 = middleware[m])[path] || (_a2[path] = findMiddleware(middleware[m], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || []);\n        });\n      } else {\n        (_a = middleware[method])[path] || (_a[path] = findMiddleware(middleware[method], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || []);\n      }\n      Object.keys(middleware).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(middleware[m]).forEach((p) => {\n            re.test(p) && middleware[m][p].push([handler, paramCount]);\n          });\n        }\n      });\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(routes[m]).forEach(\n            (p) => re.test(p) && routes[m][p].push([handler, paramCount])\n          );\n        }\n      });\n      return;\n    }\n    const paths = checkOptionalParameter(path) || [path];\n    for (let i = 0, len = paths.length; i < len; i++) {\n      const path2 = paths[i];\n      Object.keys(routes).forEach((m) => {\n        var _a2;\n        if (method === METHOD_NAME_ALL || method === m) {\n          (_a2 = routes[m])[path2] || (_a2[path2] = [\n            ...findMiddleware(middleware[m], path2) || findMiddleware(middleware[METHOD_NAME_ALL], path2) || []\n          ]);\n          routes[m][path2].push([handler, paramCount - len + i + 1]);\n        }\n      });\n    }\n  }\n  match(method, path) {\n    clearWildcardRegExpCache();\n    const matchers = this.buildAllMatchers();\n    this.match = (method2, path2) => {\n      const matcher = matchers[method2];\n      const staticMatch = matcher[2][path2];\n      if (staticMatch) {\n        return staticMatch;\n      }\n      const match = path2.match(matcher[0]);\n      if (!match) {\n        return [[], emptyParam];\n      }\n      const index = match.indexOf(\"\", 1);\n      return [matcher[1][index], match];\n    };\n    return this.match(method, path);\n  }\n  buildAllMatchers() {\n    const matchers = {};\n    methodNames.forEach((method) => {\n      matchers[method] = this.buildMatcher(method) || matchers[METHOD_NAME_ALL];\n    });\n    this.middleware = this.routes = void 0;\n    return matchers;\n  }\n  buildMatcher(method) {\n    const routes = [];\n    let hasOwnRoute = method === METHOD_NAME_ALL;\n    [this.middleware, this.routes].forEach((r) => {\n      const ownRoute = r[method] ? Object.keys(r[method]).map((path) => [path, r[method][path]]) : [];\n      if (ownRoute.length !== 0) {\n        hasOwnRoute || (hasOwnRoute = true);\n        routes.push(...ownRoute);\n      } else if (method !== METHOD_NAME_ALL) {\n        routes.push(\n          ...Object.keys(r[METHOD_NAME_ALL]).map((path) => [path, r[METHOD_NAME_ALL][path]])\n        );\n      }\n    });\n    if (!hasOwnRoute) {\n      return null;\n    } else {\n      return buildMatcherFromPreprocessedRoutes(routes);\n    }\n  }\n};\nexport {\n  RegExpRouter\n};\n", "// src/router/smart-router/router.ts\nimport { UnsupportedPathError, MESSAGE_MATCHER_IS_ALREADY_BUILT } from \"../../router.js\";\nvar SmartRouter = class {\n  constructor(init) {\n    this.name = \"SmartRouter\";\n    this.routers = [];\n    this.routes = [];\n    Object.assign(this, init);\n  }\n  add(method, path, handler) {\n    if (!this.routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    this.routes.push([method, path, handler]);\n  }\n  match(method, path) {\n    if (!this.routes) {\n      throw new Error(\"Fatal error\");\n    }\n    const { routers, routes } = this;\n    const len = routers.length;\n    let i = 0;\n    let res;\n    for (; i < len; i++) {\n      const router = routers[i];\n      try {\n        routes.forEach((args) => {\n          router.add(...args);\n        });\n        res = router.match(method, path);\n      } catch (e) {\n        if (e instanceof UnsupportedPathError) {\n          continue;\n        }\n        throw e;\n      }\n      this.match = router.match.bind(router);\n      this.routers = [router];\n      this.routes = void 0;\n      break;\n    }\n    if (i === len) {\n      throw new Error(\"Fatal error\");\n    }\n    this.name = `SmartRouter + ${this.activeRouter.name}`;\n    return res;\n  }\n  get activeRouter() {\n    if (this.routes || this.routers.length !== 1) {\n      throw new Error(\"No active router has been determined yet.\");\n    }\n    return this.routers[0];\n  }\n};\nexport {\n  SmartRouter\n};\n", "// src/router/trie-router/node.ts\nimport { METHOD_NAME_ALL } from \"../../router.js\";\nimport { splitPath, splitRoutingPath, getPattern } from \"../../utils/url.js\";\nvar Node = class {\n  constructor(method, handler, children) {\n    this.order = 0;\n    this.params = {};\n    this.children = children || {};\n    this.methods = [];\n    this.name = \"\";\n    if (method && handler) {\n      const m = {};\n      m[method] = { handler, possibleKeys: [], score: 0, name: this.name };\n      this.methods = [m];\n    }\n    this.patterns = [];\n  }\n  insert(method, path, handler) {\n    this.name = `${method} ${path}`;\n    this.order = ++this.order;\n    let curNode = this;\n    const parts = splitRoutingPath(path);\n    const possibleKeys = [];\n    const parentPatterns = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const p = parts[i];\n      if (Object.keys(curNode.children).includes(p)) {\n        parentPatterns.push(...curNode.patterns);\n        curNode = curNode.children[p];\n        const pattern2 = getPattern(p);\n        if (pattern2) {\n          possibleKeys.push(pattern2[1]);\n        }\n        continue;\n      }\n      curNode.children[p] = new Node();\n      const pattern = getPattern(p);\n      if (pattern) {\n        curNode.patterns.push(pattern);\n        parentPatterns.push(...curNode.patterns);\n        possibleKeys.push(pattern[1]);\n      }\n      parentPatterns.push(...curNode.patterns);\n      curNode = curNode.children[p];\n    }\n    if (!curNode.methods.length) {\n      curNode.methods = [];\n    }\n    const m = {};\n    const handlerSet = {\n      handler,\n      possibleKeys: possibleKeys.filter((v, i, a) => a.indexOf(v) === i),\n      name: this.name,\n      score: this.order\n    };\n    m[method] = handlerSet;\n    curNode.methods.push(m);\n    return curNode;\n  }\n  gHSets(node, method, nodeParams, params) {\n    const handlerSets = [];\n    for (let i = 0, len = node.methods.length; i < len; i++) {\n      const m = node.methods[i];\n      const handlerSet = m[method] || m[METHOD_NAME_ALL];\n      const processedSet = {};\n      if (handlerSet !== void 0) {\n        handlerSet.params = {};\n        handlerSet.possibleKeys.forEach((key) => {\n          const processed = processedSet[handlerSet.name];\n          handlerSet.params[key] = params[key] && !processed ? params[key] : nodeParams[key] ?? params[key];\n          processedSet[handlerSet.name] = true;\n        });\n        handlerSets.push(handlerSet);\n      }\n    }\n    return handlerSets;\n  }\n  search(method, path) {\n    const handlerSets = [];\n    this.params = {};\n    const curNode = this;\n    let curNodes = [curNode];\n    const parts = splitPath(path);\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const part = parts[i];\n      const isLast = i === len - 1;\n      const tempNodes = [];\n      for (let j = 0, len2 = curNodes.length; j < len2; j++) {\n        const node = curNodes[j];\n        const nextNode = node.children[part];\n        if (nextNode) {\n          nextNode.params = node.params;\n          if (isLast === true) {\n            if (nextNode.children[\"*\"]) {\n              handlerSets.push(...this.gHSets(nextNode.children[\"*\"], method, node.params, {}));\n            }\n            handlerSets.push(...this.gHSets(nextNode, method, node.params, {}));\n          } else {\n            tempNodes.push(nextNode);\n          }\n        }\n        for (let k = 0, len3 = node.patterns.length; k < len3; k++) {\n          const pattern = node.patterns[k];\n          const params = { ...node.params };\n          if (pattern === \"*\") {\n            const astNode = node.children[\"*\"];\n            if (astNode) {\n              handlerSets.push(...this.gHSets(astNode, method, node.params, {}));\n              tempNodes.push(astNode);\n            }\n            continue;\n          }\n          if (part === \"\") {\n            continue;\n          }\n          const [key, name, matcher] = pattern;\n          const child = node.children[key];\n          const restPathString = parts.slice(i).join(\"/\");\n          if (matcher instanceof RegExp && matcher.test(restPathString)) {\n            params[name] = restPathString;\n            handlerSets.push(...this.gHSets(child, method, node.params, params));\n            continue;\n          }\n          if (matcher === true || matcher instanceof RegExp && matcher.test(part)) {\n            if (typeof key === \"string\") {\n              params[name] = part;\n              if (isLast === true) {\n                handlerSets.push(...this.gHSets(child, method, params, node.params));\n                if (child.children[\"*\"]) {\n                  handlerSets.push(...this.gHSets(child.children[\"*\"], method, params, node.params));\n                }\n              } else {\n                child.params = params;\n                tempNodes.push(child);\n              }\n            }\n          }\n        }\n      }\n      curNodes = tempNodes;\n    }\n    const results = handlerSets.sort((a, b) => {\n      return a.score - b.score;\n    });\n    return [results.map(({ handler, params }) => [handler, params])];\n  }\n};\nexport {\n  Node\n};\n", "// src/router/trie-router/router.ts\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { Node } from \"./node.js\";\nvar TrieRouter = class {\n  constructor() {\n    this.name = \"TrieRouter\";\n    this.node = new Node();\n  }\n  add(method, path, handler) {\n    const results = checkOptionalParameter(path);\n    if (results) {\n      for (const p of results) {\n        this.node.insert(method, p, handler);\n      }\n      return;\n    }\n    this.node.insert(method, path, handler);\n  }\n  match(method, path) {\n    return this.node.search(method, path);\n  }\n};\nexport {\n  TrieRouter\n};\n", "// src/hono.ts\nimport { HonoBase } from \"./hono-base.js\";\nimport { RegExpRouter } from \"./router/reg-exp-router/index.js\";\nimport { SmartRouter } from \"./router/smart-router/index.js\";\nimport { TrieRouter } from \"./router/trie-router/index.js\";\nvar Hono = class extends HonoBase {\n  constructor(options = {}) {\n    super(options);\n    this.router = options.router ?? new SmartRouter({\n      routers: [new RegExpRouter(), new TrieRouter()]\n    });\n  }\n};\nexport {\n  Hono\n};\n", "import type { RouterContext } from '../../context';\nimport { TaskParam } from '../task/ask';\nimport type { Task } from '../task/model';\nimport { zValidator } from '@hono/zod-validator';\nimport type { FinishedTask, FinishedTaskGroup } from './model';\nimport * as model from './service';\nimport { Hono } from 'hono';\n\nexport const finishedTasksRouter = new Hono<{ Variables: RouterContext }>()\n  .get('/', async (c) => {\n    const db = c.get('db');\n    const finishedTasks = await model.getAllFinishedTasks(db);\n    return c.json<FinishedTask[]>(finishedTasks);\n  })\n  .get('/grouped', async (c) => {\n    const db = c.get('db');\n    const finishedTasks = await model.getAllGroupedFinishedTasks(db);\n    return c.json<FinishedTaskGroup[]>(finishedTasks);\n  })\n  .post('/:id/return', zValidator('param', TaskParam), async (c) => {\n    const db = c.get('db');\n    const { id } = c.req.valid('param');\n    const restoredTask = await model.restoreFinishedTask(id, db);\n    return c.json<Task>(restoredTask);\n  });\n", "// src/middleware/logger/index.ts\nimport { getPath } from \"../../utils/url.js\";\nvar humanize = (times) => {\n  const [delimiter, separator] = [\",\", \".\"];\n  const orderTimes = times.map((v) => v.replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1\" + delimiter));\n  return orderTimes.join(separator);\n};\nvar time = (start) => {\n  const delta = Date.now() - start;\n  return humanize([delta < 1e3 ? delta + \"ms\" : Math.round(delta / 1e3) + \"s\"]);\n};\nvar colorStatus = (status) => {\n  const out = {\n    7: `\\x1B[35m${status}\\x1B[0m`,\n    5: `\\x1B[31m${status}\\x1B[0m`,\n    4: `\\x1B[33m${status}\\x1B[0m`,\n    3: `\\x1B[36m${status}\\x1B[0m`,\n    2: `\\x1B[32m${status}\\x1B[0m`,\n    1: `\\x1B[32m${status}\\x1B[0m`,\n    0: `\\x1B[33m${status}\\x1B[0m`\n  };\n  const calculateStatus = status / 100 | 0;\n  return out[calculateStatus];\n};\nfunction log(fn, prefix, method, path, status = 0, elapsed) {\n  const out = prefix === \"<--\" /* Incoming */ ? `  ${prefix} ${method} ${path}` : `  ${prefix} ${method} ${path} ${colorStatus(status)} ${elapsed}`;\n  fn(out);\n}\nvar logger = (fn = console.log) => {\n  return async function logger2(c, next) {\n    const { method } = c.req;\n    const path = getPath(c.req.raw);\n    log(fn, \"<--\" /* Incoming */, method, path);\n    const start = Date.now();\n    await next();\n    log(fn, \"-->\" /* Outgoing */, method, path, c.res.status, time(start));\n  };\n};\nexport {\n  logger\n};\n", "export type SuccessResponse = {\n\tmessage: string\n}\n\nfunction successResponse(message: string): SuccessResponse {\n\treturn {\n\t\tmessage\n\t}\n}\n\nexport type ErrorResponse = {\n\terror: string\n}\n\nfunction errorResponse(message: string): ErrorResponse {\n\treturn {\n\t\terror: message,\n\t}\n}\n\nexport const Responder = {\n\tsuccess: successResponse,\n\terror: errorResponse,\n}", "import type { TaskCategory, TaskPriority } from '../task/model';\nimport type { TaskCreateInput, TaskCreateModel } from '../task/ask';\n\nconst priorities: TaskPriority[] = ['high', 'low', 'medium', 'useless'];\nconst categories: TaskCategory[] = ['coding', 'hobby', 'home', 'work', 'other', 'reading'];\n\nexport async function makeTaskRandomPrediction(task: TaskCreateInput): Promise<TaskCreateModel> {\n\treturn {\n\t\tdescription: randomText(randomIntInRange(50, 255)),\n\t\tpriority: randomItemFromArray(priorities),\n\t\tcategory: task.category ?? randomItemFromArray(categories),\n\t\tdueDate: randomDateFromNow(new Date('2024-05-20')).getTime(),\n\t\t...task\n\t};\n}\n\nfunction randomDateFromNow(date: Date): Date {\n\treturn randomDate(new Date(), date);\n}\n\nfunction randomDate(start: Date, end: Date): Date {\n\treturn new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n}\n\nfunction randomItemFromArray<T>(arr: T[]): T {\n\treturn arr[Math.floor(Math.random() * arr.length)];\n}\n\nfunction randomText(length: number): string {\n\tconst characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 \t';\n\tlet result = '';\n\tconst charactersLength = characters.length;\n\tfor (let i = 0; i < length; i++) {\n\t\tresult += characters.charAt(Math.floor(Math.random() * charactersLength));\n\t}\n\treturn result;\n}\n\nfunction randomIntInRange(min: number, max: number): number {\n\tmin = Math.ceil(min);\n\tmax = Math.floor(max);\n\treturn Math.floor(Math.random() * (max - min + 1) + min);\n}\n", "import type { DatabasePool } from '@repo/db';\nimport type { Task, TaskId } from './model';\nimport * as queries from './queries';\nimport { makeTaskRandomPrediction } from '../predicts/random-task';\n\nexport async function getAllTasks(db: DatabasePool): Promise<Task[]> {\n\treturn queries.queryAllTasks(db);\n}\n\nexport async function deleteTaskById(id: TaskId, db: DatabasePool): Promise<TaskId> {\n\treturn await queries.softDeleteTaskById(id, db);\n}\n\ntype CreateTaskInput = Omit<Task, 'id' | 'createdAt'>;\n\nexport async function createTask(newTask: CreateTaskInput, db: DatabasePool): Promise<Task> {\n\tconst task: Task = {\n\t\t...(await makeTaskRandomPrediction(newTask)),\n\t\tid: crypto.randomUUID(),\n\t\tcreatedAt: new Date().getTime()\n\t};\n\treturn queries.createTask(task, db);\n}\n\ntype UpdateTaskInput = Omit<Task, 'id' | 'createdAt'>;\n\nexport async function updateTaskById(\n\tid: TaskId,\n\tupdatedTask: UpdateTaskInput,\n\tdb: DatabasePool\n): Promise<Task> {\n\treturn queries.updateTask(id, updatedTask, db);\n}\n\nexport function restoreTaskById(id: TaskId, db: DatabasePool): Promise<Task> {\n\treturn queries.updateTask(id, { deletedAt: null }, db);\n}\n", "import type { RouterContext } from '../../context';\nimport { Hono } from 'hono';\nimport { Task } from './model';\nimport { zValidator } from '@hono/zod-validator';\nimport { Responder } from '../../responder';\nimport * as model from './service';\nimport * as ask from './ask';\nimport { createFinishedTask } from '../finished-task/service';\n\nexport const taskRouter = new Hono<{ Variables: RouterContext }>()\n\t.get('/', async (c) => {\n\t\tconst db = c.get('db');\n\t\tconst tasks = await model.getAllTasks(db);\n\t\treturn c.json<Task[]>(tasks);\n\t})\n\t.post('/', zValidator('json', ask.TaskCreateInput), async (c) => {\n\t\tconst newTask = c.req.valid('json');\n\t\tconst db = c.get('db');\n\t\tconst task = await model.createTask(newTask, db);\n\t\treturn c.json<Task>(task);\n\t})\n\t.patch(\n\t\t'/:id',\n\t\tzValidator('param', ask.TaskParam),\n\t\tzValidator('json', ask.TaskCreateInput),\n\t\tasync (c) => {\n\t\t\tconst { id } = c.req.valid('param');\n\t\t\tconst updatedTask = c.req.valid('json');\n\t\t\tconst db = c.get('db');\n\t\t\tconst task = await model.updateTaskById(id, updatedTask, db);\n\t\t\treturn c.json<Task>(task);\n\t\t}\n\t)\n\t.delete('/:id', zValidator('param', ask.TaskParam), async (c) => {\n\t\tconst { id } = c.req.valid('param');\n\t\tconst db = c.get('db');\n\t\tawait model.deleteTaskById(id, db);\n\t\treturn c.json(Responder.success('Task removed successfully'), 201);\n\t})\n\t.post(':id/restore', zValidator('param', ask.TaskParam), async (c) => {\n\t\tconst { id } = c.req.valid('param');\n\t\tconst db = c.get('db');\n\t\tawait model.restoreTaskById(id, db);\n\t\treturn c.json(Responder.success('Task was successfully restored'), 201);\n\t})\n\t.post(':id/finish', zValidator('param', ask.TaskParam), async (c) => {\n\t\tconst { id } = c.req.valid('param');\n\t\tconst db = c.get('db');\n\t\tawait createFinishedTask(id, db);\n\t\treturn c.json(Responder.success('Task successfully marked as finished'), 201);\n\t});\n", "import { DataError } from './DataError';\n\nexport function parseError(error: Error): [string, number] {\n\tif (error instanceof DataError) {\n\t\tswitch (error.type) {\n\t\t\tcase \"not-found\":\n\t\t\t\treturn [`Not Found: ${error.message}`, 404]\n\t\t\tcase 'creating-failed':\n\t\t\t\treturn [`Creating failed: ${error.message}`, 500]\n\t\t}\n\t}\n\n\treturn [error.message, 500]\n}", "// src/middleware/pretty-json/index.ts\nvar prettyJSON = (options = { space: 2 }) => {\n  return async function prettyJSON2(c, next) {\n    const pretty = c.req.query(\"pretty\") || c.req.query(\"pretty\") === \"\" ? true : false;\n    await next();\n    if (pretty && c.res.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      const obj = await c.res.json();\n      c.res = new Response(JSON.stringify(obj, null, options.space), c.res);\n    }\n  };\n};\nexport {\n  prettyJSON\n};\n", "// src/middleware/bearer-auth/index.ts\nimport { HTTPException } from \"../../http-exception.js\";\nimport { timingSafeEqual } from \"../../utils/buffer.js\";\nvar TOKEN_STRINGS = \"[A-Za-z0-9._~+/-]+=*\";\nvar PREFIX = \"Bearer\";\nvar bearerAuth = (options) => {\n  if (!options.token) {\n    throw new Error('bearer auth middleware requires options for \"token\"');\n  }\n  if (!options.realm) {\n    options.realm = \"\";\n  }\n  if (!options.prefix) {\n    options.prefix = PREFIX;\n  }\n  const realm = options.realm?.replace(/\"/g, '\\\\\"');\n  return async function bearerAuth2(c, next) {\n    const headerToken = c.req.header(\"Authorization\");\n    if (!headerToken) {\n      const res = new Response(\"Unauthorized\", {\n        status: 401,\n        headers: {\n          \"WWW-Authenticate\": `${options.prefix} realm=\"` + realm + '\"'\n        }\n      });\n      throw new HTTPException(401, { res });\n    } else {\n      const regexp = new RegExp(\"^\" + options.prefix + \" +(\" + TOKEN_STRINGS + \") *$\");\n      const match = regexp.exec(headerToken);\n      if (!match) {\n        const res = new Response(\"Bad Request\", {\n          status: 400,\n          headers: {\n            \"WWW-Authenticate\": `${options.prefix} error=\"invalid_request\"`\n          }\n        });\n        throw new HTTPException(400, { res });\n      } else {\n        let equal = false;\n        if (typeof options.token === \"string\") {\n          equal = await timingSafeEqual(options.token, match[1], options.hashFunction);\n        } else if (Array.isArray(options.token) && options.token.length > 0) {\n          for (const token of options.token) {\n            if (await timingSafeEqual(token, match[1], options.hashFunction)) {\n              equal = true;\n              break;\n            }\n          }\n        }\n        if (!equal) {\n          const res = new Response(\"Unauthorized\", {\n            status: 401,\n            headers: {\n              \"WWW-Authenticate\": `${options.prefix} error=\"invalid_token\"`\n            }\n          });\n          throw new HTTPException(401, { res });\n        }\n      }\n    }\n    await next();\n  };\n};\nexport {\n  bearerAuth\n};\n", "import type { RouterContext } from './context';\nimport { makeDatabaseClient } from '@repo/db';\nimport { finishedTasksRouter } from './modules/finished-task/routes';\nimport { Hono } from 'hono';\nimport { logger } from 'hono/logger';\nimport { taskRouter } from './modules/task/routes';\nimport { parseError } from './errors/parseError';\nimport { prettyJSON } from 'hono/pretty-json';\nimport { bearerAuth } from 'hono/bearer-auth';\n\nconst app = new Hono().get('/ping', (c) => c.text('pong'));\nconst db =  makeDatabaseClient();\n\napp.use('*', logger());\napp.use('*', prettyJSON());\napp.notFound((c) => c.json({ message: 'Not Found', ok: false }, 404));\napp.onError((err, c) => {\n  console.error(`${err}`);\n  const [text, status] = parseError(err);\n  return c.text(text, status);\n});\n\nconst token = process.env.BEARER_TOKEN || 'secret_tokenn';\napp.use('/api/*', bearerAuth({ token }));\n\nconst apiRouter = new Hono<{ Variables: RouterContext }>().use('*', async (c, next) => {\n  c.set('db', db);\n  await next();\n});\n\nconst apiRoutes = apiRouter.route(\n  '/v1',\n  new Hono().route('/tasks', taskRouter).route('/finished-tasks', finishedTasksRouter)\n);\n\napp.route('/api', apiRouter);\n\nexport default app;\nexport type ApiRouter = typeof apiRoutes;\n", "import { apiRouter } from '@repo/api';\n\nexport default apiRouter;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\nexport const wrap = undefined;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/dmitriy/personal/ai-task-manager/apps/server/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/dmitriy/personal/ai-task-manager/node_modules/.pnpm/wrangler@3.26.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\t\t\t\tconst envWrappers = [__MIDDLEWARE_0__.wrap].filter(Boolean);\n\t\t\t\tconst facade = {\n\t\t\t\t\t...worker,\n\t\t\t\t\tenvWrappers,\n\t\t\t\t\tmiddleware: [\n\t\t\t\t\t\t__MIDDLEWARE_0__.default,\n            ...(worker.middleware ? worker.middleware : []),\n\t\t\t\t\t].filter(Boolean)\n\t\t\t\t}\n\t\t\t\texport * from \"/Users/dmitriy/personal/ai-task-manager/apps/server/src/index.ts\";\n\n\t\t\t\tconst maskDurableObjectDefinition = (cls) =>\n\t\t\t\t\tclass extends cls {\n\t\t\t\t\t\tconstructor(state, env) {\n\t\t\t\t\t\t\tlet wrappedEnv = env\n\t\t\t\t\t\t\tfor (const wrapFn of envWrappers) {\n\t\t\t\t\t\t\t\twrappedEnv = wrapFn(wrappedEnv)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsuper(state, wrappedEnv);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\n\n\t\t\t\texport default facade;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// // This loads all middlewares exposed on the middleware object\n// // and then starts the invocation chain.\n// // The big idea is that we can add these to the middleware export dynamically\n// // through wrangler, or we can potentially let users directly add them as a sort\n// // of \"plugin\" system.\n\nimport worker from \"/Users/dmitriy/personal/ai-task-manager/apps/server/.wrangler/tmp/bundle-dCrEAK/middleware-insertion-facade.js\";\nimport {\n\t__facade_invoke__,\n\t__facade_register__,\n\tDispatcher,\n\tMiddleware,\n} from \"/Users/dmitriy/personal/ai-task-manager/node_modules/.pnpm/wrangler@3.26.0/node_modules/wrangler/templates/middleware/common.ts\";\n\n// We need to preserve all of the exports from the worker\nexport * from \"/Users/dmitriy/personal/ai-task-manager/apps/server/.wrangler/tmp/bundle-dCrEAK/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\t#noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nconst __facade_modules_fetch__: ExportedHandlerFetchHandler = function (\n\trequest,\n\tenv,\n\tctx\n) {\n\tif (worker.fetch === undefined)\n\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\treturn worker.fetch(request, env, ctx);\n};\n\nfunction getMaskedEnv(rawEnv: unknown) {\n\tlet env = rawEnv as Record<string, unknown>;\n\tif (worker.envWrappers && worker.envWrappers.length > 0) {\n\t\tfor (const wrapFn of worker.envWrappers) {\n\t\t\tenv = wrapFn(env);\n\t\t}\n\t}\n\treturn env;\n}\n\n/**\n * This type is here to cause a type error if a new export handler is added to\n * `ExportHandler` without it being included in the `facade` below.\n */\ntype MissingExportHandlers = Omit<\n\tRequired<ExportedHandler>,\n\t\"tail\" | \"trace\" | \"scheduled\" | \"queue\" | \"test\" | \"email\" | \"fetch\"\n>;\n\nlet registeredMiddleware = false;\n\nconst facade: ExportedHandler<unknown> & MissingExportHandlers = {\n\t...(worker.tail && {\n\t\ttail: maskHandlerEnv(worker.tail),\n\t}),\n\t...(worker.trace && {\n\t\ttrace: maskHandlerEnv(worker.trace),\n\t}),\n\t...(worker.scheduled && {\n\t\tscheduled: maskHandlerEnv(worker.scheduled),\n\t}),\n\t...(worker.queue && {\n\t\tqueue: maskHandlerEnv(worker.queue),\n\t}),\n\t...(worker.test && {\n\t\ttest: maskHandlerEnv(worker.test),\n\t}),\n\t...(worker.email && {\n\t\temail: maskHandlerEnv(worker.email),\n\t}),\n\n\tfetch(request, rawEnv, ctx) {\n\t\tconst env = getMaskedEnv(rawEnv);\n\t\t// Get the chain of middleware from the worker object\n\t\tif (worker.middleware && worker.middleware.length > 0) {\n\t\t\t// Make sure we only register middleware once:\n\t\t\t// https://github.com/cloudflare/workers-sdk/issues/2386#issuecomment-1614715911\n\t\t\tif (!registeredMiddleware) {\n\t\t\t\tregisteredMiddleware = true;\n\t\t\t\tfor (const middleware of worker.middleware) {\n\t\t\t\t\t__facade_register__(middleware);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst __facade_modules_dispatch__: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tenv,\n\t\t\t\tctx,\n\t\t\t\t__facade_modules_dispatch__,\n\t\t\t\t__facade_modules_fetch__\n\t\t\t);\n\t\t} else {\n\t\t\t// We didn't have any middleware so we can skip the invocation chain,\n\t\t\t// and just call the fetch handler directly\n\n\t\t\t// We \"don't care\" if this is undefined as we want to have the same behavior\n\t\t\t// as if the worker completely bypassed middleware.\n\t\t\treturn __facade_modules_fetch__(request, env, ctx);\n\t\t}\n\t},\n};\n\ntype HandlerFn<D, R> = (data: D, env: unknown, ctx: ExecutionContext) => R;\nfunction maskHandlerEnv<D, R>(handler: HandlerFn<D, R>): HandlerFn<D, R> {\n\treturn (data, env, ctx) => handler(data, getMaskedEnv(env), ctx);\n}\n\nexport default facade;\n"],
  "mappings": "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",
  "names": ["_a", "_a", "_a", "_a", "relations", "_a", "sql", "otel", "rawTracer", "_a", "_a", "param", "sql", "raw", "placeholder", "name", "SQL", "_a", "_a", "name", "_a", "_a", "InlineForeignKeys", "_a", "name", "_a", "_a", "_a", "ref", "actions", "_a", "_a", "_a", "_a", "result", "_a", "_a", "_a", "_a", "_a", "table", "sql", "joinOn", "field", "_a", "_a", "_a", "self", "_a", "_a", "_a", "_a", "self", "sql", "_a", "_a", "_a", "logger", "rows", "_a", "logger", "text", "version", "asc", "encodeURI", "array", "freeId", "sql", "sql", "entry", "Stmt", "Batch", "BatchStep", "BatchCond", "Request", "Stmt", "Batch", "Stmt", "Value", "NamedArg", "Batch", "BatchStep", "BatchCond", "ClientMsg", "Stmt", "Batch", "Error", "Value", "Error", "Response", "Error", "StmtResult", "Col", "Value", "BatchResult", "CursorEntry", "DescribeResult", "DescribeParam", "DescribeCol", "ServerMsg", "Error", "StmtResult", "BatchResult", "CursorEntry", "DescribeResult", "ClientMsg", "ServerMsg", "sql", "Error", "PipelineRespBody", "StreamResult", "StreamResponse", "Error", "StmtResult", "BatchResult", "DescribeResult", "CursorRespBody", "CursorRespBody", "CursorEntry", "Stmt", "Batch", "PipelineReqBody", "StreamRequest", "CloseStreamReq", "Stmt", "Batch", "CursorReqBody", "sql", "fetch", "PipelineReqBody", "CursorReqBody", "PipelineRespBody", "fetch", "version", "sql", "WsClient", "version", "sql", "_createClient", "HttpClient", "sqlCacheCapacity", "version", "sql", "_createClient", "util", "object", "array", "objectUtil", "isValid", "errorUtil", "errorMap", "_a", "version", "ctx", "result", "issues", "elements", "processed", "ZodFirstPartyTypeKind", "db", "db", "db", "getAllFinishedTasks", "db", "tasks", "options", "text", "object", "global", "__accessCheck", "__privateGet", "__privateAdd", "__privateSet", "raw", "__accessCheck", "__privateGet", "__privateAdd", "__privateSet", "app", "token", "_a", "_a2", "Node", "Node", "Hono", "Hono", "db", "getAllFinishedTasks", "db", "createTask", "Hono", "db", "tasks", "createTask", "token", "Hono", "text", "facade"]
}
